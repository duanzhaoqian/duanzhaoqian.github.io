<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>npm配置</title>
    <url>//2020/01/06/npm%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<h1 id="npm配置"><a href="#npm配置" class="headerlink" title="npm配置"></a>npm配置</h1><h2 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h2><h3 id="安装nrm"><a href="#安装nrm" class="headerlink" title="安装nrm"></a>安装nrm</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>

<h4 id="nrm查看镜像源"><a href="#nrm查看镜像源" class="headerlink" title="nrm查看镜像源"></a>nrm查看镜像源</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/06/npm%E9%85%8D%E7%BD%AE/image-20200106104547866.png" alt="image-20200106104547866"></p>
<h4 id="nrm使用镜像源"><a href="#nrm使用镜像源" class="headerlink" title="nrm使用镜像源"></a>nrm使用镜像源</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/06/npm%E9%85%8D%E7%BD%AE/image-20200106104641015.png" alt="image-20200106104641015"></p>
<h4 id="nrm测试"><a href="#nrm测试" class="headerlink" title="nrm测试"></a>nrm测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nrm test npm</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/06/npm%E9%85%8D%E7%BD%AE/image-20200106104749638.png" alt="image-20200106104749638"></p>
<h2 id="npx使用"><a href="#npx使用" class="headerlink" title="npx使用"></a>npx使用</h2><p>npx是一种在npm中安装工具，也可以被单独的下载使用</p>
<p>在npm 5.2.0 的时候会自动安装npx。</p>
<p>npx 会自动查找当前依赖包中的可执行文件，如果找不到，就会去 PATH 里找。如果依然找不到，就会帮你安装。</p>
<p>再也不需全局安装任何工具只需要<code>npx &lt;commang&gt;</code></p>
<p>例如 <code>npx http-server</code></p>
<p><img src="/2020/01/06/npm%E9%85%8D%E7%BD%AE/image-20200106110417223.png" alt="image-20200106110417223"></p>
<p>相关链接<a href="https://www.jianshu.com/p/a4d2d14f4c0e">https://www.jianshu.com/p/a4d2d14f4c0e</a></p>
<h3 id="当在执行npx的时候，npx会做什么事情？"><a href="#当在执行npx的时候，npx会做什么事情？" class="headerlink" title="当在执行npx的时候，npx会做什么事情？"></a>当在执行<code>npx</code>的时候，npx会做什么事情？</h3><ul>
<li>帮你在本地（可以是项目中的也可以是本机的）寻找这个 command<ul>
<li>找到了： 就用本地的版本</li>
<li>没找到： 直接下载最新版本，完成命令要求</li>
</ul>
</li>
<li>使用完之后不会在你的本机或者项目留下任何东西</li>
</ul>
<h4 id="优势总结"><a href="#优势总结" class="headerlink" title="优势总结"></a>优势总结</h4><ul>
<li><p>不会污染本机</p>
</li>
<li><p>永远使用最新版本的dependency</p>
</li>
</ul>
<h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><p>npx的-p选项允许您指定要安装的包，并将其添加到<strong>正在运行的$PATH中</strong></p>
<p>当你没有nvm的时候，帮你方便的切换node版本，假设你本机安装的node版本是node@8，但是你的项目可能需要使用使用node@6做测试，如果你有nvm，可以使用<code>nvm use v8.11</code>，其实npx也可以帮你做成。</p>
<p>使用<code>npx -p node@6 npm run test</code>：</p>
<ul>
<li>npx会帮助你下载node@6</li>
<li>将此时的环境变成node@6版本</li>
<li>使用node@6帮你执行npm run test</li>
<li>命令执行完毕之后不会修改你原来的node版本</li>
</ul>
<p>指令可以理解为使用node@6版本运行<code>npm run test</code></p>
<h2 id="npm-check-updates"><a href="#npm-check-updates" class="headerlink" title="npm-check-updates"></a>npm-check-updates</h2><p>一键更新 package.json版本</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure>

<h3 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ncu</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/06/npm%E9%85%8D%E7%BD%AE/image-20200108145920332.png" alt="image-20200108145920332"></p>
<h3 id="更新版本"><a href="#更新版本" class="headerlink" title="更新版本"></a>更新版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ncu -u</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/06/npm%E9%85%8D%E7%BD%AE/image-20200108150002614.png" alt="image-20200108150002614"></p>
<h2 id="fsevents"><a href="#fsevents" class="headerlink" title="fsevents"></a>fsevents</h2><p><a href="https://github.com/fsevents/fsevents">https://github.com/fsevents/fsevents</a></p>
<p>fsevents是mac端使用,window下<code>npm install</code>时会出错</p>
<p>mac下安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install fsevents</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>mac 软件工具</title>
    <url>//2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7.html</url>
    <content><![CDATA[<h1 id="MAC-下使用的软件"><a href="#MAC-下使用的软件" class="headerlink" title="MAC 下使用的软件"></a>MAC 下使用的软件</h1><h2 id="IINA"><a href="#IINA" class="headerlink" title="IINA"></a>IINA</h2><p>IINA 播放器</p>
<p><a href="https://www.iina.io">https://www.iina.io</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/sc-sky.png" alt="Screenshot"></p>
<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>markdown 编辑器</p>
<p><a href="https://www.typora.io">https://www.typora.io</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/inline.png" alt="img"></p>
<h2 id="Keycastr"><a href="#Keycastr" class="headerlink" title="Keycastr"></a>Keycastr</h2><p>显示键盘输入</p>
<p><a href="https://github.com/keycastr/keycastr">https://github.com/keycastr/keycastr</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/reposition.gif" alt="reposition"></p>
<h2 id="OmniPlan"><a href="#OmniPlan" class="headerlink" title="OmniPlan"></a>OmniPlan</h2><p>项目管理工具（收费软件）</p>
<p><a href="https://www.jianshu.com/p/458ee5e81573">https://www.jianshu.com/p/458ee5e81573</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/1200.png" alt="img"></p>
<h2 id="Draw-io"><a href="#Draw-io" class="headerlink" title="Draw.io"></a>Draw.io</h2><p>在线图表工具</p>
<p><a href="https://github.com/jgraph/drawio">https://github.com/jgraph/drawio</a></p>
<h3 id="使用-github作存储，在线编辑地址-https-www-draw-io-mode-github"><a href="#使用-github作存储，在线编辑地址-https-www-draw-io-mode-github" class="headerlink" title="使用 github作存储，在线编辑地址 https://www.draw.io/?mode=github"></a>使用 github作存储，在线编辑地址 <a href="https://www.draw.io/?mode=github">https://www.draw.io/?mode=github</a></h3><p><a href="https://about.draw.io/integrations/">支持更多的存储</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/image-20200105210828928.png" alt="image-20200105210828928"></p>
<h3 id="桌面版本下载-https-github-com-jgraph-drawio-desktop-releases"><a href="#桌面版本下载-https-github-com-jgraph-drawio-desktop-releases" class="headerlink" title="桌面版本下载 https://github.com/jgraph/drawio-desktop/releases"></a>桌面版本下载 <a href="https://github.com/jgraph/drawio-desktop/releases">https://github.com/jgraph/drawio-desktop/releases</a></h3><p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/image-20200105211007961.png" alt="image-20200105211007961"></p>
<h2 id="FDM下载工具"><a href="#FDM下载工具" class="headerlink" title="FDM下载工具"></a>FDM下载工具</h2><p><a href="https://www.freedownloadmanager.org/zh/">https://www.freedownloadmanager.org/zh/</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/image-20200105211435519.png" alt="image-20200105211435519"></p>
<h2 id="proxifier"><a href="#proxifier" class="headerlink" title="proxifier"></a>proxifier</h2><p>支持 socket5的代理工具</p>
<p><a href="https://xclient.info/s/proxifier.html">下载地址</a></p>
<p><a href="https://www.jianshu.com/p/7fb184d58713">注册码</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/image-20200105212044617.png" alt="image-20200105212044617"></p>
<h2 id="balenaEtcher"><a href="#balenaEtcher" class="headerlink" title="balenaEtcher"></a>balenaEtcher</h2><p>镜像写入工具</p>
<p><a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/image-20200105212524735.png" alt="image-20200105212524735"></p>
<h2 id="Disk-Speed-Test"><a href="#Disk-Speed-Test" class="headerlink" title="Disk Speed Test"></a>Disk Speed Test</h2><p>硬盘速度测试工具</p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/image-20200105212733810.png" alt="image-20200105212733810"></p>
<h2 id="The-Unarchiver"><a href="#The-Unarchiver" class="headerlink" title="The Unarchiver"></a>The Unarchiver</h2><p>解压工具</p>
<p><a href="https://theunarchiver.com">https://theunarchiver.com</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/unarchiver.png" alt="img"></p>
<h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><p>文本编辑器</p>
<p><a href="https://github.com/atom/atom">https://github.com/atom/atom</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/image-20200105213532723.png" alt="image-20200105213532723"></p>
<h2 id="Tunnelblick"><a href="#Tunnelblick" class="headerlink" title="Tunnelblick"></a>Tunnelblick</h2><p>OpenVPN 客户端</p>
<p><a href="https://tunnelblick.org/downloads.html">https://tunnelblick.org/downloads.html</a></p>
<p><a href="https://github.com/Tunnelblick/Tunnelblick">https://github.com/Tunnelblick/Tunnelblick</a></p>
<p><img src="/2020/01/05/mac-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/image-20200105213744940.png" alt="image-20200105213744940"></p>
]]></content>
  </entry>
  <entry>
    <title>JAMStack</title>
    <url>//2020/01/05/JAMStack.html</url>
    <content><![CDATA[<h1 id="什么是JAMStack"><a href="#什么是JAMStack" class="headerlink" title="什么是JAMStack"></a>什么是JAMStack</h1><p>引用<a href="https://xinmeiwen.com/jamstack-rumen-zhinan/">静态网站和JAMStack入门指南</a></p>
<p><img src="/2020/01/05/JAMStack/image-20200105154530477.png" alt="image-20200105154530477"></p>
<p>JAMStack是基于客户端JavaScript，可重用API和预构建Markup的现代Web开发架构。</p>
<p>——Netlify联合创始人Mathias Biilmann。</p>
<p>JAMStack是指没有服务器端组件，而是依赖于模板标记可以通过一个请求的文件API，通过客户端的JavaScript渲染页面上的内容。</p>
<p>JAMStack网站性能好，低成本，高安全性，速度快</p>
<h2 id="为什么选择JAMstack？"><a href="#为什么选择JAMstack？" class="headerlink" title="为什么选择JAMstack？"></a>为什么选择JAMstack？</h2><p>随着JAMstack的出现，无需将注意力转移到操作系统，Web服务器，数据库开发，管理和后端开发方面的特定Web技术上。 </p>
<p>JAMstack弥合了静态网站和动态网站之间的功能差距，同时保持了静态网站的关键优势。</p>
<p>内容管理与前端和后端是分开，允许在网站和应用之外提供内容，从多个前端调整内容，使其适合JAMstack构建。</p>
<p>静态网站非常高效且速度极快，因此非常适合博客，简历，产品组合，登录页面和文档。</p>
<h2 id="JAMstack的优点"><a href="#JAMstack的优点" class="headerlink" title="JAMstack的优点"></a>JAMstack的优点</h2><p><strong>更好的性能</strong>：如果您想要完美的速度和性能构建网站，那么最好的选择就是使用JAMstack，通过CDN提供的部署上构建文件即可。 </p>
<p><strong>快速的部署</strong>：可以轻松部署JAMstack网站，而无需经历配置数据库，保护.htaccess等麻烦，只需处理静态文件，因此可以快速在CDN上部署运行。 </p>
<p><strong>超赞的开发体验</strong>：学习和使用JAMstack并不像想象中那么困难。只需HTML，CSS和JS经验，开发人员就可以构建复杂的网站。JAMstack不需要复杂的语言，它还允许为站点生成器选择无头CMS，无需为内容和营销单独维护。 </p>
<p><strong>高安全性</strong>：静态网站具有极低的漏洞，因为它只是通过CDN提供的HTML文件和外部API处理，这可以减少任何可能的风险或对网站的攻击。 </p>
<p><strong>强大的社区</strong>：JAMstack社区随着时间的推移而不断发展，会出现对各种功能的新支持。</p>
<h2 id="如何开始？"><a href="#如何开始？" class="headerlink" title="如何开始？"></a>如何开始？</h2><p>使用成熟可靠的静态站点生成器可以在几分钟内构建JAMstack网站和应用</p>
<p><strong>Gatsby</strong>：一个基于React的免费开源框架，可以帮助开发人员构建超快速的网站和应用程序，用过之后会对浏览速度发出惊叹。</p>
<p><strong>Hugo</strong>：使用go语言开发，最受欢迎的开源静态站点生成器之一，凭借其惊人的速度和灵活性，使用Hugo制作网站变得轻松和灵活。</p>
<p><strong>Gridsome</strong>：一个Vue.js驱动的现代站点生成器。</p>
<p><strong>Jekyll</strong>：一个最早、简单、可扩展的静态站点生成器，得到Github全面支持，可方便免费部署在Github。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>JAMstack是一种新型制作网站方法，提供更好的性能，更高的安全性，更低的扩展成本以及更好的开发人员体验。</p>
]]></content>
  </entry>
  <entry>
    <title>hexo问题</title>
    <url>//2020/01/04/hexo%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="hexo-generator-searchdb问题"><a href="#hexo-generator-searchdb问题" class="headerlink" title="hexo-generator-searchdb问题"></a>hexo-generator-searchdb问题</h1><h2 id="Cannot-read-property-‘order-by’-of-undefined"><a href="#Cannot-read-property-‘order-by’-of-undefined" class="headerlink" title="Cannot read property ‘order_by’ of undefined"></a>Cannot read property ‘order_by’ of undefined</h2><p>执行 <code>npx hexo server</code>时出现错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">TypeError: Cannot read property 'order_by' of undefined</span><br><span class="line">    at module.exports (/Users/duanzq/blog/node_modules/hexo-generator-searchdb/lib/database.js:49:46)</span><br><span class="line">    at Hexo.module.exports (/Users/duanzq/blog/node_modules/hexo-generator-searchdb/lib/xml_generator.js:13:39)</span><br><span class="line">    at Hexo.tryCatcher (/Users/duanzq/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (/Users/duanzq/blog/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class="line">    at /Users/duanzq/blog/node_modules/hexo/lib/hexo/index.js:318:20</span><br><span class="line">    at tryCatcher (/Users/duanzq/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at MappingPromiseArray._promiseFulfilled (/Users/duanzq/blog/node_modules/bluebird/js/release/map.js:68:38)</span><br><span class="line">    at MappingPromiseArray.PromiseArray._iterate (/Users/duanzq/blog/node_modules/bluebird/js/release/promise_array.js:115:31)</span><br><span class="line">    at MappingPromiseArray.init (/Users/duanzq/blog/node_modules/bluebird/js/release/promise_array.js:79:10)</span><br><span class="line">    at MappingPromiseArray._asyncInit (/Users/duanzq/blog/node_modules/bluebird/js/release/map.js:37:10)</span><br><span class="line">    at _drainQueueStep (/Users/duanzq/blog/node_modules/bluebird/js/release/async.js:97:12)</span><br><span class="line">    at _drainQueue (/Users/duanzq/blog/node_modules/bluebird/js/release/async.js:86:9)</span><br><span class="line">    at Async._drainQueues (/Users/duanzq/blog/node_modules/bluebird/js/release/async.js:102:5)</span><br><span class="line">    at Immediate.Async.drainQueues [as _onImmediate] (/Users/duanzq/blog/node_modules/bluebird/js/release/async.js:15:14)</span><br><span class="line">    at processImmediate (internal/timers.js:439:21)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/04/hexo%E9%97%AE%E9%A2%98/image-20200104221819032.png" alt="image-20200104221819032"></p>
<p>原因是hexo-generator-searchdb/lib/database.js中读取<code>config.index_generator.order_by</code></p>
<p><img src="/2020/01/04/hexo%E9%97%AE%E9%A2%98/image-20200104222204883.png" alt="image-20200104222204883"></p>
<p>在使用hexo-generator-index2时没有配置 index 属性，增加该配置解决</p>
<p><img src="/2020/01/04/hexo%E9%97%AE%E9%A2%98/image-20200104222450387.png" alt="image-20200104222450387"></p>
]]></content>
  </entry>
  <entry>
    <title>db300</title>
    <url>//2019/04/28/db300.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="bd2a6a8344866d22d49fca13538e69b69e9a3f2f784775ceccf5c3dbd14646f8"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>work300</title>
    <url>//2019/04/28/work300.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="65151eb309e7ae29fe3387e6766d378a6abd138609b8df2b4c367a98ec7e9382"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown时序图</title>
    <url>//2019/03/26/markdown%E6%97%B6%E5%BA%8F%E5%9B%BE.html</url>
    <content><![CDATA[<p><a href="https://github.com/bubkoo/hexo-filter-sequence">hexo-filter-sequence</a></p>
<p>时序图1</p>
<div id="sequence-0"></div>
时序图2
<div id="sequence-1"></div>

<p><a href="https://wewelove.github.io/fcoder/2017/09/06/markdown-sequence/">为 Hexo 增加时序图解析功能</a><script src="https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js"></script><script src="https://cdn.bootcss.com/raphael/2.2.7/raphael.min.js"></script><script src="https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Alice->Bob: Hello Bob, how are you?
Note right of Bob: Bob thinks
Bob-->> Alice: I am good thanks!</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><textarea id="sequence-1-code" style="display: none">title:序列图sequence(示例)
participant A
participant B
participant C
note left of A: A左侧说明
note over B: 覆盖B说明
note right of C: C右侧说明
A->A:自己到自己
A->B:实线实箭头
B->>C:实线虚箭头
C-->B:虚线实箭头
B-->>A:虚线虚箭头</textarea><textarea id="sequence-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-1-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-1", options);</script></p>
]]></content>
  </entry>
  <entry>
    <title>markdown流程图</title>
    <url>//2019/03/26/markdown%E6%B5%81%E7%A8%8B%E5%9B%BE.html</url>
    <content><![CDATA[<p><a href="https://github.com/bubkoo/hexo-filter-flowchart">hexo-filter-flowchart</a></p>
<p>流程1</p>
<div id="flowchart-0" class="flow-chart"></div>
流程2
<div id="flowchart-1" class="flow-chart"></div><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始
e=>end: 结束
op=>operation: 操作
sub=>subroutine: 子程序
cond=>condition: 是或者不是?
io=>inputoutput: 输出

st(right)->op->cond
cond(no)->sub(right)->op
cond(yes)->io(right)->e
​</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: Start|past:>https://www.google.com[blank]
e=>end: End:>https://www.google.com
op1=>operation: My Operation|past
op2=>operation: Stuff|current
sub1=>subroutine: My Subroutine|invalid
cond=>condition: Yes
or No?|approved:>https://www.google.com
c2=>condition: Good idea|rejected
io=>inputoutput: catch something...|request

st->op1(right)->cond
cond(yes, right)->c2
cond(no)->sub1(left)->op1
c2(yes)->io->e
c2(no)->op2->e</textarea><textarea id="flowchart-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script>]]></content>
  </entry>
  <entry>
    <title>vscode-settings-sync</title>
    <url>//2019/03/11/vscode-settings-sync.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="13f921e18e6d46f60d21ab7e2d44c69347660305790b5fa9ab2066fbebe9ca22">789ac73df1643493bdf689375b77c8bfa11651703b3775ebcbb0d54e52630cc27fc3c1d6ab3b369a092021380c45fa05290c1f677dfac225972820d02cc931baa22d80cd59c1d4879146258f3fb5b5cf7ea1e6f36cd24983b86ea298c40a9615f75f6e0122936d23121db612729e233fc2245de624a970adcc7485b2f540688aa32c75fe50c9b0d74b2425ba03d81bf2</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode配置markdown</title>
    <url>//2019/03/11/vscode%E9%85%8D%E7%BD%AEmarkdown.html</url>
    <content><![CDATA[<h1 id="hexo3-修改配置"><a href="#hexo3-修改配置" class="headerlink" title="hexo3 修改配置"></a>hexo3 修改配置</h1><p>打开 <code>post_asset_folder: true</code><br>![ 2019-03-11-11-25-42.png](2019-03-11-vscode配置markdown/2019-03-11-11-25-42.png</p>
<h1 id="安装-Paste-Image-插件"><a href="#安装-Paste-Image-插件" class="headerlink" title="安装 Paste Image 插件"></a>安装 Paste Image 插件</h1><p>配置插件 settings.json 增加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;pasteImage.path&quot;: &quot;$&#123;currentFileNameWithoutExt&#125;&#x2F;&quot;,</span><br><span class="line">&quot;pasteImage.insertPattern&quot;: &quot;&#123;% asset_img $&#123;imageFileName&#125; $&#123;imageFilePath&#125; %&#125;&quot;,</span><br></pre></td></tr></table></figure>

<p><img src="/2019/03/11/vscode%E9%85%8D%E7%BD%AEmarkdown/2019-03-11-11-19-24.png" alt="  2019-03-11-11-19-24.png"> </p>
<h1 id="安装-Markdown-Preview-Enhanced-插件"><a href="#安装-Markdown-Preview-Enhanced-插件" class="headerlink" title="安装 Markdown Preview Enhanced 插件"></a>安装 Markdown Preview Enhanced 插件</h1><p>Ctrl+Shift+P 打开 MarkDown Preview Enhanced:Extend Parser 修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  onWillParseMarkdown:function(markdown) &#123;</span><br><span class="line">    return new Promise((resolve, reject)&#x3D;&gt; &#123;</span><br><span class="line">      markdown &#x3D; markdown.replace(</span><br><span class="line">        &#x2F;\&#123;%\s*asset_img\s*\S*\s*(\S*)\s*%\&#125;&#x2F;g,</span><br><span class="line">        (whole, content) &#x3D;&gt; (&#96;![$&#123;content&#125;]($&#123;content&#125;)&#96;)</span><br><span class="line">      )</span><br><span class="line">      return resolve(markdown)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  onDidParseMarkdown: function(html) &#123;</span><br><span class="line">    return new Promise((resolve, reject)&#x3D;&gt; &#123;</span><br><span class="line">      return resolve(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/03/11/vscode%E9%85%8D%E7%BD%AEmarkdown/2019-03-11-11-20-56.png" alt="2019-03-11-11-20-56.png"> </p>
<p><img src="/2019/03/11/vscode%E9%85%8D%E7%BD%AEmarkdown/2019-03-11-11-22-36.png" alt="2019-03-11-11-22-36.png"> </p>
]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>vscode</tag>
        <tag>hexo3</tag>
      </tags>
  </entry>
  <entry>
    <title>git bash 帐号密码错误解决</title>
    <url>//2019/03/10/git-bash-%E5%B8%90%E5%8F%B7%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3.html</url>
    <content><![CDATA[<h1 id="windows-删除或修改本地-Git-保存的账号密码"><a href="#windows-删除或修改本地-Git-保存的账号密码" class="headerlink" title="windows 删除或修改本地 Git 保存的账号密码"></a>windows 删除或修改本地 Git 保存的账号密码</h1><ol>
<li><p>打开 Windows 凭据</p>
<p><img src="/2019/03/10/git-bash-%E5%B8%90%E5%8F%B7%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/2019-03-10-01-52-48.png" alt="2019-03-10-01-52-48.png"></p>
</li>
<li><p>删除修改各凭据</p>
</li>
</ol>
<p><img src="/2019/03/10/git-bash-%E5%B8%90%E5%8F%B7%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/2019-03-10-02-10-45.png" alt="2019-03-10-02-10-45.png"></p>
]]></content>
      <tags>
        <tag>git bash</tag>
      </tags>
  </entry>
  <entry>
    <title>helloWorld</title>
    <url>//2019/03/08/helloWorld.html</url>
    <content><![CDATA[<p><img src="/2019/03/08/helloWorld/2019-03-08-11-13-39.png" alt="2019-03-08-11-13-39.png"></p>
]]></content>
  </entry>
  <entry>
    <title>effective java</title>
    <url>//2017/12/05/java.html</url>
    <content><![CDATA[<h1 id="2017-12-05-effective-java"><a href="#2017-12-05-effective-java" class="headerlink" title="2017-12-05-effective-java"></a>2017-12-05-effective-java</h1><!--
create time: 2017-12-05 13:27:35
Author: <TODO: 请写上你的名字>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<p>java 语言四种类型</p>
<p>接口(interface)、类(calss)、数组(array)、基本类型(primitive)</p>
<p>接口、类、数组称为引用类型，类实例和数组是对象(object)，而基本类型的值不是对象。</p>
<p>类的成员由域(field)、方法(method)、成员类(member class)和成员接口(member interface)组成。</p>
<p>方法签名（signature）由它的名称和所有参数类型组成，签名不包括返回类型</p>
<p>导出的 API 是指类、接口、构造器(constructor)、成员和序列化形式(serialized form)，程序员通过它们可以访问类、接口或包。使用 API 编写程序的程序员被称为该 API 的用户(user)，在类的实现中使用了 API 的类被称为该 API 的客户(client)。</p>
<p>类、接口、构造器、成员以及序列化形式被统称为 API 元素(API element)</p>
<h2 id="创建对象和销毁对象"><a href="#创建对象和销毁对象" class="headerlink" title="创建对象和销毁对象"></a>创建对象和销毁对象</h2><ol>
<li>使用静态工厂方法代替构造器</li>
<li>遇到多个构造器参数时要考虑用构建器(builder 模式)</li>
<li>用私有构造器或者枚举类型强化 Singleton 属性(单元素的枚举类型已经成为实现 Singleton 的最佳方法)</li>
<li>通过私有构造器强化不可实例化的能力(工具类做成抽象类来强制不可实例化不可取，因为可以被子类化，最好是有显式私有构造器，这样工具类不能被子类化)</li>
<li>避免创建不必要的对象(优先使用基本类型而不是装箱基本类型，小心无意识的自动装箱，非重量级对象避免创建对象池)</li>
<li>消除过期的对象引用(清空对象引用应该是一种例外，而不是一种规范行为；只要在缓存之外存在对某个项的键的引用，该项就有意义，可以使用 WeakHashMap 代表缓存)</li>
<li>避免使用终结方法(终结方法 finalizer 通常不可预测，避免使用；java 中使用 try-finally 块完成回收非内存资源，终结方法不一定会被执行，System.gc 和 System.runFinalization 增加终结方法的执行机会，不应该依赖终结方法来更新重要的持久状态。System.runFinalizersOnExit 和 Runtime.runFinalizersOnExit 声称保证终结方法被执行，有致命缺陷被废弃，内部匿名类终结方法守卫者，防止子类的终结方法未能调用 super.finalize)</li>
</ol>
<h2 id="对于所有对象都能用的方法"><a href="#对于所有对象都能用的方法" class="headerlink" title="对于所有对象都能用的方法"></a>对于所有对象都能用的方法</h2><ol>
<li>覆盖 equals 时遵守能用约定</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>effective  java</tag>
      </tags>
  </entry>
  <entry>
    <title>cisco-asa-5520-8.4.7</title>
    <url>//2017/08/01/asa5520.html</url>
    <content><![CDATA[<h1 id="ASA5520"><a href="#ASA5520" class="headerlink" title="ASA5520"></a>ASA5520</h1><p>恢复 image</p>
<p><a href="https://www.cisco.com/public/technotes/smbsa/en/us/remote/5500_image_rcvry.pdf">https://www.cisco.com/public/technotes/smbsa/en/us/remote/5500_image_rcvry.pdf</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ASA Version 8.4(7)</span><br><span class="line">hostname</span><br><span class="line">domain-name</span><br><span class="line">enable password</span><br><span class="line">passwd (默认pix用户密码)</span><br><span class="line"></span><br><span class="line">interface GigabitEthernet0&#x2F;3</span><br><span class="line">ip address 192.168.2.125 255.255.255.0</span><br><span class="line">nameif outside</span><br><span class="line">no shutdown</span><br><span class="line"></span><br><span class="line">interface GigabitEthernet0&#x2F;0</span><br><span class="line">ip address 172.10.10.1 255.255.255.0</span><br><span class="line">nameif inside</span><br><span class="line">no shutdown</span><br><span class="line"></span><br><span class="line">access-list out-in extended permit icmp any any</span><br><span class="line">access-group out-in in interface outside</span><br><span class="line">route outside 0.0.0.0 0.0.0.0 192.168.1.254 1</span><br><span class="line">username duanzhaoqian password duanzhaoqian privilege 15</span><br><span class="line"></span><br><span class="line">SSH登录</span><br><span class="line">crypto key generate rsa</span><br><span class="line">ssh 0.0.0.0 0.0.0.0 inside</span><br><span class="line">ssh timeout 30</span><br><span class="line">aaa authentication ssh console LOCAL</span><br><span class="line"></span><br><span class="line">telnet登录</span><br><span class="line">telnet 0.0.0.0 0.0.0.0 inside</span><br><span class="line">telnet timeout 5</span><br><span class="line"></span><br><span class="line">nat (inside,outside) source dynamic any interface(这样设置导致interface PAT无效,不建议使用)</span><br><span class="line"></span><br><span class="line">object network all</span><br><span class="line">subnet 0.0.0.0 0.0.0.0</span><br><span class="line">nat (inside,outside) dynamic interface</span><br><span class="line"></span><br><span class="line">object network 8080</span><br><span class="line">host 172.10.10.10</span><br><span class="line">nat (inside,outside) static interface service tcp 8080 8080 (第二个端口号是outside端口)</span><br><span class="line"></span><br><span class="line">object network 80</span><br><span class="line">host 172.10.10.10</span><br><span class="line">nat (inside,outside) static 192.168.2.126 service tcp 8080 80</span><br><span class="line"></span><br><span class="line">access-list out-in extended permit tcp any object 8080</span><br><span class="line">access-group out-in in interface outside</span><br></pre></td></tr></table></figure>

<p>VPN 配置</p>
<p><a href="https://www.cisco.com/c/en/us/td/docs/security/asa/asa84/configuration/guide/asa_84_cli_config/vpn_remote_access.html">https://www.cisco.com/c/en/us/td/docs/security/asa/asa84/configuration/guide/asa_84_cli_config/vpn_remote_access.html</a></p>
<p><a href="https://networkology.net/2012/10/07/ipsec-remote-access-vpn-asa-8-4-part-1-basic/">https://networkology.net/2012/10/07/ipsec-remote-access-vpn-asa-8-4-part-1-basic/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crypto ikev1 policy 1</span><br><span class="line">authentication pre-share</span><br><span class="line">encryption des</span><br><span class="line">hash md5</span><br><span class="line">group 2</span><br><span class="line">lifetime 43200</span><br><span class="line">crypto ikev1 enable outside</span><br><span class="line"></span><br><span class="line">access-list vpn_acl standard permit 172.10.10.0 255.255.255.0</span><br><span class="line">group-policy vpn internal</span><br><span class="line">group-policy vpn attributes</span><br><span class="line"> split-tunnel-policy tunnelspecified</span><br><span class="line"> split-tunnel-network-list value vpn_acl</span><br><span class="line"></span><br><span class="line">ip local pool vpnpool 172.1.1.1-172.1.1.50 mask 255.255.255.0</span><br><span class="line">crypto ipsec ikev1 transform-set FirstSet esp-des esp-md5-hmac</span><br><span class="line">tunnel-group vpngroup type remote-access</span><br><span class="line">tunnel-group vpngroup general-attributes</span><br><span class="line">address-pool vpnpool</span><br><span class="line">default-group-policy vpn</span><br><span class="line">tunnel-group vpngroup ipsec-attributes</span><br><span class="line">ikev1 pre-shared-key vpnpassword</span><br><span class="line">crypto dynamic-map dyn1 1 set ikev1 transform-set FirstSet</span><br><span class="line">crypto dynamic-map dyn1 1 set reverse-route</span><br><span class="line">crypto map mymap 1 ipsec-isakmp dynamic dyn1</span><br><span class="line">crypto map mymap interface outside</span><br><span class="line"></span><br><span class="line">object-group network obj_172.1.1.0</span><br><span class="line"> network-object 172.1.1.0 255.255.255.0</span><br><span class="line">object-group network obj_172.10.10.0</span><br><span class="line"> network-object 172.10.10.0 255.255.255.0</span><br><span class="line">nat (inside,outside) source static obj_172.10.10.0 obj_172.10.10.0 destination static obj_172.1.1.0 obj_172.1.1.0 no-proxy-arp route-lookup</span><br></pre></td></tr></table></figure>

<p>思科设备上的权限等级从 0 ～ 15，缺省情况下存在三个命令等级 0、1、15</p>
<p>privilege level 0——包括 disable、enable、exit、help 和 logout 命令</p>
<p>privilege level 1——用户通过 telnet 登录到路由器时等级为 1；router<code>&gt;</code>提示符下所有用户等级命令均属于 level 1</p>
<p>privilege level 15——包括 router<code>#</code>提示符下所有特权等级的命令</p>
<p>常用排错命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show run nat</span><br><span class="line">show run object</span><br><span class="line">show run object-group</span><br><span class="line">show nat detail</span><br><span class="line">show xlate (nat链)</span><br><span class="line">show conn</span><br><span class="line">show nat pool</span><br><span class="line">debug nat 255</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 7.3安装dcos 1.9</title>
    <url>//2017/06/22/dcos1.9.html</url>
    <content><![CDATA[<h1 id="安装条件"><a href="#安装条件" class="headerlink" title="安装条件"></a>安装条件</h1><ol>
<li><p>centos 7.3 系统下载</p>
<p><a href="https://mirrors.sohu.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1611.iso">https://mirrors.sohu.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1611.iso
</a></p>
</li>
<li><p>安装文档</p>
<p><a href="https://dcos.io/docs/1.9/installing/custom/system-requirements/">https://dcos.io/docs/1.9/installing/custom/system-requirements/</a></p>
</li>
<li><p>关闭 selinux</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sed -i s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;permissive&#x2F;g &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line">查看selinux状态</span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>关闭防火墙</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop firewalld &amp;&amp; sudo systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>取消 sudo 密码提示</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sudoers</span><br><span class="line">增加</span><br><span class="line">%wheel ALL&#x3D;(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>安装 ntp</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum -y install ntp</span><br><span class="line">systemctl enable ntpd &amp;&amp; systemctl start ntpd</span><br><span class="line"></span><br><span class="line">检查ntp服务,NTP enabled</span><br><span class="line">timedatectl</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# timedatectl</span><br><span class="line">    Local time: Thu 2017-06-22 15:19:53 CST</span><br><span class="line">Universal time: Thu 2017-06-22 07:19:53 UTC</span><br><span class="line">      RTC time: Thu 2017-06-22 07:19:51</span><br><span class="line">      Time zone: Asia&#x2F;Shanghai (CST, +0800)</span><br><span class="line">     NTP enabled: yes</span><br><span class="line">NTP synchronized: yes</span><br><span class="line">  RTC in local TZ: no</span><br><span class="line">      DST active: n&#x2F;a</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>安装软件及一些工具（安装过程中自动安装，提前安装）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y tar xz unzip curl ipset</span><br><span class="line">sudo yum -y install bind bind-utils</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>bootstrap node ssh 免密码登录其它 master node agent node</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen 生成密钥</span><br><span class="line">ssh-copy-id root@(其他节点)</span><br></pre></td></tr></table></figure>

<p>ssh 由于 dns 解析连接速度慢，关闭 sshd dns 解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">设置</span><br><span class="line">useDNS no</span><br></pre></td></tr></table></figure>

<h1 id="安装-docker-1-13-1"><a href="#安装-docker-1-13-1" class="headerlink" title="安装 docker 1.13.1"></a>安装 docker 1.13.1</h1><p>安装文档</p>
<p><a href="https://dcos.io/docs/1.9/installing/custom/system-requirements/install-docker-centos/">https://dcos.io/docs/1.9/installing/custom/system-requirements/install-docker-centos/</a></p>
<ol>
<li>Upgrade CentOS to 7.3:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum upgrade --assumeyes --tolerant</span><br><span class="line">sudo yum update --assumeyes</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Verify that the kernel is at least 3.10:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -r</span><br><span class="line">3.10.0-514.el7.x86_64</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Enable OverlayFS:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tee &#x2F;etc&#x2F;modules-load.d&#x2F;overlay.conf &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">overlay</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Reboot to reload kernel modules:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Verify that OverlayFS is enabled:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod | grep overlay</span><br><span class="line">overlay</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Configure yum to use the Docker yum repo:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tee &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">[dockerrepo]</span><br><span class="line">name&#x3D;Docker Repository</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;yum.dockerproject.org&#x2F;repo&#x2F;main&#x2F;centos&#x2F;$releasever&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;yum.dockerproject.org&#x2F;gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>Configure systemd to run the Docker Daemon with OverlayFS:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d &amp;&amp; sudo tee &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;override.conf &lt;&lt;- EOF</span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd --storage-driver&#x3D;overlay</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>Install the Docker engine, daemon, and service.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker-engine-1.13.1 docker-engine-selinux-1.13.1</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>

<p>When the process completes, you should see:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Complete!</span><br><span class="line">Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;docker.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service.</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>Test that Docker is properly installed:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker ps</span><br></pre></td></tr></table></figure>

<h1 id="运行-dcos-安装-gui-安装"><a href="#运行-dcos-安装-gui-安装" class="headerlink" title="运行 dcos 安装(gui 安装)"></a>运行 dcos 安装(gui 安装)</h1><p><a href="https://dcos.io/docs/1.9/installing/custom/gui/">https://dcos.io/docs/1.9/installing/custom/gui/</a></p>
<ol>
<li>Download the DC/OS installer to your bootstrap node.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -O https:&#x2F;&#x2F;downloads.dcos.io&#x2F;dcos&#x2F;stable&#x2F;dcos_generate_config.sh</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>From your terminal, start the DC/OS GUI installer with this command.</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo bash dcos_generate_config.sh --web</span><br></pre></td></tr></table></figure>

<p>Here is an example of the output.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Running mesosphere&#x2F;dcos-genconf docker with BUILD_DIR set to &#x2F;home&#x2F;centos&#x2F;genconf</span><br><span class="line">16:36:09 dcos_installer.action_lib.prettyprint:: &#x3D;&#x3D;&#x3D;&#x3D;&gt; Starting DC&#x2F;OS installer in web mode</span><br><span class="line">16:36:09 root:: Starting server (&#39;0.0.0.0&#39;, 9000)</span><br></pre></td></tr></table></figure>

<p>Tip: You can add the verbose <code>(-v)</code> flag to see the debug output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo bash dcos_generate_config.sh --web -v</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Launch the DC/OS web installer in your browser at: <code>http://&lt;bootstrap-node-public-ip&gt;:9000</code></li>
</ol>
<h1 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h1><ul>
<li>关于 dns 解析，增加自定义</li>
</ul>
<p>使用 dnsmasq 自定义 dns,修改 dcos-spartan.service 配置文件/opt/mesosphere/etcspartan.json,由于 spartan 占用 master 53 端口，故 dnsmasq 使用 5353 端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;upstream_resolvers&quot;: [&quot;192.168.100.82:5353&quot;,&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;],</span><br><span class="line">  &quot;udp_port&quot;: 53,</span><br><span class="line">  &quot;tcp_port&quot;: 53</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装dnsmasq</span><br><span class="line">vi &#x2F;etc&#x2F;dnsmasq.conf</span><br><span class="line">设置端口为5353</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义 DNS 服务器必须加入 8.8.8.8 8.8.4.4</li>
</ul>
<p>dcos 访问 Packages 需要经过 dcos.auth0.com 认证，114.114.114.114 不能解析该地址，出现 504（Gateway-timeout）</p>
<p><a href="https://dcos.io/docs/1.7/administration/installing/custom/configure-proxy/">https://dcos.io/docs/1.7/administration/installing/custom/configure-proxy/</a></p>
<p>另外还可以配置 dcos-adminrouter nginx.master.conf 增加<code>proxy_read_timeout 3600</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>dcos</tag>
      </tags>
  </entry>
  <entry>
    <title>本地dns解析</title>
    <url>//2016/10/25/dns.html</url>
    <content><![CDATA[<h1 id="2016-10-25-dns"><a href="#2016-10-25-dns" class="headerlink" title="2016-10-25-dns"></a>2016-10-25-dns</h1><!--
create time: 2016-10-25 08:45:29
Author: 段朝骞
Email: duanzhaoqian@outlook.com

categories:[Linux] [Database]  [Java] [HTML]  [Mac] [Life]
icon:fa-linux fa-database icon-java fa-apple

icon https://fizzed.com/oss/font-mfizz
icon https://fontawesome.io/icons/
-->

<h2 id="dnsmasq"><a href="#dnsmasq" class="headerlink" title="dnsmasq"></a>dnsmasq</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y dnsmasq</span><br></pre></td></tr></table></figure>

<p><strong>默认情况 dnsmasq 读取本地/etc/resolv.conf /etc/hosts 文件，配置文件无须做修改直接启动</strong></p>
<p>修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;dnsmasq.conf</span><br><span class="line">user&#x3D;dnsmasq                        #启动账号</span><br><span class="line">group&#x3D;users                         #启动组号</span><br><span class="line">interface&#x3D;eth0                      #绑定网络接口</span><br><span class="line">listen-address&#x3D;192.168.238.135      #绑定IP</span><br><span class="line">bind-interfaces</span><br><span class="line">resolv-file&#x3D;&#x2F;etc&#x2F;resolv.conf        #域名解析文件</span><br><span class="line">addn-hosts&#x3D;&#x2F;etc&#x2F;hosts               #域名解析文件</span><br><span class="line">log-queries         #开启日志查询</span><br><span class="line">log-facility&#x3D;&#x2F;var&#x2F;log&#x2F;dnsmasq&#x2F;dnsmasq.log #日志记录位置</span><br></pre></td></tr></table></figure>

<p>编辑域名解析文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;192.168.238.135 www.examp;e.com&quot; &gt;&gt; &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service dnsmasq start</span><br><span class="line">chkconfig dnsmasq on  &#x2F;&#x2F;随机启动</span><br></pre></td></tr></table></figure>

<p>检测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -antop |grep 53</span><br><span class="line"></span><br><span class="line">[root@ambari37 ~]# netstat -anop |grep 53</span><br><span class="line">tcp        0      0 0.0.0.0:53                  0.0.0.0:*                   LISTEN      7727&#x2F;dnsmasq        off (0.00&#x2F;0&#x2F;0)</span><br><span class="line">tcp        0      0 :::53                       :::*                        LISTEN      7727&#x2F;dnsmasq        off (0.00&#x2F;0&#x2F;0)</span><br><span class="line">udp        0      0 0.0.0.0:53                  0.0.0.0:*                               7727&#x2F;dnsmasq        off (0.00&#x2F;0&#x2F;0)</span><br><span class="line">udp        0      0 :::53                       :::*                                    7727&#x2F;dnsmasq        off (0.00&#x2F;0&#x2F;0)</span><br><span class="line">unix  2      [ ]         DGRAM                    95352  4027&#x2F;pickup</span><br><span class="line">unix  3      [ ]         STREAM     CONNECTED     11253  1192&#x2F;master</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y bind-utils</span><br><span class="line">nslookup</span><br><span class="line"></span><br><span class="line">172-10-64-33:~ duanzq$ dig kafka32</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; kafka32</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 38145</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;kafka32.			IN	A</span><br><span class="line"></span><br><span class="line">;; Query time: 33 msec</span><br><span class="line">;; SERVER: 192.168.100.37#53(192.168.100.37)</span><br><span class="line">;; WHEN: Tue Oct 25 09:56:37 2016</span><br><span class="line">;; MSG SIZE  rcvd: 25</span><br><span class="line"></span><br><span class="line">172-10-64-33:~ duanzq$</span><br></pre></td></tr></table></figure>

<p>泛域名解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;dnsmasq.conf</span><br><span class="line">address&#x3D;&#x2F;kkk.ptmind.com&#x2F;118.126.32.53 #随便写一条不存在的域名，指向我们的一个页面！</span><br></pre></td></tr></table></figure>

<p>【ps: addn-hosts=/etc/dnsmasq.hosts 的优先级大于 address=/domain.name/127.0.0.1】</p>
<p><a href="https://wiki.archlinux.org/index.php/Dnsmasq_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">dnsmasq wiki</a></p>
<p><a href="https://www.freehao123.com/dnsmasq/">https://www.freehao123.com/dnsmasq/</a></p>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p><a href="https://blog.csdn.net/liang12360640/article/details/45219637">https://blog.csdn.net/liang12360640/article/details/45219637</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ambari-2.4.1</title>
    <url>//2016/10/24/ambari-2.4.1.html</url>
    <content><![CDATA[<h1 id="2016-10-24-ambari-2-4-1"><a href="#2016-10-24-ambari-2-4-1" class="headerlink" title="2016-10-24-ambari-2.4.1"></a>2016-10-24-ambari-2.4.1</h1><!--
create time: 2016-10-24 10:58:47
Author: 段朝骞
Email: duanzhaoqian@outlook.com

categories:[Linux] [Database]  [Java] [HTML]  [Mac] [Life]
icon:fa-linux fa-database icon-java fa-apple

icon https://fizzed.com/oss/font-mfizz
icon https://fontawesome.io/icons/
-->

<h2 id="yum-源安装"><a href="#yum-源安装" class="headerlink" title="yum 源安装"></a>yum 源安装</h2><p><a href="https://cwiki.apache.org/confluence/display/AMBARI/Quick+Start+for+New+VM+Users">https://cwiki.apache.org/confluence/display/AMBARI/Quick+Start+for+New+VM+Users</a></p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>rpm<br>curl<br>wget<br>pdsh</p>
<p>添加源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;x86_64&#x2F;epel-release-6-8.noarch.rpm</span><br><span class="line">yum install -y pdsh</span><br></pre></td></tr></table></figure>

<h3 id="centos6-7-mini"><a href="#centos6-7-mini" class="headerlink" title="centos6.7-mini"></a>centos6.7-mini</h3><p>系统版本 CentOS-6.7-x86_64-minimal.iso 2 核 4G 100G 硬盘</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -nv https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;ambari&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.4.1.0&#x2F;ambari.repo -O &#x2F;etc&#x2F;yum.repos.d&#x2F;ambari.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ambari-server -y</span><br></pre></td></tr></table></figure>

<p>rpm 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;162.209.124.204&#x2F;hortonworks&#x2F;ambari&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.1.1&#x2F;Updates-ambari-2.1.1&#x2F;ambari&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="准备机器"><a href="#准备机器" class="headerlink" title="准备机器"></a>准备机器</h4><blockquote>
<p>192.168.100.37<br>192.168.100.21<br>192.168.100.22<br>192.168.100.23<br>192.168.100.24</p>
</blockquote>
<p>192.168.100.37 安装 ambari-server dnsmasq</p>
<p>各机器配置(同步时间等)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y ntp</span><br><span class="line">ntpdate 192.168.100.10</span><br></pre></td></tr></table></figure>

<p>修改 hostname 及 IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth2</span><br></pre></td></tr></table></figure>

<p>修改 dns 解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;resolv.conf</span><br><span class="line">nameserver 192.168.100.37</span><br></pre></td></tr></table></figure>

<h5 id="192-168-100-37"><a href="#192-168-100-37" class="headerlink" title="192.168.100.37"></a>192.168.100.37</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;x86_64&#x2F;epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget rpm curl wget pdsh</span><br><span class="line"></span><br><span class="line">wget -nv https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;ambari&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.4.1.0&#x2F;ambari.repo -O &#x2F;etc&#x2F;yum.repos.d&#x2F;ambari.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y dnsmasq</span><br><span class="line">yum install -y ambari-server</span><br></pre></td></tr></table></figure>

<p>配置 hosts 及 ssh 免密登陆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line">192.168.100.37 ambari37</span><br><span class="line">192.168.100.36 ambari36</span><br><span class="line">192.168.100.35 kafka35</span><br><span class="line">192.168.100.34 kafka34</span><br><span class="line">192.168.100.33 storm33</span><br><span class="line">192.168.100.32 storm32</span><br><span class="line">192.168.100.31 storm31</span><br><span class="line">192.168.100.21 node21</span><br><span class="line">192.168.100.22 node22</span><br><span class="line">192.168.100.23 node23</span><br><span class="line">192.168.100.24 node24</span><br></pre></td></tr></table></figure>

<p>ssh 免密登陆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id root@node21</span><br><span class="line">ssh-copy-id root@node22</span><br><span class="line">ssh-copy-id root@node23</span><br><span class="line">ssh-copy-id root@node24</span><br></pre></td></tr></table></figure>

<p>启动 dnsmasq</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service dnsmasq start</span><br></pre></td></tr></table></figure>

<h5 id="192-168-100-37-1"><a href="#192-168-100-37-1" class="headerlink" title="192.168.100.37"></a>192.168.100.37</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ambari-server setup -s</span><br></pre></td></tr></table></figure>

<p>自动检查环境 自动下载 jdk-8u77-linux-x64.tar.gz</p>
<p>执行过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ambari37 ~]# ambari-server setup -s</span><br><span class="line">Using python  &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line">Setup ambari-server</span><br><span class="line">Checking SELinux...</span><br><span class="line">SELinux status is &#39;enabled&#39;</span><br><span class="line">SELinux mode is &#39;enforcing&#39;</span><br><span class="line">Temporarily disabling SELinux</span><br><span class="line">WARNING: SELinux is set to &#39;permissive&#39; mode and temporarily disabled.</span><br><span class="line">OK to continue [y&#x2F;n] (y)?</span><br><span class="line">Customize user account for ambari-server daemon [y&#x2F;n] (n)?</span><br><span class="line">Adjusting ambari-server permissions and ownership...</span><br><span class="line">Checking firewall status...</span><br><span class="line">Checking JDK...</span><br><span class="line">[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8</span><br><span class="line">[2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7</span><br><span class="line">[3] Custom JDK</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Enter choice (1):</span><br><span class="line">To download the Oracle JDK and the Java Cryptography Extension (JCE) Policy Files you must accept the license terms found at https:&#x2F;&#x2F;www.oracle.com&#x2F;technetwork&#x2F;java&#x2F;javase&#x2F;terms&#x2F;license&#x2F;index.html and not accepting will cancel the Ambari Server setup and you must install the JDK and JCE files manually.</span><br><span class="line">Do you accept the Oracle Binary Code License Agreement [y&#x2F;n] (y)?</span><br><span class="line">Downloading JDK from https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;ARTIFACTS&#x2F;jdk-8u77-linux-x64.tar.gz to &#x2F;var&#x2F;lib&#x2F;ambari-server&#x2F;resources&#x2F;jdk-8u77-linux-x64.tar.gz</span><br><span class="line">jdk-8u77-linux-x64.tar.gz... 100% (173.0 MB of 173.0 MB)</span><br><span class="line">Successfully downloaded JDK distribution to &#x2F;var&#x2F;lib&#x2F;ambari-server&#x2F;resources&#x2F;jdk-8u77-linux-x64.tar.gz</span><br><span class="line">Installing JDK to &#x2F;usr&#x2F;jdk64&#x2F;</span><br><span class="line">Successfully installed JDK to &#x2F;usr&#x2F;jdk64&#x2F;</span><br><span class="line">Downloading JCE Policy archive from https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;ARTIFACTS&#x2F;jce_policy-8.zip to &#x2F;var&#x2F;lib&#x2F;ambari-server&#x2F;resources&#x2F;jce_policy-8.zip</span><br><span class="line"></span><br><span class="line">Successfully downloaded JCE Policy archive to &#x2F;var&#x2F;lib&#x2F;ambari-server&#x2F;resources&#x2F;jce_policy-8.zip</span><br><span class="line">Installing JCE policy...</span><br><span class="line">Completing setup...</span><br><span class="line">Configuring database...</span><br><span class="line">Enter advanced database configuration [y&#x2F;n] (n)?</span><br><span class="line">Configuring database...</span><br><span class="line">Default properties detected. Using built-in database.</span><br><span class="line">Configuring ambari database...</span><br><span class="line">Checking PostgreSQL...</span><br><span class="line">Running initdb: This may take up to a minute.</span><br><span class="line">Initializing database: [  OK  ]</span><br><span class="line"></span><br><span class="line">About to start PostgreSQL</span><br><span class="line">Configuring local database...</span><br><span class="line">Connecting to local database...done.</span><br><span class="line">Configuring PostgreSQL...</span><br><span class="line">Restarting PostgreSQL</span><br><span class="line">Extracting system views...</span><br><span class="line">.........ambari-admin-2.4.1.0.22.jar</span><br><span class="line">..</span><br><span class="line">Adjusting ambari-server permissions and ownership...</span><br><span class="line">Ambari Server &#39;setup&#39; completed successfully.</span><br><span class="line">[root@ambari37 ~]#</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ambari-server start</span><br><span class="line">[root@ambari37 ~]# ambari-server start</span><br><span class="line">Using python  &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line">Starting ambari-server</span><br><span class="line">Ambari Server running with administrator privileges.</span><br><span class="line">Organizing resource files at &#x2F;var&#x2F;lib&#x2F;ambari-server&#x2F;resources...</span><br><span class="line">Ambari database consistency check started...</span><br><span class="line">No errors were found.</span><br><span class="line">Ambari database consistency check finished</span><br><span class="line">Server PID at: &#x2F;var&#x2F;run&#x2F;ambari-server&#x2F;ambari-server.pid</span><br><span class="line">Server out at: &#x2F;var&#x2F;log&#x2F;ambari-server&#x2F;ambari-server.out</span><br><span class="line">Server log at: &#x2F;var&#x2F;log&#x2F;ambari-server&#x2F;ambari-server.log</span><br><span class="line">Waiting for server start....................</span><br><span class="line">Ambari Server &#39;start&#39; completed successfully.</span><br><span class="line">[root@ambari37 ~]#</span><br></pre></td></tr></table></figure>

<p>检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ambari37 ~]# ambari-server status</span><br><span class="line">Using python  &#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line">Ambari-server status</span><br><span class="line">Ambari Server running</span><br><span class="line">Found Ambari Server PID: 11599 at: &#x2F;var&#x2F;run&#x2F;ambari-server&#x2F;ambari-server.pid</span><br><span class="line">[root@ambari37 ~]#</span><br></pre></td></tr></table></figure>

<p>192.168.100.37:8080</p>
<h2 id="离线-yum-安装"><a href="#离线-yum-安装" class="headerlink" title="离线 yum 安装"></a>离线 yum 安装</h2><p><a href="https://docs.hortonworks.com/HDPDocuments/Ambari-2.2.2.0/bk_Installing_HDP_AMB/content/_hdp_24_repositories.html">HDP 2.4.2</a></p>
<p><a href="https://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_release-notes/content/download-links-250.html">HDP 2.5.0</a></p>
<p>安装本地源</p>
<p><a href="https://my.oschina.net/u/1461927/blog/372147">https://my.oschina.net/u/1461927/blog/372147</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -nv https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;ambari&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.4.1.0&#x2F;ambari.repo -O &#x2F;etc&#x2F;yum.repos.d&#x2F;ambari.repo</span><br><span class="line">wget -nv https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.5.0.0&#x2F;hdp.repo -O &#x2F;etc&#x2F;yum.repos.d&#x2F;hdp.repo</span><br></pre></td></tr></table></figure>

<p>下载链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.5.0.0&#x2F;HDP-2.5.0.0-centos6-rpm.tar.gz</span><br><span class="line">https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;ambari&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.4.1.0&#x2F;ambari-2.4.1.0-centos6.tar.gz</span><br><span class="line">https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP-UTILS-1.1.0.21&#x2F;repos&#x2F;centos6&#x2F;HDP-UTILS-1.1.0.21-centos6.tar.gz</span><br><span class="line"></span><br><span class="line">下面链接可以不用下载</span><br><span class="line">https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.5.0.0&#x2F;HDP-2.5.0.0-centos6-tars-tarball.tar.gz</span><br></pre></td></tr></table></figure>

<p>将 ambari-2.4.1.0-centos6\AMBARI-2.4.1.0\centos6\2.4.1.0-22 目录中的文件复制到 /var/www/html/ambari/centos6/Updates-ambari-2.4.1.0</p>
<p>将 HDP-2.5.0.0-centos6-rpm\HDP\centos6 目录中的文件复制到 /var/www/html/hdp/centos6/HDP-2.5.0.0</p>
<p>将 HDP-UTILS-1.1.0.21-centos6\HDP-UTILS-1.1.0.21\repos\centos6 目录中的文件复制到 /var/www/html/hdp/centos6/HDP-UTILS-1.1.0.21</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install httpd</span><br><span class="line">yum install yum-utils createrepo</span><br><span class="line">mkdir -p &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">cd &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line">mkdir -p ambari&#x2F;centos6</span><br><span class="line">cd ambari&#x2F;centos6&#x2F;</span><br><span class="line">reposync -r Updates-ambari-2.4.1.0</span><br><span class="line">cd &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line">mkdir -p hdp&#x2F;centos6</span><br><span class="line">cd hdp&#x2F;centos6</span><br><span class="line">reposync -r HDP-2.5.0.0</span><br><span class="line">reposync -r HDP-UTILS-1.1.0.21</span><br><span class="line"></span><br><span class="line">createrepo &#x2F;var&#x2F;www&#x2F;html&#x2F;ambari&#x2F;centos6&#x2F;Updates-ambari-2.4.1.0</span><br><span class="line">createrepo &#x2F;var&#x2F;www&#x2F;html&#x2F;hdp&#x2F;centos6&#x2F;HDP-2.5.0.0</span><br><span class="line">createrepo &#x2F;var&#x2F;www&#x2F;html&#x2F;hdp&#x2F;centos6&#x2F;HDP-UTILS-1.1.0.21</span><br></pre></td></tr></table></figure>

<p>搭建完成本地 repo 源后修改/etc/yum.repo.d/ambari.repo 和/etc/yum.repo.d/hdp.repo,将链接地址修改</p>
<p>HDP-2.4.2.0 链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;ambari&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.2.2.0&#x2F;ambari-2.2.2.0-centos6.tar.gz</span><br><span class="line">https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP-UTILS-1.1.0.20&#x2F;repos&#x2F;centos6&#x2F;HDP-UTILS-1.1.0.20-centos6.tar.gz</span><br><span class="line">https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.4.2.0&#x2F;HDP-2.4.2.0-centos6-rpm.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="删除-ambari"><a href="#删除-ambari" class="headerlink" title="删除 ambari"></a>删除 ambari</h2><p><a href="https://community.hortonworks.com/questions/1110/how-to-completely-remove-uninstall-ambari-and-hdp.html">https://community.hortonworks.com/questions/1110/how-to-completely-remove-uninstall-ambari-and-hdp.html</a></p>
<h3 id="服务端重置"><a href="#服务端重置" class="headerlink" title="服务端重置"></a>服务端重置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ambari-server stop</span><br><span class="line">ambari-server reset</span><br><span class="line"></span><br><span class="line">ambari-server setup  (重新设置server,可以不做)</span><br></pre></td></tr></table></figure>

<h3 id="客户端删除"><a href="#客户端删除" class="headerlink" title="客户端删除"></a>客户端删除</h3><p>清除各目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service ambari-agent stop</span><br><span class="line">python &#x2F;usr&#x2F;lib&#x2F;python2.6&#x2F;site-packages&#x2F;ambari_agent&#x2F;HostCleanup.py --silent</span><br><span class="line"></span><br><span class="line">yum erase  -y ambari-agent hdp-select</span><br><span class="line">rpm -qa|grep ambari |xargs yum erase -y</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;var&#x2F;lib&#x2F;ambari-agent</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;var&#x2F;lib&#x2F;ambari-server</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;var&#x2F;run&#x2F;ambari-agent</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;usr&#x2F;lib&#x2F;amrbari-agent</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;etc&#x2F;ambari-agent</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;var&#x2F;log&#x2F;ambari-agent</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;usr&#x2F;lib&#x2F;python2.6&#x2F;site-packages&#x2F;ambari*</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;etc&#x2F;hadoop&#x2F;</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;etc&#x2F;storm&#x2F;</span><br><span class="line"></span><br><span class="line">rm -rf &#x2F;usr&#x2F;hdp&#x2F;</span><br></pre></td></tr></table></figure>

<p>重启机器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python &#x2F;usr&#x2F;lib&#x2F;python2.6&#x2F;site-packages&#x2F;ambari_agent&#x2F;HostCleanup.py --silent --skip&#x3D;users</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line">To clean up in interactive mode, remove --silent option.</span><br><span class="line">To clean up all resources, including users, remove --skip&#x3D;users option.</span><br><span class="line">Use --help for a list of available options.</span><br></pre></td></tr></table></figure>

<p>删除 rpm 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep ambari |xargs yum erase -y</span><br><span class="line">yum -y erase hdp-select</span><br></pre></td></tr></table></figure>

<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><p><a href="https://cwiki.apache.org/confluence/display/AMBARI/Installation+Guide+for+Ambari+2.4.1">https://cwiki.apache.org/confluence/display/AMBARI/Installation+Guide+for+Ambari+2.4.1</a></p>
<p><a href="https://cwiki.apache.org/confluence/display/AMBARI/Ambari+Development">https://cwiki.apache.org/confluence/display/AMBARI/Ambari+Development</a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>jdk 1.7.0_80</p>
<p>python 2.6.6</p>
<p>maven 3.3.9</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ambari36 ~]# mvn -version</span><br><span class="line">Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)</span><br><span class="line">Maven home: &#x2F;usr&#x2F;local&#x2F;maven</span><br><span class="line">Java version: 1.7.0_80, vendor: Oracle Corporation</span><br><span class="line">Java home: &#x2F;usr&#x2F;local&#x2F;java&#x2F;jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;2.6.32-573.el6.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure>

<p>安装 g++ gcc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf automake libtool make</span><br></pre></td></tr></table></figure>

<p>安装 rpm-build</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install rpm-build</span><br></pre></td></tr></table></figure>

<p>安装 Node.js npm 0.10.44</p>
<p><a href="https://nodejs.org/download/release/v0.10.44/">https://nodejs.org/download/release/v0.10.44/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v0.10.44&#x2F;node-v0.10.44-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java</span><br><span class="line">export MAVEN_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;maven</span><br><span class="line">export NODE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;node</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$NODE_HOME&#x2F;bin:$PATH:$MAVEN_HOME&#x2F;bin</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p>安装 brunch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g brunch@1.7.20</span><br></pre></td></tr></table></figure>

<p>安装 git</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure>

<h3 id="下载编译"><a href="#下载编译" class="headerlink" title="下载编译"></a>下载编译</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.apache.org&#x2F;dist&#x2F;ambari&#x2F;ambari-2.4.1&#x2F;apache-ambari-2.4.1-src.tar.gz</span><br><span class="line">tar xfvz apache-ambari-2.4.1-src.tar.gz</span><br><span class="line">cd apache-ambari-2.4.1-src</span><br><span class="line">mvn versions:set -DneVersion&#x3D;2.4.1.0.0</span><br><span class="line"></span><br><span class="line">pushd ambari-metrics</span><br><span class="line">mvn versions:set -DnewVersion&#x3D;2.4.1.0.0</span><br><span class="line">popd</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn -B clean install package rpm:rpm -DnewVersion&#x3D;2.4.1.0.0 -DskipTests -Dpython.ver&#x3D;&quot;python &gt;&#x3D; 2.6&quot;</span><br></pre></td></tr></table></figure>

<h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>编译中由于网络原因 总是失败</p>
<p>1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.codehaus.mojo:rpm-maven-plugin:2.0.1:rpm (default-cli) on project ambari: RPM build execution returned: &#39;127&#39; executing &#39;&#x2F;bin&#x2F;sh -c cd &#x2F;root&#x2F;apache-ambari-2.4.1-src&#x2F;target&#x2F;rpm&#x2F;ambari&#x2F;SPECS &amp;&amp; rpmbuild -bb --buildroot &#x2F;root&#x2F;apache-ambari-2.4.1-src&#x2F;target&#x2F;rpm&#x2F;ambari&#x2F;buildroot --define &#39;_topdir &#x2F;root&#x2F;apache-ambari-2.4.1-src&#x2F;target&#x2F;rpm&#x2F;ambari&#39; --target noarch-redhat-linux ambari.spec&#39; -&gt; [Help 1]</span><br></pre></td></tr></table></figure>

<p>rpmbuild 命令未找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install rpm-build</span><br></pre></td></tr></table></figure>

<p>2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.2.1:exec (compile-npm) on project ambari-web: Command execution failed. Cannot run program &quot;npm&quot; (in directory &quot;&#x2F;root&#x2F;apache-ambari-2.4.1-src&#x2F;ambari-web&quot;): error&#x3D;2, 没有那个文件或目录 -&gt; [Help 1]</span><br></pre></td></tr></table></figure>

<p>npm 命令不存在</p>
<p>安装 node.js npm</p>
<p>3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v0.10.44&#x2F;node-v0.10.44-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;Medium&#x2F;phantomjs&#x2F;releases&#x2F;download&#x2F;v1.9.19&#x2F;phantomjs-1.9.8-linux-x86_64.tar.bz2</span><br></pre></td></tr></table></figure>

<p>phantomjs error</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ambari36 phantomjs-1.9.8-linux-x86_64]# bin&#x2F;phantomjs</span><br><span class="line">bin&#x2F;phantomjs: error while loading shared libraries: libfreetype.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">解决</span><br><span class="line">yum install freetype</span><br><span class="line"></span><br><span class="line">[root@ambari36 phantomjs-1.9.8-linux-x86_64]# bin&#x2F;phantomjs</span><br><span class="line">bin&#x2F;phantomjs: error while loading shared libraries: libfontconfig.so.1: cannot open shared object file: No such file or directory</span><br><span class="line">解决</span><br><span class="line">yum install fontconfig freetype libfreetype.so.6 libfontconfig.so.1 libstdc++.so.6</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>xenserver 6.5</title>
    <url>//2016/10/22/xenserver.html</url>
    <content><![CDATA[<h1 id="2016-10-22-xenserver"><a href="#2016-10-22-xenserver" class="headerlink" title="2016-10-22-xenserver"></a>2016-10-22-xenserver</h1><!--
create time: 2016-10-22 09:30:41
Author: 段朝骞
Email: duanzhaoqian@outlook.com

categories:[Linux] [Database]  [Java] [HTML]  [Mac] [Life]
icon:fa-linux fa-database icon-java fa-apple

icon https:///fizzed.com/oss/font-mfizz
icon https:///fontawesome.io/icons/
-->

<h2 id="设置-VM-通电自动启动"><a href="#设置-VM-通电自动启动" class="headerlink" title="设置 VM 通电自动启动"></a>设置 VM 通电自动启动</h2><p>[https:///support.citrix.com/article/CTX133910]https:////support.citrix.com/article/CTX133910)</p>
<p>Setting the XenServer to allow Auto-Start</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xe pool-list</span><br><span class="line">xe pool-param-set uuid&#x3D;UUID other-config:auto_poweron&#x3D;true</span><br></pre></td></tr></table></figure>

<p>Setting the Virtual Machines to Auto-Start</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xe vm-list</span><br><span class="line">xe vm-param-set uuid&#x3D;UUID other-config:auto_poweron&#x3D;true</span><br></pre></td></tr></table></figure>

<p>设置所有的虚拟机开机自动启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in &#96;xe vm-list params&#x3D;uuid --minimal | sed &#39;s&#x2F;,&#x2F; &#x2F;g&#39;&#96;;do xe vm-param-set uuid&#x3D;$i other-config:auto_poweron&#x3D;true;done</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>flume-1.7</title>
    <url>//2016/10/20/flume.html</url>
    <content><![CDATA[<h1 id="2016-10-20-flume-1-7"><a href="#2016-10-20-flume-1-7" class="headerlink" title="2016-10-20-flume-1.7"></a>2016-10-20-flume-1.7</h1><!--
create time: 2016-10-20 17:53:41
Author: 段朝骞
Email: duanzhaoqian@outlook.com

categories:[Linux] [Database]  [Java] [HTML]  [Mac] [Life]
icon:fa-linux fa-database icon-java fa-apple

icon https://fizzed.com/oss/font-mfizz
icon https://fontawesome.io/icons/
-->

<h2 id="download"><a href="#download" class="headerlink" title="download"></a>download</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;apache.fayea.com&#x2F;flume&#x2F;1.7.0&#x2F;apache-flume-1.7.0-bin.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="document"><a href="#document" class="headerlink" title="document"></a>document</h2><p><a href="https://flume.apache.org/FlumeUserGuide.html#flume-1-7-0-user-guide">https://flume.apache.org/FlumeUserGuide.html#flume-1-7-0-user-guide</a></p>
<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>hdfs flume-conf.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Licensed to the Apache Software Foundation (ASF) under one</span><br><span class="line"># or more contributor license agreements.  See the NOTICE file</span><br><span class="line"># distributed with this work for additional information</span><br><span class="line"># regarding copyright ownership.  The ASF licenses this file</span><br><span class="line"># to you under the Apache License, Version 2.0 (the</span><br><span class="line"># &quot;License&quot;); you may not use this file except in compliance</span><br><span class="line"># with the License.  You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#  https:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing,</span><br><span class="line"># software distributed under the License is distributed on an</span><br><span class="line"># &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span><br><span class="line"># KIND, either express or implied.  See the License for the</span><br><span class="line"># specific language governing permissions and limitations</span><br><span class="line"># under the License.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># The configuration file needs to define the sources,</span><br><span class="line"># the channels and the sinks.</span><br><span class="line"># Sources, channels and sinks are defined per agent,</span><br><span class="line"># in this case called &#39;agent&#39;</span><br><span class="line"></span><br><span class="line">agent.sources &#x3D; execSource</span><br><span class="line">agent.channels &#x3D; memoryChannel</span><br><span class="line">agent.sinks &#x3D; hdfsSink</span><br><span class="line"></span><br><span class="line"># For each one of the sources, the type is defined</span><br><span class="line"># agent.sources.seqGenSrc.type &#x3D; seq</span><br><span class="line">agent.sources.execSource.type &#x3D; exec</span><br><span class="line">agent.sources.execSource.command &#x3D; tail -F &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;logs&#x2F;catalina.out</span><br><span class="line">agent.sources.execSource.channels &#x3D; memoryChannel</span><br><span class="line"># The channel can be defined as follows.</span><br><span class="line"># agent.sources.seqGenSrc.channels &#x3D; memoryChannel</span><br><span class="line"></span><br><span class="line"># Each sink&#39;s type must be defined</span><br><span class="line"># agent.sinks.loggerSink.type &#x3D; logger</span><br><span class="line"># agent.sinks.fileRollSink.type &#x3D; file_roll</span><br><span class="line"># agent.sinks.fileRollSink.channel &#x3D; memoryChannel</span><br><span class="line"># agent.sinks.fileRollSink.sink.directory &#x3D; &#x2F;var&#x2F;log&#x2F;flume</span><br><span class="line">agent.sinks.hdfsSink.type &#x3D; hdfs</span><br><span class="line">agent.sinks.hdfsSink.channel &#x3D; memoryChannel</span><br><span class="line">#agent.sinks.hdfsSink.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;192.168.88.21:8020&#x2F;flume</span><br><span class="line">agent.sinks.hdfsSink.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;192.168.88.180:9000&#x2F;flume</span><br><span class="line">agent.sinks.hdfsSink.hdfs.fileType &#x3D; DataStream</span><br></pre></td></tr></table></figure>

<p>kafka.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1.sources &#x3D; source1</span><br><span class="line">a1.channels &#x3D; channel1</span><br><span class="line">a1.sinks &#x3D; sink1</span><br><span class="line"></span><br><span class="line">a1.sources.source1.type &#x3D; exec</span><br><span class="line">a1.sources.source1.command &#x3D; tail -F &#x2F;opt&#x2F;log&#x2F;catalina.out</span><br><span class="line"># a1.sources.source1.command &#x3D; tail -F &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log</span><br><span class="line">a1.sources.source1.channels &#x3D; channel1</span><br><span class="line"></span><br><span class="line">a1.channels.channel1.type &#x3D; SPILLABLEMEMORY</span><br><span class="line">a1.channels.channel1.memoryCapacity &#x3D; 10000</span><br><span class="line">a1.channels.channel1.overflowCapacity &#x3D; 1000000</span><br><span class="line">a1.channels.channel1.byteCapacity &#x3D; 800000</span><br><span class="line">a1.channels.channel1.checkpointDir &#x3D; &#x2F;mnt&#x2F;flume&#x2F;checkpoint</span><br><span class="line">a1.channels.channel1.dataDirs &#x3D; &#x2F;mnt&#x2F;flume&#x2F;data</span><br><span class="line"></span><br><span class="line">a1.sinks.sink1.type &#x3D; org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.sink1.kafka.topic &#x3D; log</span><br><span class="line">a1.sinks.sink1.kafka.bootstrap.servers &#x3D; 192.168.100.34:9092,192.168.100.35:9092</span><br><span class="line">a1.sinks.sink1.kafka.producer.acks &#x3D; 1</span><br><span class="line">a1.sinks.sink1.flumeBatchSize &#x3D; 20</span><br><span class="line">a1.sinks.sink1.channel &#x3D; channel1</span><br></pre></td></tr></table></figure>

<p>flume-env.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Licensed to the Apache Software Foundation (ASF) under one</span><br><span class="line"># or more contributor license agreements.  See the NOTICE file</span><br><span class="line"># distributed with this work for additional information</span><br><span class="line"># regarding copyright ownership.  The ASF licenses this file</span><br><span class="line"># to you under the Apache License, Version 2.0 (the</span><br><span class="line"># &quot;License&quot;); you may not use this file except in compliance</span><br><span class="line"># with the License.  You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     https:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line"># If this file is placed at FLUME_CONF_DIR&#x2F;flume-env.sh, it will be sourced</span><br><span class="line"># during Flume startup.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Enviroment variables can be set here.</span><br><span class="line"></span><br><span class="line"># export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-6-sun</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java</span><br><span class="line"></span><br><span class="line"># Give Flume more memory and pre-allocate, enable remote monitoring via JMX</span><br><span class="line"># export JAVA_OPTS&#x3D;&quot;-Xms100m -Xmx2000m -Dcom.sun.management.jmxremote&quot;</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;hadoop-2.3.0</span><br><span class="line"># Note that the Flume conf directory is always included in the classpath.</span><br><span class="line">FLUME_CLASSPATH&#x3D;&quot;$HADOOP_HOME&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;hadoop-hdfs-2.3.0.jar&quot;</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup bin&#x2F;flume-ng agent --conf conf --conf-file conf&#x2F;kafka.cfg --name a1 -Dflume.root.logger&#x3D;INFO,console &amp;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>flume</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka入门应用</title>
    <url>//2016/10/19/kafka-0.10.0.html</url>
    <content><![CDATA[<h1 id="2016-10-19-kafka-0-10-0"><a href="#2016-10-19-kafka-0-10-0" class="headerlink" title="2016-10-19-kafka-0.10.0"></a>2016-10-19-kafka-0.10.0</h1><!--
create time: 2016-10-19 15:39:08
Author: 段朝骞
Email: duanzhaoqian@outlook.com

categories:[Linux] [Database]  [Java] [HTML]  [Mac] [Life]
icon:fa-linux fa-database icon-java fa-apple

icon https://fizzed.com/oss/font-mfizz
icon https://fontawesome.io/icons/
-->

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;kafka&#x2F;0.10.0.0&#x2F;kafka_2.11-0.10.0.0.tgz</span><br></pre></td></tr></table></figure>

<p>quitstart</p>
<p><a href="https://kafka.apache.org/documentation#quickstart">https://kafka.apache.org/documentation#quickstart</a></p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>java</p>
<p>zookeeper</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp server.properties server-0.properties</span><br><span class="line">cp server.properties server-1.properties</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi server-0.properties</span><br><span class="line"></span><br><span class="line">##################### Server Basics ######################</span><br><span class="line"># The id of the broker. This must be set to a unique integer for each broker.</span><br><span class="line">broker.id&#x3D;0</span><br><span class="line"></span><br><span class="line">################### Socket Server Settings #####################</span><br><span class="line"># The address the socket server listens on. It will get the value returned from</span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners &#x3D; security_protocol:&#x2F;&#x2F;host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners &#x3D; PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</span><br><span class="line">listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;:9092</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Log Basics #############################</span><br><span class="line"></span><br><span class="line"># A comma seperated list of directories under which to store log files</span><br><span class="line">log.dirs&#x3D;&#x2F;usr&#x2F;local&#x2F;kafka&#x2F;logs-0</span><br><span class="line"></span><br><span class="line"># The default number of log partitions per topic. More partitions allow greater</span><br><span class="line"># parallelism for consumption, but this will also result in more files across</span><br><span class="line"># the brokers.</span><br><span class="line">num.partitions&#x3D;2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Zookeeper #############################</span><br><span class="line"></span><br><span class="line"># Zookeeper connection string (see zookeeper docs for details).</span><br><span class="line"># This is a comma separated host:port pairs, each corresponding to a zk</span><br><span class="line"># server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.</span><br><span class="line"># You can also append an optional chroot string to the urls to specify the</span><br><span class="line"># root directory for all kafka znodes.</span><br><span class="line">zookeeper.connect&#x3D;192.168.100.31:2181</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi server-1.properties</span><br><span class="line"></span><br><span class="line">##################### Server Basics ######################</span><br><span class="line"># The id of the broker. This must be set to a unique integer for each broker.</span><br><span class="line">broker.id&#x3D;1</span><br><span class="line"></span><br><span class="line">################### Socket Server Settings #####################</span><br><span class="line"># The address the socket server listens on. It will get the value returned from</span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners &#x3D; security_protocol:&#x2F;&#x2F;host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners &#x3D; PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</span><br><span class="line">listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;:9093</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Log Basics #############################</span><br><span class="line"></span><br><span class="line"># A comma seperated list of directories under which to store log files</span><br><span class="line">log.dirs&#x3D;&#x2F;usr&#x2F;local&#x2F;kafka&#x2F;logs-1</span><br><span class="line"></span><br><span class="line"># The default number of log partitions per topic. More partitions allow greater</span><br><span class="line"># parallelism for consumption, but this will also result in more files across</span><br><span class="line"># the brokers.</span><br><span class="line">num.partitions&#x3D;2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Zookeeper #############################</span><br><span class="line"></span><br><span class="line"># Zookeeper connection string (see zookeeper docs for details).</span><br><span class="line"># This is a comma separated host:port pairs, each corresponding to a zk</span><br><span class="line"># server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.</span><br><span class="line"># You can also append an optional chroot string to the urls to specify the</span><br><span class="line"># root directory for all kafka znodes.</span><br><span class="line">zookeeper.connect&#x3D;192.168.100.31:2181</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;kafka-server-start.sh config&#x2F;server-0.properties &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br><span class="line">bin&#x2F;kafka-server-start.sh config&#x2F;server-1.properties &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f logs&#x2F;server.log</span><br></pre></td></tr></table></figure>

<h2 id="kafka-manager"><a href="#kafka-manager" class="headerlink" title="kafka manager"></a>kafka manager</h2><p><a href="https://www.cnblogs.com/yinchengzhe/p/5126360.html">https://www.cnblogs.com/yinchengzhe/p/5126360.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup .&#x2F;kafka-manager -java-home &#x2F;path&#x2F;to&#x2F;jdk8 -Dconfig.file&#x3D;..&#x2F;conf&#x2F;application.conf &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;kafka-manager -java-home &#x2F;root&#x2F;jdk1.8.0_102&#x2F; -Dconfig.file&#x3D;conf&#x2F;application.conf &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="producer-config"><a href="#producer-config" class="headerlink" title="producer config"></a>producer config</h2><p><a href="https://kafka.apache.org/documentation#producerconfigs">https://kafka.apache.org/documentation#producerconfigs</a></p>
<p>demo</p>
<p><a href="https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+Producer+Example">https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+Producer+Example</a></p>
<h2 id="consumer-config"><a href="#consumer-config" class="headerlink" title="consumer config"></a>consumer config</h2><p><a href="https://kafka.apache.org/documentation#consumerconfigs">https://kafka.apache.org/documentation#consumerconfigs</a></p>
<p>demo</p>
<p><a href="https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example">https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example</a></p>
<p><a href="https://zqhxuyuan.github.io/2016/02/20/Kafka-Consumer-New/">https://zqhxuyuan.github.io/2016/02/20/Kafka-Consumer-New/</a></p>
<p>consumer offset storage</p>
<p><a href="https://kafka.apache.org/documentation#impl_offsettracking">https://kafka.apache.org/documentation#impl_offsettracking</a></p>
<p>zookeeper structures</p>
<p><a href="https://kafka.apache.org/documentation#impl_zookeeper">https://kafka.apache.org/documentation#impl_zookeeper</a></p>
<h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hosts</span><br><span class="line">192.168.100.34 kafka34</span><br><span class="line">192.168.100.35 kafka35</span><br></pre></td></tr></table></figure>

<p>加入 host 不然连接不上 kafka</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>storm 简单使用</title>
    <url>//2016/10/19/storm-0.10.2.html</url>
    <content><![CDATA[<h1 id="2016-10-19-storm-0-10-2"><a href="#2016-10-19-storm-0-10-2" class="headerlink" title="2016-10-19-storm-0.10.2"></a>2016-10-19-storm-0.10.2</h1><!--
create time: 2016-10-19 11:32:08
Author: 段朝骞
Email: duanzhaoqian@outlook.com

categories:[Linux] [Database]  [Java] [HTML]  [Mac] [Life]
icon:fa-linux fa-database icon-java fa-apple

icon https://fizzed.com/oss/font-mfizz
icon https://fontawesome.io/icons/
-->

<h2 id="0-10-2-下载"><a href="#0-10-2-下载" class="headerlink" title="0.10.2 下载"></a>0.10.2 下载</h2><p><a href="https://storm.apache.org/downloads.html">https://storm.apache.org/downloads.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;apache&#x2F;storm&#x2F;apache-storm-0.10.2&#x2F;apache-storm-0.10.2.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://storm.apache.org/releases/0.10.2/index.html">https://storm.apache.org/releases/0.10.2/index.html</a></p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>Java 7</p>
<p>Python 2.6.6</p>
<p>安装 zookeeper</p>
<h2 id="修改-hosts"><a href="#修改-hosts" class="headerlink" title="修改 hosts"></a>修改 hosts</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line">#127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">#::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">127.0.0.1 storm32</span><br></pre></td></tr></table></figure>

<h2 id="修改-storm-yaml"><a href="#修改-storm-yaml" class="headerlink" title="修改 storm.yaml"></a>修改 storm.yaml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi conf&#x2F;storm.yaml</span><br><span class="line"></span><br><span class="line">########### These MUST be filled in for a storm configuration</span><br><span class="line"> storm.zookeeper.servers:</span><br><span class="line">     - &quot;192.168.100.31&quot;</span><br><span class="line"></span><br><span class="line"> nimbus.host: &quot;192.168.100.31&quot;</span><br></pre></td></tr></table></figure>

<p><a href="https://storm.apache.org/releases/0.10.2/Setting-up-a-Storm-cluster.html">https://storm.apache.org/releases/0.10.2/Setting-up-a-Storm-cluster.html</a></p>
<h2 id="启动-storm"><a href="#启动-storm" class="headerlink" title="启动 storm"></a>启动 storm</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;storm nimbus &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br><span class="line">bin&#x2F;storm ui &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br><span class="line">bin&#x2F;storm supervisor &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="默认数据位置"><a href="#默认数据位置" class="headerlink" title="默认数据位置"></a>默认数据位置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">storm-local</span><br></pre></td></tr></table></figure>

<h2 id="日志位置"><a href="#日志位置" class="headerlink" title="日志位置"></a>日志位置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f logs&#x2F;nimbus.log</span><br><span class="line">tail -f logs&#x2F;ui.log</span><br><span class="line">tail -f logs&#x2F;supervisor.log</span><br><span class="line">tail -f logs&#x2F;access.log</span><br></pre></td></tr></table></figure>

<h2 id="代码-demo"><a href="#代码-demo" class="headerlink" title="代码 demo"></a>代码 demo</h2><p><a href="https://github.com/duanzhaoqian/javaTest/tree/dev/StormDemo">https://github.com/duanzhaoqian/javaTest/tree/dev/StormDemo</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>storm</tag>
      </tags>
  </entry>
  <entry>
    <title>marboo md default模版</title>
    <url>//2016/09/11/marboo-default.html</url>
    <content><![CDATA[<h1 id="2016-09-11-marboo-default"><a href="#2016-09-11-marboo-default" class="headerlink" title="2016-09-11-marboo-default"></a>2016-09-11-marboo-default</h1><!--
create time: 2016-09-11 12:11:11
Author: 段朝骞
Email: duanzhaoqian@outlook.com

categories:[Linux] [Database]  [Java] [HTML]  [Mac] [Life]
icon:fa-linux fa-database icon-java fa-apple

icon https://fizzed.com/oss/font-mfizz
icon https://fontawesome.io/icons/
-->

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title:  &quot;&quot;</span><br><span class="line">date:   &#123;&#123;date&#125;&#125;</span><br><span class="line">desc: &quot;&quot;</span><br><span class="line">keywords: &quot;&quot;</span><br><span class="line">categories: [Linux]</span><br><span class="line">tags: [linux]</span><br><span class="line">icon: fa-linux</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># &#123;&#123;title&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">create time: &#123;&#123;date&#125;&#125;</span><br><span class="line">Author: &#123;&#123;author&#125;&#125;</span><br><span class="line">Email: &#123;&#123;email&#125;&#125;</span><br><span class="line"></span><br><span class="line">categories:[Linux] [Database]  [Java] [HTML]  [Mac] [Life]</span><br><span class="line">icon:fa-linux fa-database icon-java fa-apple</span><br><span class="line"></span><br><span class="line">icon https:&#x2F;&#x2F;fizzed.com&#x2F;oss&#x2F;font-mfizz</span><br><span class="line">icon https:&#x2F;&#x2F;fontawesome.io&#x2F;icons&#x2F;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>marboo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux syslog</title>
    <url>//2016/09/11/linux-syslog.html</url>
    <content><![CDATA[<h1 id="2016-09-11-linux-syslog"><a href="#2016-09-11-linux-syslog" class="headerlink" title="2016-09-11-linux-syslog"></a>2016-09-11-linux-syslog</h1><!--
create time: 2016-09-11 09:54:44
Author: 段朝骞
Email: duanzhaoqian@outlook.com

categories:[Linux] [Database]  [Java] [HTML]  [Mac] [Life]
icon:fa-linux fa-database icon-java fa-apple

icon https:///fizzed.com/oss/font-mfizz
icon https:///fontawesome.io/icons/
-->

<p>[https:///ant595.blog.51cto.com/5074217/1080922]https:////ant595.blog.51cto.com/5074217/1080922)</p>
<h2 id="syslog-简介"><a href="#syslog-简介" class="headerlink" title="syslog 简介"></a>syslog 简介</h2><p>syslog 系统日志,记录 linux 系统启动及运行的过程中产生的信息,rhel5.x 系统上默认自带了 syslog 其配置文件是/etc/syslog.conf</p>
<p>syslog 默认有两个守护进程,klogd,syslogd,</p>
<p>klogd 进程是记录系统运行的过程中内核生成的日志,而在系统启动的过程中内核初始化过程中 生成的信息记录到控制台(/dev/console）当系统启动完成之后会把此信息存放到/var/log/dmesg 文件中,我可以通过 cat /var/log/dmesg 查看这个文件,也可以通过 dmesg 命令来查看</p>
<p>syslogd 进程是记录非内核以外的信息<br>而为什么需要两个守护进程呢?是因为内核跟其他信息需要记录的详细程度及格式的不同<br>我们使用 ps 命令可以看到 syslog 的两个守护进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep klogd | grep -v grep</span><br><span class="line">root      3308     1  0 Nov26 ?        00:00:00 klogd -x</span><br><span class="line"></span><br><span class="line">ps -ef | grep syslogd | grep -v grep</span><br><span class="line">root      3288     1  0 Nov26 ?        00:00:00 syslogd -m 0</span><br></pre></td></tr></table></figure>

<p>上面通过 ps 命令可以看到 syslog 的两个守护进程,而这两个守护进程是共用一个配置文件/etc/syslog.conf,下面介绍下其配置文件</p>
<h2 id="syslog-配置文件详解"><a href="#syslog-配置文件详解" class="headerlink" title="syslog 配置文件详解"></a>syslog 配置文件详解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置文件定义格式为 facility.priority   action</span><br><span class="line"> facility,可以理解为日志的来源或设备目前常用的facility有以下及中</span><br><span class="line">    1,auth      # 认证相关的</span><br><span class="line">    2,authpriv  # 权限,授权相关的</span><br><span class="line">    3,cron      # 任务计划相关的</span><br><span class="line">    4,daemon    # 守护进程相关的</span><br><span class="line">    5,kern      # 内核相关的</span><br><span class="line">    6,lpr       # 打印相关的</span><br><span class="line">    7,mail      # 邮件相关的</span><br><span class="line">    8,mark      # 标记相关的</span><br><span class="line">    9,news      # 新闻相关的</span><br><span class="line">    10,security # 安全相关的,与auth 类似</span><br><span class="line">    11,syslog   # syslog自己的</span><br><span class="line">    12,user     # 用户相关的</span><br><span class="line">    13,uucp     # unix to unix cp 相关的</span><br><span class="line">    14,local0 到 local7 # 用户自定义使用</span><br><span class="line">    15,*        # *表示所有的facility</span><br><span class="line">    等.....</span><br><span class="line"></span><br><span class="line"> priority(log level)日志的级别,一般有以下几种级别(从低到高)</span><br><span class="line">    debug           # 程序或系统的调试信息</span><br><span class="line">    info            # 一般信息,</span><br><span class="line">    notice          # 不影响正常功能,需要注意的消息</span><br><span class="line">    warning&#x2F;warn    # 可能影响系统功能,需要提醒用户的重要事件</span><br><span class="line">    err&#x2F;error       # 错误信息</span><br><span class="line">    crit            # 比较严重的</span><br><span class="line">    alert           # 必须马上处理的</span><br><span class="line">    emerg&#x2F;oanic     # 会导致系统不可用的</span><br><span class="line">    *               # 表示所有的日志级别</span><br><span class="line">    none            # 跟* 相反,表示啥也没有</span><br><span class="line"></span><br><span class="line"> action(动作)日志记录的位置</span><br><span class="line">    系统上的绝对路径    # 普通文件 如： &#x2F;var&#x2F;log&#x2F;xxx</span><br><span class="line">    |                   # 管道  通过管道送给其他的命令处理</span><br><span class="line">    终端              # 终端   如：&#x2F;dev&#x2F;console</span><br><span class="line">    @HOST               # 远程主机 如： @10.0.0.1</span><br><span class="line">    用户              # 系统用户 如： root</span><br><span class="line">    *                   # 登录到系统上的所有用户，一般emerg级别的日志是这样定义的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义格式例子：</span><br><span class="line">mail.info   &#x2F;var&#x2F;log&#x2F;mail.log # 表示将mail相关的,级别为info及</span><br><span class="line">                              # info以上级别的信息记录到&#x2F;var&#x2F;log&#x2F;mail.log文件中</span><br><span class="line">auth.&#x3D;info  @10.0.0.1         # 表示将auth相关的,基本为info的信息记录到10.0.0.1主机上去</span><br><span class="line">                              # 前提是10.0.0.1要能接收其他主机发来的日志信息</span><br><span class="line">user.!&#x3D;error                  # 表示记录user相关的,不包括error级别的信息</span><br><span class="line">user.!error                   # 与user.error相反</span><br><span class="line">*.info                        # 表示记录所有的日志信息的info级别</span><br><span class="line">mail.*                        # 表示记录mail相关的所有级别的信息</span><br><span class="line">*.*                           # 你懂的.</span><br><span class="line">cron.info;mail.info           # 多个日志来源可以用&quot;;&quot; 隔开</span><br><span class="line">cron,mail.info                # 与cron.info;mail.info 是一个意思</span><br><span class="line">mail.*;mail.!&#x3D;info            # 表示记录mail相关的所有级别的信息,但是不包括info级别的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接下来去翻译下rhel5.x系统上自带的syslog的配置文件&#x2F;etc&#x2F;syslog.conf</span><br><span class="line"># 表示将所有facility的info级别,但不包括mail,authpriv,cron相关的信息,记录到 &#x2F;var&#x2F;log&#x2F;messages文件</span><br><span class="line">*.info;mail.none;authpriv.none;cron.none                &#x2F;var&#x2F;log&#x2F;messages</span><br><span class="line"></span><br><span class="line"># 表示将权限,授权相关的所有基本的信息,记录到&#x2F;var&#x2F;log&#x2F;secure文件中.这个文件的权限是600</span><br><span class="line">authpriv.*                                              &#x2F;var&#x2F;log&#x2F;secure</span><br><span class="line"></span><br><span class="line"># 表示将mail相关的所有基本的信息记录到&#x2F;var&#x2F;log&#x2F;maillog文件中,可以看到路径前面有一个&quot;-&quot;</span><br><span class="line"># &quot;-&quot; 表示异步写入磁盘,</span><br><span class="line">mail.*                                                  -&#x2F;var&#x2F;log&#x2F;maillog</span><br><span class="line"></span><br><span class="line"># 表示将任务计划相关的所有级别的信息记录到&#x2F;var&#x2F;log&#x2F;cron文件中</span><br><span class="line">cron.*                                                  &#x2F;var&#x2F;log&#x2F;cron</span><br><span class="line"></span><br><span class="line"># 表示将所有facility的emerg级别的信息,发送给登录到系统上的所有用户</span><br><span class="line">*.emerg                                                 *</span><br><span class="line"></span><br><span class="line"># 表示将uucp及news的crit级别的信息记录到&#x2F;var&#x2F;log&#x2F;spooler文件中</span><br><span class="line">uucp,news.crit                                          &#x2F;var&#x2F;log&#x2F;spooler</span><br><span class="line"></span><br><span class="line"># 表示将local7的所有级别的信息记录到&#x2F;var&#x2F;log&#x2F;boot.log文件中,</span><br><span class="line"># 上面说过local0 到local7这8个是用户自定义使用的,这里的local7记录的是系统启动相关的信息</span><br><span class="line">local7.*                                                &#x2F;var&#x2F;log&#x2F;boot.log</span><br></pre></td></tr></table></figure>

<p>syslog 默认记录的日志格式有四个字段,时间标签 主机 子系统名称 消息</p>
<p>可以使用 tail /var/log/messages 看下</p>
<h2 id="syslog-ng-简介"><a href="#syslog-ng-简介" class="headerlink" title="syslog-ng 简介"></a>syslog-ng 简介</h2><p>syslog-ng (syslog-Next generation) 是 syslog 的升级版,syslog-ng 有两个版本,一个是收费的,一个是开源的，那么作为 syslog 的下一代产品,功能是可想而知,肯定比 syslog 的功能强大的多,如</p>
<blockquote>
<p>高性能</p>
<p>可靠的传输</p>
<p>支持多平台</p>
<p>高可靠性</p>
<p>众多的用户群体</p>
<p>强大的日志过滤及排序</p>
<p>事件标签和关联性</p>
<p>支持最新的 IETF 标准</p>
<p>等….</p>
</blockquote>
<p>开源版本的主页 https:///<a href="http://www.balabit.com/network-security/syslog-ng/opensource-logging-system/overview">www.balabit.com/network-security/syslog-ng/opensource-logging-system/overview</a></p>
<h2 id="syslog-ng-的安装"><a href="#syslog-ng-的安装" class="headerlink" title="syslog-ng 的安装"></a>syslog-ng 的安装</h2><p>rhel5.x 的系统上默认没有使用 syslog-ng 来记录日志的,需要使用的话,需要自己编译安装,安装方法如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc*</span><br><span class="line">cd &#x2F;usr&#x2F;src</span><br><span class="line">wget https:&#x2F;&#x2F;&#x2F;www.balabit.com&#x2F;downloads&#x2F;files&#x2F;syslog-ng&#x2F;sources&#x2F;3.2.4&#x2F;source&#x2F;eventlog_0.2.12.tar.gz</span><br><span class="line">wget https:&#x2F;&#x2F;&#x2F;www.balabit.com&#x2F;downloads&#x2F;files&#x2F;syslog-ng&#x2F;open-source-edition&#x2F;3.3.5&#x2F;source&#x2F;syslog-ng_3.3.5.tar.gz</span><br><span class="line">tar xvf eventlog_0.2.12.tar.gz</span><br><span class="line">cd eventlog-0.2.12</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;eventlog</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">cd &#x2F;usr&#x2F;src</span><br><span class="line">tar xvf syslog-ng_3.3.5.tar.gz</span><br><span class="line">cd syslog-ng-3.3.5</span><br><span class="line">export PKG_CONFIG_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;eventlog&#x2F;lib&#x2F;pkgconfig</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;syslog-ng</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">将syslog-ng添加为系统服务,</span><br><span class="line">vim &#x2F;etc&#x2F;init.d&#x2F;syslog-ng  #内容如下</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#</span><br><span class="line"># chkconfig: -  60 27</span><br><span class="line"># description: syslog-ng SysV script.</span><br><span class="line">. &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;functions</span><br><span class="line"></span><br><span class="line">syslog_ng&#x3D;&#x2F;usr&#x2F;local&#x2F;syslog-ng&#x2F;sbin&#x2F;syslog-ng</span><br><span class="line">prog&#x3D;syslog-ng</span><br><span class="line">pidfile&#x3D;&#x2F;usr&#x2F;local&#x2F;syslog-ng&#x2F;var&#x2F;syslog-ng.pid</span><br><span class="line">lockfile&#x3D;&#x2F;usr&#x2F;local&#x2F;syslog-ng&#x2F;var&#x2F;syslog-ng.lock</span><br><span class="line">RETVAL&#x3D;0</span><br><span class="line">STOP_TIMEOUT&#x3D;$&#123;STOP_TIMEOUT-10&#125;</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">        echo -n $&quot;Starting $prog: &quot;</span><br><span class="line">        daemon --pidfile&#x3D;$pidfile $syslog_ng $OPTIONS</span><br><span class="line">        RETVAL&#x3D;$?</span><br><span class="line">        echo</span><br><span class="line">        [ $RETVAL &#x3D; 0 ] &amp;&amp; touch $&#123;lockfile&#125;</span><br><span class="line">        return $RETVAL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">    echo -n $&quot;Stopping $prog: &quot;</span><br><span class="line">    killproc -p $pidfile -d $STOP_TIMEOUT $syslog_ng</span><br><span class="line">    RETVAL&#x3D;$?</span><br><span class="line">    echo</span><br><span class="line">    [ $RETVAL &#x3D; 0 ] &amp;&amp; rm -f $lockfile $pidfile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  start)</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    stop</span><br><span class="line">    ;;</span><br><span class="line">  status)</span><br><span class="line">        status -p $pidfile $syslog_ng</span><br><span class="line">    RETVAL&#x3D;$?</span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo $&quot;Usage: $prog &#123;start|stop|restart|status&#125;&quot;</span><br><span class="line">    RETVAL&#x3D;2</span><br><span class="line">esac</span><br><span class="line">exit $RETVAL</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">chmod a+x &#x2F;etc&#x2F;init.d&#x2F;syslog-ng</span><br><span class="line">killall syslogd</span><br><span class="line">chkconfig --add syslog-ng</span><br><span class="line">chkconfig syslog-ng on</span><br><span class="line">service syslog-ng start</span><br></pre></td></tr></table></figure>

<h2 id="syslog-ng-配置文件详解"><a href="#syslog-ng-配置文件详解" class="headerlink" title="syslog-ng 配置文件详解"></a>syslog-ng 配置文件详解</h2><p>此时 syslog-ng 服务已经启动起来了,配置文件的位置在安装目录下的 etc/syslog-ng.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">syslog-ng.conf文件里的内容有以下几个部分组成,</span><br><span class="line"># 全局选项,多个选项时用分好&quot;;&quot;隔开</span><br><span class="line">options &#123; .... &#125;;</span><br><span class="line"># 定义日志源,</span><br><span class="line">source s_name &#123; ... &#125;;</span><br><span class="line"># 定义过滤规则，规则可以使用正则表达式来定义,这里是可选的,不定义也没关系</span><br><span class="line">filter f_name &#123; ... &#125;;</span><br><span class="line"># 定义目标</span><br><span class="line">destination d_name &#123; ... &#125;;</span><br><span class="line"># 定义消息链可以将多个源,多个过滤规则及多个目标定义为一条链</span><br><span class="line">log &#123; ... &#125;;</span><br><span class="line">详解如下</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">options &#123; long_hostnames(off); sync(0); perm(0640); stats(3600); &#125;;</span><br><span class="line">    更多选项如下</span><br><span class="line">    chain_hostnames(yes|no)     # 是否打开主机名链功能，打开后可在多网络段转发日志时有效</span><br><span class="line">    long_hostnames(yes|no)      # 是chain_hostnames的别名，已不建议使用</span><br><span class="line">    keep_hostname(yes|no)       # 是否保留日志消息中保存的主机名称</span><br><span class="line">    use_dns(yes|no)             # 是否打开DNS查询功能，</span><br><span class="line">    use_fqdn(yes|no)            # 是否使用完整的域名</span><br><span class="line">    check_hostname(yes|no)      # 是否检查主机名有没有包含不合法的字符</span><br><span class="line">    bad_hostname(regexp)        # 可通过正规表达式指定某主机的信息不被接受</span><br><span class="line">    dns_cache(yes|no)           # 是否打开DNS缓存功能</span><br><span class="line">    dns_cache_expire(n)         # DNS缓存功能打开时，一个成功缓存的过期时间</span><br><span class="line">    dns_cache_expire_failed(n)  # DNS缓存功能打开时，一个失败缓存的过期时间</span><br><span class="line">    dns_cache_size(n)           # DNS缓存保留的主机名数量</span><br><span class="line">    create_dirs(yes|no)         # 当指定的目标目录不存在时，是否创建该目录</span><br><span class="line">    dir_owner(uid)              # 目录的UID</span><br><span class="line">    dir_group(gid)              # 目录的GID</span><br><span class="line">    dir_perm(perm)              # 目录的权限，使用八进制方式标注，例如0644</span><br><span class="line">    owner(uid)                  # 文件的UID</span><br><span class="line">    group(gid)                  # 文件的GID</span><br><span class="line">    perm(perm)                  # 文件的权限，同样，使用八进制方式标注</span><br><span class="line">    gc_busy_threshold(n)        # 当syslog-ng忙时，其进入垃圾信息收集状态的时间一旦分派的对象达到这个数字，syslog-ng就启动垃圾信息收集状态。默认值是：3000。</span><br><span class="line">    gc_idle_threshold(n)        # 当syslog-ng空闲时，其进入垃圾信息收集状态的时间一旦被分派的对象到达这个数字，syslog-ng就会启动垃圾信息收集状态，默认值是：100</span><br><span class="line">    log_fifo_size(n)            # 输出队列的行数</span><br><span class="line">    log_msg_size(n)             # 消息日志的最大值（bytes）</span><br><span class="line">    mark(n)                     # 多少时间（秒）写入两行MARK信息供参考，目前没有实现</span><br><span class="line">    stats(n)                    # 多少时间（秒）写入两行STATUS信息,默认值是：600</span><br><span class="line">    sync(n)                     # 缓存多少行的信息再写入文件中，0为不缓存，局部参数可以覆盖该值。</span><br><span class="line">    time_reap(n)                # 在没有消息前，到达多少秒，即关闭该文件的连接</span><br><span class="line">    time_reopen(n)              # 对于死连接，到达多少秒，会重新连接</span><br><span class="line">    use_time_recvd(yes|no)      # 宏产生的时间是使用接受到的时间，还是日志中记录的时间；建议使用R_的宏代替接收时间，S_的宏代替日志记录的时间，而不要依靠该值定义。</span><br><span class="line"></span><br><span class="line">source s_name &#123; internal(); unix-dgram(&quot;&#x2F;dev&#x2F;log&quot;); udp(ip(&quot;0.0.0.0&quot;) port(514)); &#125;;</span><br><span class="line"></span><br><span class="line">    file (filename)                 # 从指定的文件读取日志信息</span><br><span class="line">    unix-dgram  (filename)          # 打开指定的SOCK_DGRAM模式的unix套接字，接收日志消息</span><br><span class="line">    unix-stream (filename)          # 打开指定的SOCK_STREAM模式的unix套接字，接收日志消息</span><br><span class="line">    udp ( (ip),(port) )             # 在指定的UDP端口接收日志消息</span><br><span class="line">    tcp ( (ip),(port) )             # 在指定的TCP端口接收日志消息</span><br><span class="line">    sun-streams (filename)          # 在solaris系统中，打开一个（多个）指定的STREAM设备，从其中读取日志消息</span><br><span class="line">    internal()                      # syslog-ng内部产生的消息</span><br><span class="line">    pipe(filename),fifo(filename)   # 从指定的管道或者FIFO设备，读取日志信息</span><br><span class="line"></span><br><span class="line">filter f_name   &#123; not facility(news, mail) and not filter(f_iptables); &#125;;</span><br><span class="line">    更多规则函数如下</span><br><span class="line">    facility(..)    # 根据facility（设备）选择日志消息，使用逗号分割多个facility</span><br><span class="line">    level(..)       # 根据level（优先级）选择日志消息，使用逗号分割多个level，或使用“..”表示一个范围</span><br><span class="line">    program(表达式)    # 日志消息的程序名是否匹配一个正则表达式</span><br><span class="line">    host(表达式)   # 日志消息的主机名是否和一个正则表达式匹配</span><br><span class="line">    match(表达式)  # 对日志消息的内容进行正则匹配</span><br><span class="line">    filter()        # 调用另一条过滤规则并判断它的值</span><br><span class="line">    定义规则的时候也可以使用逻辑运算符and or not</span><br><span class="line"></span><br><span class="line">destination d_name &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;messages&quot;); &#125;;</span><br><span class="line">    更多动作如下</span><br><span class="line">    file (filename)                 # 把日志消息写入指定的文件</span><br><span class="line">    unix-dgram  (filename)          # 把日志消息写入指定的SOCK_DGRAM模式的unix套接字</span><br><span class="line">    unix-stream (filename)          # 把日志消息写入指定的SOCK_STREAM模式的unix套接字</span><br><span class="line">    udp (ip),(port)                 # 把日志消息发送到指定的UDP端口</span><br><span class="line">    tcp (ip),(port)                 # 把日志消息发送到指定的TCP端口</span><br><span class="line">    usertty(username)               # 把日志消息发送到已经登陆的指定用户终端窗口</span><br><span class="line">    pipe(filename),fifo(filename)   # 把日志消息发送到指定的管道或者FIFO设备</span><br><span class="line">    program(parm)                   # 启动指定的程序，并把日志消息发送到该进程的标准输入</span><br><span class="line"></span><br><span class="line">log &#123; source(s_name); filter(f_name); destination(d_name) &#125;;</span><br></pre></td></tr></table></figure>

<p>一条日志的处理流程大概是这样的,如下</p>
<p>首先是 “日志的来源 source s_name { … };”</p>
<p>然后是 “过滤规则 filter f_name { … };”</p>
<p>再然后是 “消息链 log { source(s_name); filter(f_name);<br>destination(d_name) };”</p>
<p>最后是 “目标动作 destination d_name { … };”</p>
<p>这样以来一条日志就根据你的意思来处理了,需要注意的是一条日志消息过了之后,会匹配定义的所有配置,并不是匹配到以后就不再往下匹配了.</p>
<h2 id="syslog-ng-配置文件例子"><a href="#syslog-ng-配置文件例子" class="headerlink" title="syslog-ng 配置文件例子"></a>syslog-ng 配置文件例子</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$syslog-ng_path&#x2F;etc&#x2F;syslog-ng.conf 内容如下</span><br><span class="line"></span><br><span class="line">options &#123; long_hostnames(off); sync(0); perm(0640); stats(3600); &#125;;</span><br><span class="line"></span><br><span class="line">source src &#123;</span><br><span class="line">            internal();</span><br><span class="line">            unix-dgram(&quot;&#x2F;dev&#x2F;log&quot;);</span><br><span class="line">            # 表示日志来源为本机udp的514端口,</span><br><span class="line">            udp(ip(&quot;0.0.0.0&quot;) port(514));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">filter f_iptables   &#123; facility(kern) and match(&quot;IN&#x3D;&quot;) and match(&quot;OUT&#x3D;&quot;); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_console    &#123; level(warn) and facility(kern) and not filter(f_iptables)</span><br><span class="line">                      or level(err) and not facility(authpriv); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_newsnotice &#123; level(notice) and facility(news); &#125;;</span><br><span class="line">filter f_newscrit   &#123; level(crit)   and facility(news); &#125;;</span><br><span class="line">filter f_newserr    &#123; level(err)    and facility(news); &#125;;</span><br><span class="line">filter f_news       &#123; facility(news); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_mailinfo   &#123; level(info)      and facility(mail); &#125;;</span><br><span class="line">filter f_mailwarn   &#123; level(warn)      and facility(mail); &#125;;</span><br><span class="line">filter f_mailerr    &#123; level(err, crit) and facility(mail); &#125;;</span><br><span class="line">filter f_mail       &#123; facility(mail); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_cron       &#123; facility(cron); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_local      &#123; facility(local0, local1, local2, local3,</span><br><span class="line">                               local4,  local6, local7); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_acpid_full &#123; match(&#39;^acpid:&#39;); &#125;;</span><br><span class="line">filter f_acpid      &#123; level(emerg..notice) and match(&#39;^acpid:&#39;); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_acpid_old  &#123; match(&#39;^\[acpid\]:&#39;); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_netmgm     &#123; match(&#39;^NetworkManager:&#39;); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_messages   &#123; not facility(news, mail) and not filter(f_iptables); &#125;;</span><br><span class="line">filter f_warn       &#123; level(warn, err, crit) and not filter(f_iptables); &#125;;</span><br><span class="line">filter f_alert      &#123; level(alert); &#125;;</span><br><span class="line"></span><br><span class="line">destination console  &#123; pipe(&quot;&#x2F;dev&#x2F;tty10&quot;    owner(-1) group(-1) perm(-1)); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_console); destination(console); &#125;;</span><br><span class="line"></span><br><span class="line">destination xconsole &#123; pipe(&quot;&#x2F;dev&#x2F;xconsole&quot; owner(-1) group(-1) perm(-1)); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_console); destination(xconsole); &#125;;</span><br><span class="line"></span><br><span class="line">destination newscrit   &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;news&#x2F;news.crit&quot;</span><br><span class="line">                              owner(news) group(news)); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_newscrit); destination(newscrit); &#125;;</span><br><span class="line"></span><br><span class="line">destination newserr    &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;news&#x2F;news.err&quot;</span><br><span class="line">                              owner(news) group(news)); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_newserr); destination(newserr); &#125;;</span><br><span class="line"></span><br><span class="line">destination newsnotice &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;news&#x2F;news.notice&quot;</span><br><span class="line">                              owner(news) group(news)); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_newsnotice); destination(newsnotice); &#125;;</span><br><span class="line"></span><br><span class="line">destination mailinfo &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;mail.info&quot;); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_mailinfo); destination(mailinfo); &#125;;</span><br><span class="line"></span><br><span class="line">destination mailwarn &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;mail.warn&quot;); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_mailwarn); destination(mailwarn); &#125;;</span><br><span class="line"></span><br><span class="line">destination mailerr  &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;mail.err&quot; fsync(yes)); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_mailerr);  destination(mailerr); &#125;;</span><br><span class="line"></span><br><span class="line">destination mail &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;mail&quot;); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_mail); destination(mail); &#125;;</span><br><span class="line"></span><br><span class="line">destination acpid &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;acpid&quot;); &#125;;</span><br><span class="line">destination null &#123; &#125;;</span><br><span class="line">log &#123; source(src); filter(f_acpid); destination(acpid); flags(final); &#125;;</span><br><span class="line"></span><br><span class="line">log &#123; source(src); filter(f_acpid_full); destination(null); flags(final); &#125;;</span><br><span class="line"></span><br><span class="line">log &#123; source(src); filter(f_acpid_old); destination(acpid); flags(final); &#125;;</span><br><span class="line"></span><br><span class="line">destination netmgm &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;NetworkManager&quot;); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_netmgm); destination(netmgm); flags(final); &#125;;</span><br><span class="line"></span><br><span class="line">destination localmessages &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;localmessages&quot;); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_local); destination(localmessages); &#125;;</span><br><span class="line"></span><br><span class="line">destination messages &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;messages&quot;); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_messages); destination(messages); &#125;;</span><br><span class="line"></span><br><span class="line">destination firewall &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;firewall&quot;); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_iptables); destination(firewall); &#125;;</span><br><span class="line"></span><br><span class="line">destination warn &#123; file(&quot;&#x2F;var&#x2F;log&#x2F;warn&quot; fsync(yes)); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_warn); destination(warn); &#125;;</span><br><span class="line"></span><br><span class="line">filter f_ha         &#123; facility(local5); &#125;;</span><br><span class="line">destination hamessages &#123; file(&#x2F;var&#x2F;log&#x2F;ha); &#125;;</span><br><span class="line">log &#123; source(src); filter(f_ha); destination(hamessages); &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>syslog</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL5.6 rpm安装</title>
    <url>//2016/09/05/mysql-5.6.27rpm.html</url>
    <content><![CDATA[<h1 id="2016-09-05-mysql-5-6"><a href="#2016-09-05-mysql-5-6" class="headerlink" title="2016-09-05-mysql-5.6"></a>2016-09-05-mysql-5.6</h1><!--
create time: 2016-09-05 17:48:08
Author: <TODO: 请写上你的名字>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://blog.csdn.net/leshami/article/details/23826753">https://blog.csdn.net/leshami/article/details/23826753</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.6/en/linux-installation-rpm.html">https://dev.mysql.com/doc/refman/5.6/en/linux-installation-rpm.html</a></p>
<h2 id="下载-rpm-包"><a href="#下载-rpm-包" class="headerlink" title="下载 rpm 包"></a>下载 rpm 包</h2><p><a href="https://dev.mysql.com/downloads/mysql/5.6.html#downloads">https://dev.mysql.com/downloads/mysql/5.6.html#downloads</a><br><a href="https://mirrors.sohu.com/mysql/MySQL-5.6/">https://mirrors.sohu.com/mysql/MySQL-5.6/</a><br><a href="https://ftp.ntu.edu.tw/MySQL/Downloads/MySQL-5.6/">https://ftp.ntu.edu.tw/MySQL/Downloads/MySQL-5.6/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf MySQL-*</span><br><span class="line">rpm -qa|grep mysql</span><br><span class="line">yum remove mysql-libs-5.1.73-3.el6_5.x86_64 -y</span><br><span class="line">yum install MySQL-server-5.6.26-1.linux_glibc2.5.x86_64.rpm -y</span><br><span class="line">yum install -y MySQL-client-5.6.26-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line">cp &#x2F;usr&#x2F;my.cnf &#x2F;etc&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line">mkdir -p &#x2F;var&#x2F;log&#x2F;mysql&#x2F;</span><br><span class="line">chmod 777 -R &#x2F;var&#x2F;log&#x2F;mysql</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line">cat &#x2F;root&#x2F;.mysql_secret</span><br><span class="line">mysql_secure_installation</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select host,user,password from user;</span><br><span class="line">update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39; and host&#x3D;&#39;127.0.0.1&#39;;</span><br><span class="line">exit;</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<h2 id="配置-etc-my-cnf"><a href="#配置-etc-my-cnf" class="headerlink" title="配置/etc/my.cnf"></a>配置/etc/my.cnf</h2><p>所有配置</p>
<p><a href="https://dev.mysql.com/doc/refman/5.6/en/mysqld-option-tables.html">https://dev.mysql.com/doc/refman/5.6/en/mysqld-option-tables.html</a></p>
<p>优化配置</p>
<p><a href="https://blog.csdn.net/renfufei/article/details/29215297">https://blog.csdn.net/renfufei/article/details/29215297</a></p>
<p>mysql 四个配置</p>
<p><a href="https://jeremy.zawodny.com/blog/archives/011421.html">https://jeremy.zawodny.com/blog/archives/011421.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max_connect_errors&#x3D;1844674407370954751</span><br><span class="line">connect_timeout&#x3D;15</span><br><span class="line">skip-name-resolve</span><br><span class="line">slave_net_timeout&#x3D;30</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># For advice on how to change settings please see</span><br><span class="line"># https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;server-configuration-defaults.html</span><br><span class="line">[mysqld]</span><br><span class="line">datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">user&#x3D;mysql</span><br><span class="line"></span><br><span class="line"># #default-character-set &#x3D; utf8</span><br><span class="line"></span><br><span class="line">#character_set_server &#x3D; utf8</span><br><span class="line">character-set-server &#x3D; utf8mb4</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line"></span><br><span class="line">general_log&#x3D;OFF</span><br><span class="line">general_log_file&#x3D;&#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysql-query.log</span><br><span class="line">federated</span><br><span class="line">#lower_case_table_names &#x3D; 1</span><br><span class="line">long_query_time &#x3D; 10</span><br><span class="line">slow_query_log&#x3D;1</span><br><span class="line">slow_query_log_file&#x3D;&#x2F;var&#x2F;log&#x2F;mysql&#x2F;slow-query.log</span><br><span class="line">#log-slow-queries &#x3D; &#x2F;var&#x2F;log&#x2F;mysql&#x2F;slowquery.log</span><br><span class="line">log_queries_not_using_indexes&#x3D;1</span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br><span class="line">max_connect_errors&#x3D;1844674407370954751</span><br><span class="line">connect_timeout&#x3D;15</span><br><span class="line">skip-name-resolve</span><br><span class="line">slave_net_timeout&#x3D;30</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size &#x3D; 128M</span><br><span class="line">bulk_insert_buffer_size &#x3D; 2G</span><br><span class="line">#</span><br><span class="line"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"># changes to the binary log between backups.</span><br><span class="line"># log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size &#x3D; 128M</span><br><span class="line"># sort_buffer_size &#x3D; 2M</span><br><span class="line"># read_rnd_buffer_size &#x3D; 2M</span><br><span class="line">datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line"></span><br><span class="line"># Recommended in standard MySQL setup</span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br><span class="line">default-character-set &#x3D; utf8</span><br><span class="line"></span><br><span class="line">[mysql.server]</span><br><span class="line">default-character-set &#x3D; utf8</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set &#x3D; utf8</span><br></pre></td></tr></table></figure>

<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>日志详细解析</p>
<p><a href="https://pangge.blog.51cto.com/6013757/1319304">https://pangge.blog.51cto.com/6013757/1319304</a></p>
<p>开启慢查询</p>
<p><a href="https://blog.chinaunix.net/uid-20769015-id-3469275.html">https://blog.chinaunix.net/uid-20769015-id-3469275.html</a></p>
<h2 id="死锁处理"><a href="#死锁处理" class="headerlink" title="死锁处理"></a>死锁处理</h2><p><a href="https://blog.csdn.net/dc_726/article/details/8576151">https://blog.csdn.net/dc_726/article/details/8576151</a></p>
<p><a href="https://my.oschina.net/phacks/blog/699284">https://my.oschina.net/phacks/blog/699284</a></p>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h 192.168.88.21 -u root -p 指定host</span><br></pre></td></tr></table></figure>

<h2 id="忘记-root-密码"><a href="#忘记-root-密码" class="headerlink" title="忘记 root 密码"></a>忘记 root 密码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<p>在<code>[mysqld]</code>下添加<code>skip-grant-tables</code>参数，重启 mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql</span><br><span class="line">use mysql;</span><br><span class="line">update user set password&#x3D;password(&quot;123456&quot;) where user&#x3D;&quot;root&quot;;</span><br><span class="line">flush privileges;</span><br><span class="line">\q</span><br></pre></td></tr></table></figure>

<h2 id="客户端连接慢"><a href="#客户端连接慢" class="headerlink" title="客户端连接慢"></a>客户端连接慢</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种：在 MySQL 所在服务器的 hosts 上加入过程连入的服务器的IP &lt;&#x3D;&gt; 域名的记录。</span><br><span class="line"></span><br><span class="line">192.168.0.11   webserver</span><br><span class="line">第二种：修改 MySQL 的配置，在 [mysqld] 段加入 skip-name-resolve。</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">...</span><br><span class="line">skip-name-resolve</span><br><span class="line">重启 MySQL 使之生效。</span><br></pre></td></tr></table></figure>

<p><a href="https://infong.me/remote-mysql-connection-slow/">https://infong.me/remote-mysql-connection-slow/</a></p>
<h2 id="慢查询日志分析"><a href="#慢查询日志分析" class="headerlink" title="慢查询日志分析"></a>慢查询日志分析</h2><p>命令行下，进入 mysql/bin 目录，输入 mysqldumpslow ?help 或 –help 可以看到这个工具的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s c -t 20 host-slow.log</span><br><span class="line">mysqldumpslow -s r -t 20 host-slow.log</span><br><span class="line">上述命令可以看出访问次数最多的 20 个 sql 语句和返回记录集最多的 20 个 sql</span><br><span class="line">mysqldumpslow -t 10 -s t -g &quot;left join&quot; host-slow.log</span><br><span class="line">这个是按照时间返回前 10 条里面含有左连接的 sql 语句。</span><br><span class="line">mysqldumpslow -s c -t 10 &#x2F;database&#x2F;mysql&#x2F;slow-log</span><br><span class="line">这会输出记录次数最多的10条SQL语句，其中：</span><br><span class="line">-s order，是表示按照何种方式排序，order值有：c、t、l、r 分别是按照记录次数、时间、查询时间、返回的记录数来排序，ac、at、al、ar，表示相应的倒序；</span><br><span class="line">-t num，即为返回前面多少条的数据；</span><br><span class="line">-g pattern，pattern可以写一个正则匹配模式，大小写不敏感的；</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>linux nat</title>
    <url>//2016/08/15/Linux-NAT.html</url>
    <content><![CDATA[<h1 id="2016-08-15-Linux-NAT"><a href="#2016-08-15-Linux-NAT" class="headerlink" title="2016-08-15-Linux-NAT"></a>2016-08-15-Linux-NAT</h1><!--
create time: 2016-08-15 13:16:09
Author: <TODO: 请写上你的名字>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="设置-IPv4-转发"><a href="#设置-IPv4-转发" class="headerlink" title="设置 IPv4 转发"></a>设置 IPv4 转发</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">设置</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">生效</span><br><span class="line">sysctl -p</span><br><span class="line">显示所有系统参数</span><br><span class="line">sysctl -a</span><br></pre></td></tr></table></figure>

<h2 id="sysctl"><a href="#sysctl" class="headerlink" title="sysctl"></a>sysctl</h2><p>sysctl 配置与显示在/proc/sys 目录中的内核参数．可以用 sysctl 来设置或重新设置联网功能，如 IP 转发、IP 碎片去除以及源路由检查等。用户只需要编辑/etc/sysctl.conf 文件，即可手工或自动执行由 sysctl 控制的功能。</p>
<p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl [-n] [-e] -w variable&#x3D;value</span><br><span class="line"></span><br><span class="line">    sysctl [-n] [-e] -p &lt;filename&gt; (default &#x2F;etc&#x2F;sysctl.conf)</span><br><span class="line"></span><br><span class="line">    sysctl [-n] [-e] -a</span><br><span class="line"></span><br><span class="line">    常用参数的意义：</span><br><span class="line"></span><br><span class="line">    -w   临时改变某个指定参数的值，如</span><br><span class="line"></span><br><span class="line">         sysctl -w net.ipv4.ip_forward&#x3D;1</span><br><span class="line"></span><br><span class="line">    -a   显示所有的系统参数</span><br><span class="line"></span><br><span class="line">    -p   从指定的文件加载系统参数，如不指定即从&#x2F;etc&#x2F;sysctl.conf中加载</span><br></pre></td></tr></table></figure>

<p>如果仅仅是想临时改变某个系统参数的值，可以用两种方法来实现,例如想启用 IP 路由转发功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br><span class="line"></span><br><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1</span><br></pre></td></tr></table></figure>

<p>以上两种方法都可能立即开启路由功能，但如果系统重启，或执行了<code>service network restart</code>命令，所设置的值即会丢失，如果想永久保留配置，可以修改/etc/sysctl.conf 文件</p>
<p>将 net.ipv4.ip_forward=0 改为 net.ipv4.ip_forward=1</p>
<h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p>详细链接：<a href="./iptables.html">iptables.html</a></p>
<h3 id="查看-iptables-规则内容"><a href="#查看-iptables-规则内容" class="headerlink" title="查看 iptables 规则内容"></a>查看 iptables 规则内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service iptables status</span><br><span class="line">或者</span><br><span class="line">iptables -L</span><br><span class="line">更详细的信息</span><br><span class="line">iptables -L -v</span><br></pre></td></tr></table></figure>

<h3 id="清空-iptables-规则"><a href="#清空-iptables-规则" class="headerlink" title="清空 iptables 规则"></a>清空 iptables 规则</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -F</span><br></pre></td></tr></table></figure>

<h3 id="允许-192-168-10-0-0-16-连接-ssh"><a href="#允许-192-168-10-0-0-16-连接-ssh" class="headerlink" title="允许 192.168.10.0.0/16 连接 ssh"></a>允许 192.168.10.0.0/16 连接 ssh</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t filter -A INPUT -s 192.168.0.0&#x2F;16 -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="INPUT-默认策略改为-DROP"><a href="#INPUT-默认策略改为-DROP" class="headerlink" title="INPUT 默认策略改为 DROP"></a>INPUT 默认策略改为 DROP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT DROP</span><br></pre></td></tr></table></figure>

<h3 id="OUTPUT-默认策略改为-ACCEPT"><a href="#OUTPUT-默认策略改为-ACCEPT" class="headerlink" title="OUTPUT 默认策略改为 ACCEPT"></a>OUTPUT 默认策略改为 ACCEPT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -P OUTPUT ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="添加-SNAT"><a href="#添加-SNAT" class="headerlink" title="添加 SNAT"></a>添加 SNAT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 192.168.0.0&#x2F;16 -o em1 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p>不需要下面这条</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -R POSTROUTING 2 -d 192.168.10.2 -p tcp --dport 8081 -j SNAT --to 172.10.2.201:80</span><br></pre></td></tr></table></figure>

<h3 id="添加-DNAT"><a href="#添加-DNAT" class="headerlink" title="添加 DNAT"></a>添加 DNAT</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 172.10.2.201 -p tcp --dport 80 -j DNAT --to-destination 192.168.10.10:80</span><br></pre></td></tr></table></figure>

<h3 id="添加-INPUT-允许"><a href="#添加-INPUT-允许" class="headerlink" title="添加 INPUT 允许"></a>添加 INPUT 允许</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t filter -A INPUT -s 172.10.2.201&#x2F;32 -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="允许-PING"><a href="#允许-PING" class="headerlink" title="允许 PING"></a>允许 PING</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p icmp -j ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="临时添加多个公网-IP"><a href="#临时添加多个公网-IP" class="headerlink" title="临时添加多个公网 IP"></a>临时添加多个公网 IP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip address add 172.10.2.203&#x2F;24 dev em1</span><br></pre></td></tr></table></figure>

<h3 id="永久添加多个公网-IP"><a href="#永久添加多个公网-IP" class="headerlink" title="永久添加多个公网 IP"></a>永久添加多个公网 IP</h3><p>仿照/etc/sysconfig/network-scripts/ifcfg-em1 增加一文件根据网络虚拟接口的名字进行命名</p>
<p>/etc/sysconfig/network-scripts 目录下复制 ifcfg-em1 到 ifcfg-em1:0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp ifcfg-em1 ifcfg-em1:0</span><br></pre></td></tr></table></figure>

<p>修改 ifcfg-em1:0 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEVICE&#x3D;em1:0</span><br><span class="line">TYPE&#x3D;Ethernet</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">NM_CONTROLLED&#x3D;yes</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">IPADDR&#x3D;172.10.2.201</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br><span class="line">GATEWAY&#x3D;172.10.2.1</span><br></pre></td></tr></table></figure>

<h4 id="ifconfig-em1-0-down"><a href="#ifconfig-em1-0-down" class="headerlink" title="ifconfig em1:0 down"></a>ifconfig em1:0 down</h4><p>关闭虚拟接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig eth*[:x] down(*代表的是网卡编号，x代表虚拟接口号0－255)</span><br></pre></td></tr></table></figure>

<h4 id="ifconfig-em1-0-up"><a href="#ifconfig-em1-0-up" class="headerlink" title="ifconfig em1:0 up"></a>ifconfig em1:0 up</h4><p>启动虚拟网口出现错误</p>
<p>SIOCSIFFLAGS: Cannot assign requested address</p>
<p>出现以上错误的原因是把 em1:1 的信息写在了 ifcfg-em1:1 的配置文件里，本意是想，开机启动的时候自动加载，实现一块网卡双 IP。</p>
<p>但当手动把 em1:1 设备 down（执行了：“ifconfig em1:1 down”），然后再启用的时候会报以上错误，主要是 mac 地址重复了</p>
<p>解决办法：</p>
<p>1、手动分配一个 mac 地址（不建议）</p>
<p>2、手动执行添加 IP 的命令，把写在 ifcfg-eth0:1 里的信息配置上，如</p>
<p>ifconfig eth0:1 192.168.1.2/24</p>
<p>route add default gw 192.168.1.1 dev eth0:1</p>
<h3 id="查看-IP"><a href="#查看-IP" class="headerlink" title="查看 IP"></a>查看 IP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip addr</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<h3 id="添加默认网关"><a href="#添加默认网关" class="headerlink" title="添加默认网关"></a>添加默认网关</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">route add default gw 172.10.2.1</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>iptables -P INPUT DROP 后无法 ping 通 <a href="http://www.baidu.com（无法进行域名解析）">www.baidu.com（无法进行域名解析）</a></p>
<p>使用 iptables -P INPUT ACCEPT 允许所有通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A INPUT -m state --state INVALID -j DROP</span><br></pre></td></tr></table></figure>

<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>配置后内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables</span><br><span class="line"></span><br><span class="line"># Generated by iptables-save v1.4.7 on Mon Aug 15 17:30:49 2016</span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [20:3272]</span><br><span class="line">:POSTROUTING ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A PREROUTING -d 172.10.2.201&#x2F;32 -p tcp -m tcp --dport 80 -j DNAT --to-destination 192.168.10.10:80</span><br><span class="line">-A POSTROUTING -s 192.168.0.0&#x2F;16 -o em1 -j MASQUERADE</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Mon Aug 15 17:30:49 2016</span><br><span class="line"># Generated by iptables-save v1.4.7 on Mon Aug 15 17:30:49 2016</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [1368:118485]</span><br><span class="line">:FORWARD ACCEPT [21251:9829802]</span><br><span class="line">:OUTPUT ACCEPT [425:52772]</span><br><span class="line">-A INPUT -s 192.168.0.0&#x2F;16 -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -m state --state INVALID -j DROP</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Mon Aug 15 17:30:49 2016</span><br></pre></td></tr></table></figure>

<h1 id="IP-命令"><a href="#IP-命令" class="headerlink" title="IP 命令"></a>IP 命令</h1><p>链接：<a href="https://www.cnblogs.com/bamboo-talking/archive/2013/01/10/2855306.html">https://www.cnblogs.com/bamboo-talking/archive/2013/01/10/2855306.html</a></p>
<h4 id="ip-link-set–改变设备的属性-缩写：set、s"><a href="#ip-link-set–改变设备的属性-缩写：set、s" class="headerlink" title="ip link set–改变设备的属性. 缩写：set、s"></a>ip link set–改变设备的属性. 缩写：set、s</h4><p>示例 1：up/down 起动／关闭设备。</p>
<p>ip link set dev eth0 up</p>
<p>这个等于传统的 ifconfig eth0 up(down)</p>
<h4 id="ip-link-show–显示设备属性-缩写：show、list、lst、sh、ls、l"><a href="#ip-link-show–显示设备属性-缩写：show、list、lst、sh、ls、l" class="headerlink" title="ip link show–显示设备属性. 缩写：show、list、lst、sh、ls、l"></a>ip link show–显示设备属性. 缩写：show、list、lst、sh、ls、l</h4><p>-s 选项出现两次或者更多次，ip 会输出更为详细的错误信息统计。</p>
<p>示例:</p>
<p>ip -s -s link ls eth0</p>
<p>eth0: mtu 1500 qdisc cbq qlen 100</p>
<p>link/ether 00:a0:cc:66:18:78 brd ff:ff:ff:ff:ff:ff</p>
<p>RX: bytes packets errors dropped overrun mcast</p>
<p>2449949362 2786187 0 0 0 0</p>
<p>RX errors: length crc frame fifo missed</p>
<p>0 0 0 0 0</p>
<p>TX: bytes packets errors dropped carrier collsns</p>
<p>178558497 1783946 332 0 332 35172</p>
<p>TX errors: aborted fifo window heartbeat</p>
<p>0 0 0 332</p>
<p>这个命令等于传统的 ifconfig eth0</p>
<h4 id="ip-address-add–添加一个新的协议地址-缩写：add、a"><a href="#ip-address-add–添加一个新的协议地址-缩写：add、a" class="headerlink" title="ip address add–添加一个新的协议地址. 缩写：add、a"></a>ip address add–添加一个新的协议地址. 缩写：add、a</h4><p>示例 1：为每个地址设置一个字符串作为标签。为了和 Linux-2.0 的网络别名兼容，这个字符串必须以设备名开头，接着一个冒号，</p>
<p>ip addr add local 192.168.4.1/28 brd + label eth0:1 dev eth0</p>
<p>示例 2: 在以太网接口 eth0 上增加一个地址 192.168.20.0，掩码长度为 24 位(155.155.155.0)，标准广播地址，标签为 eth0:Alias：</p>
<p>ip addr add 192.168.4.2/24 brd + dev eth1 label eth1:1</p>
<p>这个命令等于传统的: ifconfig eth1:1 192.168.4.2</p>
<h4 id="ip-address-delete–删除一个协议地址-缩写：delete、del、d"><a href="#ip-address-delete–删除一个协议地址-缩写：delete、del、d" class="headerlink" title="ip address delete–删除一个协议地址. 缩写：delete、del、d"></a>ip address delete–删除一个协议地址. 缩写：delete、del、d</h4><p>ip addr del 192.168.4.1/24 brd + dev eth0 label eth0:Alias1</p>
<h4 id="ip-address-show–显示协议地址-缩写：show、list、lst、sh、ls、l"><a href="#ip-address-show–显示协议地址-缩写：show、list、lst、sh、ls、l" class="headerlink" title="ip address show–显示协议地址. 缩写：show、list、lst、sh、ls、l"></a>ip address show–显示协议地址. 缩写：show、list、lst、sh、ls、l</h4><p>ip addr ls eth0</p>
<h4 id="ip-address-flush–清除协议地址-缩写：flush、f"><a href="#ip-address-flush–清除协议地址-缩写：flush、f" class="headerlink" title="ip address flush–清除协议地址. 缩写：flush、f"></a>ip address flush–清除协议地址. 缩写：flush、f</h4><p>示例 1 : 删除属于私网 10.0.0.0/8 的所有地址：</p>
<p>ip -s -s a f to 10/8</p>
<p>示例 2 : 取消所有以太网卡的 IP 地址</p>
<p>ip -4 addr flush label “eth0”</p>
<h4 id="ip-neighbour–neighbour-arp-表管理命令"><a href="#ip-neighbour–neighbour-arp-表管理命令" class="headerlink" title="ip neighbour–neighbour/arp 表管理命令"></a>ip neighbour–neighbour/arp 表管理命令</h4><p>缩写 neighbour、neighbor、neigh、n</p>
<p>命令 add、change、replace、delete、fulsh、show(或者 list)</p>
<h4 id="ip-neighbour-add-–-添加一个新的邻接条目"><a href="#ip-neighbour-add-–-添加一个新的邻接条目" class="headerlink" title="ip neighbour add – 添加一个新的邻接条目"></a>ip neighbour add – 添加一个新的邻接条目</h4><p>ip neighbour change–修改一个现有的条目</p>
<p>ip neighbour replace–替换一个已有的条目</p>
<p>缩写：add、a；change、chg；replace、repl</p>
<p>示例 1: 在设备 eth0 上，为地址 10.0.0.3 添加一个 permanent ARP 条目：</p>
<p>ip neigh add 10.0.0.3 lladdr 0:0:0:0:0:1 dev eth0 nud perm</p>
<p>示例 2:把状态改为 reachable</p>
<p>ip neigh chg 10.0.0.3 dev eth0 nud reachable</p>
<h4 id="ip-neighbour-delete–删除一个邻接条目"><a href="#ip-neighbour-delete–删除一个邻接条目" class="headerlink" title="ip neighbour delete–删除一个邻接条目"></a>ip neighbour delete–删除一个邻接条目</h4><p>示例 1:删除设备 eth0 上的一个 ARP 条目 10.0.0.3</p>
<p>ip neigh del 10.0.0.3 dev eth0</p>
<h4 id="ip-neighbour-show–显示网络邻居的信息-缩写：show、list、sh、ls"><a href="#ip-neighbour-show–显示网络邻居的信息-缩写：show、list、sh、ls" class="headerlink" title="ip neighbour show–显示网络邻居的信息. 缩写：show、list、sh、ls"></a>ip neighbour show–显示网络邻居的信息. 缩写：show、list、sh、ls</h4><p>示例 1: ip -s n ls 193.233.7.254</p>
<p>193.233.7.254. dev eth0 lladdr 00:00:0c:76:3f:85 ref 5 used 12/13/20 nud reachable</p>
<h5 id="ip-neighbour-flush–清除邻接条目-缩写：flush、f"><a href="#ip-neighbour-flush–清除邻接条目-缩写：flush、f" class="headerlink" title="ip neighbour flush–清除邻接条目. 缩写：flush、f"></a>ip neighbour flush–清除邻接条目. 缩写：flush、f</h5><p>示例 1: (-s 可以显示详细信息)</p>
<p>ip -s -s n f 193.233.7.254</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nat</tag>
      </tags>
  </entry>
  <entry>
    <title>linux iptables</title>
    <url>//2016/08/15/iptables.html</url>
    <content><![CDATA[<h1 id="2016-08-15-iptables"><a href="#2016-08-15-iptables" class="headerlink" title="2016-08-15-iptables"></a>2016-08-15-iptables</h1><!--
create time: 2016-08-15 13:58:08
Author: <TODO: 请写上你的名字>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://blog.chinaunix.net/uid-26495963-id-3279216.html">https://blog.chinanix.net/uid-26495963-id-3279216.html</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>防火墙，其实说白了讲，就是用于实现 Linux 下访问控制的功能的，它分为硬件的或者软件的防火墙两种。无论是在哪个网络中，防火墙工作的地方一定是在网络的边缘。而我们的任务就是需要去定义到底防火墙如何工作，这就是防火墙的策略，规则，以达到让它对出入网络的 IP、数据进行检测。</p>
<p>目前市面上比较常见的有 3、4 层的防火墙，叫 <strong>网络层的防火墙</strong>，还有 7 层的防火墙，其实是 <strong>代理层的网关</strong>。</p>
<p>对于 TCP/IP 的七层模型来讲，我们知道第三层是网络层，三层的防火墙会在这层 <strong>对源地址和目标地址进行检测</strong>。但是对于七层的防火墙，不管你 <strong>源端口或者目标端口，源地址或者目标地址是什么，都将对你所有的东西进行检查</strong>。所以，对于设计原理来讲，七层防火墙更加安全，但是这却带来了效率更低。所以市面上通常的防火墙方案，都是两者结合的。而又由于我们都需要从防火墙所控制的这个口来访问，所以防火墙的工作效率就成了用户能够访问数据多少的一个最重要的控制，配置的不好甚至有可能成为流量的瓶颈。</p>
<h2 id="iptables-的历史以及工作原理"><a href="#iptables-的历史以及工作原理" class="headerlink" title="iptables 的历史以及工作原理"></a>iptables 的历史以及工作原理</h2><ol>
<li><p>iptables 的发展:</p>
<p>iptables 的前身叫 ipfirewall （内核 1.x 时代）,这是一个作者从 freeBSD 上移植过来的，能够工作在内核当中的，对数据包进行检测的一款简易访问控制工具。但是 ipfirewall 工作功能极其有限(它需要将所有的规则都放进内核当中，这样规则才能够运行起来，而放进内核，这个做法一般是极其困难的)。当内核发展到 2.x 系列的时候，软件更名为 ipchains，它可以定义多条规则，将他们串起来，共同发挥作用，而现在，它叫做 iptables，可以 <strong>将规则组成一个列表，实现绝对详细的访问控制功能</strong>。</p>
<p>他们都是工作在用户空间中，定义规则的工具，本身并不算是防火墙。它们定义的规则，可以让 <strong>在内核空间当中的 netfilter 来读取</strong>，并且实现让防火墙工作。而放入内核的地方必须要是特定的位置，必须是 tcp/ip 的协议栈经过的地方。而这个 tcp/ip 协议栈必须经过的地方，可以实现读取规则的地方就叫做 <strong>netfilter</strong>.(网络过滤器)</p>
<p>作者一共在内核空间中选择了 5 个位置，</p>
<ol>
<li>内核空间中：从一个网络接口进来，到另一个网络接口去的</li>
<li>数据包从内核流入用户空间的</li>
<li>数据包从用户空间流出的</li>
<li>进入/离开本机的外网接口</li>
<li>进入/离开本机的内网接口</li>
</ol>
</li>
<li><p>iptables 的工作机制</p>
<p>从上面的发展我们知道了作者选择了 5 个位置，来作为控制的地方，但是你有没有发现，其实前三个位置已经基本上能将路径彻底封锁了，但是为什么已经在进出的口设置了关卡之后还要在内部卡呢？ 由于数据包尚未进行路由决策，还不知道数据要走向哪里，所以在进出口是没办法实现数据过滤的。所以要在内核空间里设置转发的关卡，进入用户空间的关卡，从用户空间出去的关卡。那么，既然他们没什么用，那我们为什么还要放置他们呢？因为我们 <strong>在做 NAT 和 DNAT 的时候，目标地址转换必须在路由之前转换</strong>。所以 <strong>我们必须在外网而后内网的接口处进行设置关卡</strong>。</p>
<p>这五个位置也被称为五个钩子函数（hook functions）,也叫五个规则链。</p>
<ol>
<li>PREROUTING (路由前)</li>
<li>INPUT (数据包流入口)</li>
<li>FORWARD (转发管卡)</li>
<li>OUTPUT(数据包出口)</li>
<li>POSTROUTING（路由后）</li>
</ol>
<p>这是 NetFilter 规定的五个规则链，任何一个数据包，只要经过本机，必将经过这五个链中的其中一个链。</p>
</li>
<li><p>防火墙的策略</p>
<p>防火墙策略一般分为两种，一种叫“通”策略，一种叫“堵”策略， <strong>通策略，默认门是关着的，必须要定义谁能进。堵策略则是，大门是洞开的，但是你必须有身份认证，否则不能进</strong>。所以我们要定义，让进来的进来，让出去的出去， <strong>所以通，是要全通，而堵，则是要选择</strong>。当我们定义的策略的时候，要分别定义多条功能，其中：定义数据包中允许或者不允许的策略，filter 过滤的功能，而定义地址转换的功能的则是 nat 选项。为了让这些功能交替工作，我们制定出了“表”这个定义，来定义、区分各种不同的工作功能和处理方式。</p>
<p>我们现在用的比较多个功能有 3 个：</p>
<ol>
<li>filter 定义允许或者不允许的</li>
<li>nat 定义地址转换的</li>
<li>mangle 功能:修改报文原数据</li>
</ol>
<p>我们修改报文原数据就是来修改 TTL 的。能够实现将数据包的元数据拆开，在里面做标记/修改内容的。而防火墙标记，其实就是靠 mangle 来实现的。</p>
<p><strong>小扩展:</strong></p>
<p>对于 filter 来讲一般只能做在 3 个链上：INPUT ，FORWARD ，OUTPUT<br>对于 nat 来讲一般也只能做在 3 个链上：PREROUTING ，OUTPUT ，POSTROUTING<br>而 mangle 则是 5 个链都可以做：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p>
<p>iptables/netfilter（这款软件）是工作在用户空间的，它可以让规则进行生效的，本身不是一种服务，而且规则是立即生效的。而我们 iptables 现在被做成了一个服务，可以进行启动，停止的。启动，则将规则直接生效，停止，则将规则撤销。</p>
<p>iptables 还支持自己定义链。但是自己定义的链，必须是跟某种特定的链关联起来的。在一个关卡设定，指定当有数据的时候专门去找某个特定的链来处理，当那个链处理完之后，再返回。接着在特定的链中继续检查。</p>
<p><strong>注意：</strong></p>
<p>规则的次序非常关键， <strong>谁的规则越严格，应该放的越靠前</strong>，而检查规则的时候，是按照从上往下的方式进行检查的。</p>
</li>
</ol>
<h2 id="规则的写法"><a href="#规则的写法" class="headerlink" title="规则的写法"></a>规则的写法</h2><p>iptables 定义规则的方式比较复杂:</p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables [-t table] COMMAND chain CRETIRIA -j ACTION</span><br><span class="line">		 -t table ：3个filter nat mangle</span><br><span class="line">		 COMMAND：定义如何对规则进行管理</span><br><span class="line">		 chain：指定你接下来的规则到底是在哪个链上操作的，当定义策略的时候，是可以省略的</span><br><span class="line">		 CRETIRIA:指定匹配标准</span><br><span class="line">		 -j ACTION :指定如何进行处理</span><br></pre></td></tr></table></figure>

<p>比如：不允许 172.16.0.0/24 的进行访问。</p>
<p>iptables -t filter -A INPUT -s 172.16.0.0/16 -p udp –dport 53 -j DROP</p>
<p>当然你如果想拒绝的更彻底：</p>
<p>iptables -t filter -R INPUT 1 -s 172.16.0.0/16 -p udp –dport 53 -j REJECT</p>
<p>iptables -L -n -v #查看定义规则的详细信息</p>
<h2 id="详解-COMMAND"><a href="#详解-COMMAND" class="headerlink" title="详解 COMMAND"></a>详解 COMMAND</h2><ol>
<li><p>链管理命令（这都是立即生效的）</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-P :设置默认策略的（设定默认门是关着的还是开着的）</span><br></pre></td></tr></table></figure>
</blockquote>
<pre><code>默认策略一般只有两种
iptables -P INPUT (DROP|ACCEPT)  默认是关的/默认是开的
比如：
iptables -P INPUT DROP 这就把默认规则给拒绝了。并且没有定义哪个动作，所以关于外界连接的所有规则包括Xshell连接之类的，远程连接都被拒绝了。</code></pre><p>-F: FLASH，清空规则链的(注意每个链的管理权限)<br>iptables -t nat -F PREROUTING<br>iptables -t nat -F 清空 nat 表的所有链<br>-N:NEW 支持用户新建一个链<br>iptables -N inbound_tcp_web 表示附在 tcp 表上用于检查 web 的。<br>-X: 用于删除用户自定义的空链<br>使用方法跟-N 相同，但是在删除之前必须要将里面的链给清空昂了<br>-E：用来 Rename chain 主要是用来给用户自定义的链重命名<br>-E oldname newname<br>-Z：清空链，及链中默认规则的计数器的（有两个计数器，被匹配到多少个数据包，多少个字节）<br>iptables -Z :清空</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>规则管理命令</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-A：追加，在当前链的最后新增一个规则</span><br><span class="line">-I num : 插入，把当前规则插入为第几条。</span><br></pre></td></tr></table></figure>
</blockquote>
<pre><code>-I 3 :插入为第三条</code></pre><p>-R num：Replays 替换/修改第几条规则<br>格式：iptables -R 3 …………<br>-D num：删除，明确指定删除第几条规则</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>查看管理命令 “-L”</p>
<p>附加子命令</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n：以数字的方式显示ip，它会将ip直接显示出来，如果不加-n，则会将ip反向解析成主机名。</span><br><span class="line">-v：显示详细信息</span><br><span class="line">-vv</span><br><span class="line">-vvv :越多越详细</span><br><span class="line">-x：在计数器上显示精确值，不做单位换算</span><br><span class="line">--line-numbers : 显示规则的行号</span><br><span class="line">-t nat：显示所有的关卡的信息</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h2 id="详解匹配标准"><a href="#详解匹配标准" class="headerlink" title="详解匹配标准"></a>详解匹配标准</h2><ol>
<li><p>通用匹配：源地址目标地址的匹配</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-s：指定作为源地址匹配，这里不能指定主机名称，必须是IP</span><br></pre></td></tr></table></figure>
</blockquote>
<pre><code>IP | IP/MASK | 0.0.0.0/0.0.0.0
而且地址可以取反，加一个“!”表示除了哪个IP之外</code></pre><p>-d：表示匹配目标地址<br>-p：用于匹配协议的（这里的协议通常有 3 种，TCP/UDP/ICMP）<br>-i eth0：从这块网卡流入的数据<br>流入一般用在 INPUT 和 PREROUTING 上<br>-o eth0：从这块网卡流出的数据<br>流出一般在 OUTPUT 和 POSTROUTING 上</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>扩展匹配</p>
<blockquote>
<p>隐含扩展：对协议的扩展</p>
</blockquote>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-p tcp :TCP协议的扩展。一般有三种扩展</span><br></pre></td></tr></table></figure>
</blockquote>
<pre><code>--dport XX-XX：指定目标端口,不能指定多个非连续端口,只能指定单个端口，比如
--dport 21  或者 --dport 21-23 (此时表示21,22,23)
--sport：指定源端口
--tcp-fiags：TCP的标志位（SYN,ACK，FIN,PSH，RST,URG）
    对于它，一般要跟两个参数：
    1.检查的标志位
    2.必须为1的标志位
    --tcpflags syn,ack,fin,rst syn   =    --syn
    表示检查这4个位，这4个位中syn必须为1，其他的必须为0。所以这个意思就是用于检测三次握手的第一次包的。对于这种专门匹配第一包的SYN为1的包，还有一种简写方式，叫做--syn</code></pre><p>-p udp：UDP 协议的扩展<br>–dport<br>–sport<br>-p icmp：icmp 数据报文的扩展<br>–icmp-type：<br>echo-request(请求回显)，一般用 8 来表示<br>所以 –icmp-type 8 匹配请求回显数据包<br>echo-reply （响应的数据包）一般用 0 来表示</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>显式扩展（-m）</p>
</blockquote>
<p>扩展各种模块<br>-m multiport：表示启用多端口扩展<br>之后我们就可以启用比如 –dports 21,23,80</p>
</li>
</ol>
<h2 id="详解-j-ACTION"><a href="#详解-j-ACTION" class="headerlink" title="详解-j ACTION"></a>详解-j ACTION</h2><p>常用的 ACTION：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP：悄悄丢弃</span><br><span class="line">一般我们多用DROP来隐藏我们的身份，以及隐藏我们的链表</span><br><span class="line">REJECT：明示拒绝</span><br><span class="line">ACCEPT：接受</span><br><span class="line">custom_chain：转向一个自定义的链</span><br><span class="line">DNAT</span><br><span class="line">SNAT</span><br><span class="line">MASQUERADE：源地址伪装</span><br><span class="line">REDIRECT：重定向：主要用于实现端口重定向</span><br><span class="line">MARK：打防火墙标记的</span><br><span class="line">RETURN：返回</span><br><span class="line">在自定义链执行完毕后使用返回，来返回原规则链。</span><br></pre></td></tr></table></figure>

<h4 id="练习题-1："><a href="#练习题-1：" class="headerlink" title="练习题 1："></a>练习题 1：</h4><p>只要是来自于 172.16.0.0/16 网段的都允许访问我本机的 172.16.100.1 的 SSHD 服务</p>
<p>分析：首先肯定是在允许表中定义的。因为不需要做 NAT 地址转换之类的，然后查看我们 SSHD 服务，在 22 号端口上，处理机制是接受，对于这个表，需要有一来一回两个规则，如果我们允许也好，拒绝也好，对于访问本机服务，我们最好是定义在 INPUT 链上，而 OUTPUT 再予以定义就好。(会话的初始端先定义)，所以加规则就是：</p>
<p>定义进来的： iptables -t filter -A INPUT -s 172.16.0.0/16 -d 172.16.100.1 -p tcp –dport 22 -j ACCEPT</p>
<p>定义出去的： iptables -t filter -A OUTPUT -s 172.16.100.1 -d 172.16.0.0/16 -p tcp –dport 22 -j ACCEPT</p>
<p>将默认策略改成 DROP:</p>
<p>iptables -P INPUT DROP</p>
<p>iptables -P OUTPUT DROP</p>
<p>iptables -P FORWARD DROP</p>
<h2 id="状态检测"><a href="#状态检测" class="headerlink" title="状态检测"></a>状态检测</h2><p>是一种显式扩展，用于检测会话之间的连接关系的，有了检测我们可以实现会话间功能的扩展</p>
<p>什么是状态检测？对于整个 TCP 协议来讲，它是一个有连接的协议，三次握手中，第一次握手，我们就叫 NEW 连接，而从第二次握手以后的，ack 都为 1，这是正常的数据传输，和 tcp 的第二次第三次握手，叫做已建立的连接（ESTABLISHED）,还有一种状态，比较诡异的，比如：SYN=1 ACK=1 RST=1,对于这种我们无法识别的，我们都称之为 INVALID 无法识别的。还有第四种，FTP 这种古老的拥有的特征，每个端口都是独立的，21 号和 20 号端口都是一去一回，他们之间是有关系的，这种关系我们称之为 RELATED。</p>
<p>所以我们的状态一共有四种：</p>
<blockquote>
<p>NEW<br>ESTABLISHED<br>RELATED<br>INVALID</p>
</blockquote>
<p>所以我们对于刚才的练习题，可以增加状态检测。比如进来的只允许状态为 NEW 和 ESTABLISHED 的进来，出去只允许 ESTABLISHED 的状态出去，这就可以将比较常见的反弹式木马有很好的控制机制。</p>
<p>对于练习题的扩展：</p>
<p>进来的拒绝出去的允许，进来的只允许 NEW,ESTABLISHED 进来，出去只允许 ESTABLISHED 出去。默认规则都使用拒绝</p>
<p>iptables -L -n –line-number ：查看之前的规则位于第几行</p>
<p>改写 INPUT</p>
<p>iptables -R INPUT 2 -s 172.16.0.0/16 -d 172.16.100.1 -p tcp –dport 22 -m state –state NEW,ESTABLISHED -j ACCEPT</p>
<p>iptables -R OUTPUT 1 -m state –state ESTABLISHED -j ACCEPT</p>
<p>此时如果想再放行一个 80 端口如何放行呢？</p>
<p>iptables -A INPUT -d 172.16.100.1 -p tcp –dport 80 -m state –state NEW,ESTABLISHED -j ACCEPT</p>
<p>iptables -R INPUT 1 -d 172.16.100.1 -p udp –dport 53 -j ACCEPT</p>
<h4 id="练习题-2："><a href="#练习题-2：" class="headerlink" title="练习题 2："></a>练习题 2：</h4><p>假如我们允许自己 ping 别人，但是别人 ping 自己 ping 不通如何实现呢？<br>分析：对于 ping 这个协议，进来的为 8（ping），出去的为 0(响应).我们为了达到目的，需要 8 出去,允许 0 进来</p>
<p>在出去的端口上：iptables -A OUTPUT -p icmp –icmp-type 8 -j ACCEPT</p>
<p>在进来的端口上：iptables -A INPUT -p icmp –icmp-type 0 -j ACCEPT</p>
<p>小扩展：对于 127.0.0.1 比较特殊，我们需要明确定义它</p>
<p>iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</p>
<p>iptables -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</p>
<h2 id="SNAT-和-DNAT-的实现"><a href="#SNAT-和-DNAT-的实现" class="headerlink" title="SNAT 和 DNAT 的实现"></a>SNAT 和 DNAT 的实现</h2><p>由于我们现在 IP 地址十分紧俏，已经分配完了，这就导致我们必须要进行地址转换，来节约我们仅剩的一点 IP 资源。那么通过 iptables 如何实现 NAT 的地址转换呢？</p>
<ol>
<li><p>SNAT 基于原地址的转换</p>
<p>基于原地址的转换一般用在我们的许多 <strong>内网用户通过一个外网的口上网的时候，这时我们将我们内网的地址转换为一个外网的 IP，我们就可以实现连接其他外网 IP 的功能</strong>。</p>
<p>所以我们在 iptables 中就要定义到底如何转换：</p>
<p>定义的样式：</p>
<p>比如我们现在要将所有 192.168.10.0 网段的 IP 在经过的时候全都转换成 172.16.100.1 这个假设出来的外网地址：</p>
<p>iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -j SNAT –to-source 172.16.100.1</p>
<p>这样，只要是来自本地网络的试图通过网卡访问网络的，都会被统统转换成 172.16.100.1 这个 IP.</p>
<p>那么，如果 172.16.100.1 不是固定的怎么办？</p>
<p>我们都知道当我们使用联通或者电信上网的时候，一般它都会在每次你开机的时候随机生成一个外网的 IP，意思就是外网地址是动态变换的。这时我们就要将外网地址换成 MASQUERADE(动态伪装):它可以实现自动寻找到外网地址，而自动将其改为正确的外网地址。所以，我们就需要这样设置：</p>
<p>iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -j MASQUERADE</p>
<p>这里要注意：地址伪装并不适用于所有的地方。</p>
</li>
<li><p>DNAT 目标地址转换</p>
<pre><code>**对于目标地址转换，数据流向是从外向内的，外面的是客户端，里面的是服务器端通过目标地址转换，我们可以让外面的ip通过我们对外的外网ip来访问我们服务器不同的服务器，而我们的服务却放在内网服务器的不同的服务器上。**

如何做目标地址转换呢？：

iptables -t nat -A PREROUTING -d 172.16.100.2 -p tcp --dport 80 -j DNAT --to-destination 192.168.10.10:80

iptables -t nat -A PREROUTING -d 172.16.100.2 -p tcp --dport 80 -j DNAT --to 192.168.10.10:80</code></pre><p>目标地址转换要做在到达网卡之前进行转换,所以要做在 PREROUTING 这个位置上</p>
</li>
</ol>
<h2 id="控制规则的存放以及开启"><a href="#控制规则的存放以及开启" class="headerlink" title="控制规则的存放以及开启"></a>控制规则的存放以及开启</h2><p>注意：你所定义的所有内容，当你重启的时候都会失效，要想我们能够生效，需要使用一个命令将它保存起来</p>
<ol>
<li><p>service iptables save 命令</p>
<p>它会保存在/etc/sysconfig/iptables 这个文件中</p>
</li>
<li><p>iptables-save 命令</p>
<p>iptables-save &gt; /etc/sysconfig/iptables</p>
</li>
<li><p>iptables-restore 命令</p>
<p>开机的时候，它会自动加载/etc/sysconfig/iptabels<br>如果开机不能加载或者没有加载，而你想让一个自己写的配置文件（假设为 iptables.2）手动生效的话：<br>iptables-restore &lt; /etc/sysconfig/iptables.2</p>
<p>则完成了将 iptables 中定义的规则手动生效</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>iptables 是一个非常重要的工具，它是每一个防火墙上几乎必备的设置，也是我们在做大型网络的时候，为了很多原因而必须要设置的。学好 Iptables,可以让我们对整个网络的结构有一个比较深刻的了解，同时，我们还能够将内核空间中数据的走向以及 linux 的安全给掌握的非常透彻。我们在学习的时候，尽量能结合着各种各样的项目，实验来完成，这样对你加深 iptables 的配置，以及各种技巧有非常大的帮助。</p>
<p>附加 iptables 比较好的文章：</p>
<p><a href="https://www.linuxso.com/linuxpeixun/10332.html">https://www.linuxso.com/linuxpeixun/10332.html</a></p>
<h2 id="开启独立日志记录"><a href="#开启独立日志记录" class="headerlink" title="开启独立日志记录"></a>开启独立日志记录</h2><p>系统日志配置在 CentOS5 上叫 syslog，而在 CentOS6 上叫 rsyslog，叫增强版的 syslog，CentOS5 上的配置文件在/etc/syslog.conf 下，而 CentOS6 在/etc/rsyslog.conf 下</p>
<ol>
<li><p>在 rsyslog.conf 添加配置</p>
<blockquote>
<p>/etc/rsyslog.conf 中添加不同的日志级别（默认 warn(=4））</p>
</blockquote>
<blockquote>
<p>kern.warning /var/log/iptables.log</p>
</blockquote>
<blockquote>
<p>kern.debug /var/log/iptables.log</p>
</blockquote>
<blockquote>
<p>kern.info /var/log/iptables.log</p>
</blockquote>
<blockquote>
<p>不过推荐全部日志都记录： kern.* /var/log/iptables.log</p>
</blockquote>
<blockquote>
<p>重启日志配置： /etc/init.d/rsyslog restart</p>
</blockquote>
</li>
<li><p>让日志滚动，这一步是可选的</p>
<blockquote>
<p>vim /etc/logrotate.d/syslog</p>
</blockquote>
<blockquote>
<p>加入/var/log/iptables</p>
</blockquote>
</li>
<li><p>在 iptables 添加日志选项</p>
<blockquote>
<p>iptables -A INPUT -j LOG –log-prefix “iptables”</p>
</blockquote>
<blockquote>
<p>这样就可以记录所有的记录了，只要通过了防火墙都会记录到日志里</p>
</blockquote>
<blockquote>
<p>iptables -A INPUT -p tcp -j LOG –log-prefix “iptables icmp warn”</p>
</blockquote>
<blockquote>
<p>这样就只记录 tcp 日志</p>
</blockquote>
<blockquote>
<p>然后保存并重启防火墙配置</p>
</blockquote>
<blockquote>
<p>iptables-save</p>
</blockquote>
<blockquote>
<p>iptables-restart</p>
</blockquote>
<p>添加 nat tcp 日志（日志一般者配在 INPUT 链上）</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp -j LOG --log-prefix &quot;iptables&quot;（未生效）</span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -j LOG --log-prefix &quot;iptables&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>指定 tcp IP 端口（未生效）</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -d 172.10.2.201 -p tcp --dport 80 -j LOG --log-prefix &quot;iptables&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="限制不同-IP-段互相访问"><a href="#限制不同-IP-段互相访问" class="headerlink" title="限制不同 IP 段互相访问"></a>限制不同 IP 段互相访问</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.10.10&#x2F;24 网关 192.168.10.254</span><br><span class="line">192.168.20.20&#x2F;24 网关 192.168.20.254</span><br><span class="line">172.10.2.100&#x2F;24 网关 172.10.2.254</span><br><span class="line">192.168.10.254、192.168.20.254、172.10.2.254是同一机器上的三个网络接口</span><br><span class="line">允许192.168.0.0&#x2F;16之间互相访问，不允许172.10.0.0&#x2F;16和192.168.0.0&#x2F;16之间访问</span><br><span class="line">iptables -I FORWARD -s 172.10.0.0&#x2F;16 -d 192.168.0.0&#x2F;16 -j DROP</span><br></pre></td></tr></table></figure>

<h3 id="限制指定-IP-间访问"><a href="#限制指定-IP-间访问" class="headerlink" title="限制指定 IP 间访问"></a>限制指定 IP 间访问</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -I FORWARD -s 192.168.10.11&#x2F;32 -d 192.168.20.20&#x2F;32 -j DROP</span><br></pre></td></tr></table></figure>

<h3 id="允许指定-IP-互相-P-通"><a href="#允许指定-IP-互相-P-通" class="headerlink" title="允许指定 IP 互相 P 通"></a>允许指定 IP 互相 P 通</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -I FORWARD -s 192.168.10.11&#x2F;32 -d 192.168.20.20&#x2F;32 -j DROP -p icmp</span><br></pre></td></tr></table></figure>

<h3 id="禁止-20-段上网，允许-10-段上网（FORWARD-默认策略-DROP）"><a href="#禁止-20-段上网，允许-10-段上网（FORWARD-默认策略-DROP）" class="headerlink" title="禁止 20 段上网，允许 10 段上网（FORWARD 默认策略 DROP）"></a>禁止 20 段上网，允许 10 段上网（FORWARD 默认策略 DROP）</h3><p>FORWARD DROP 添加 192.168.10.0/24 ACCEPT</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -P FORWARD DROP</span><br><span class="line">iptables -I FORWARD -s 192.168.10.0&#x2F;24 -j ACCEPT</span><br><span class="line">iptables -I FORWARD -d 192.168.10.0&#x2F;24 -j ACCEPT</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Generated by iptables-save v1.4.7 on Tue Aug 16 10:55:10 2016</span><br><span class="line">*filter</span><br><span class="line">:INPUT DROP [572:39414]</span><br><span class="line">:FORWARD DROP [3:227]</span><br><span class="line">:OUTPUT ACCEPT [41:5184]</span><br><span class="line">-A INPUT -s 192.168.0.0&#x2F;16 -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -d 172.10.2.201&#x2F;32 -p tcp -j LOG --log-prefix &quot;iptables&quot;</span><br><span class="line">-A FORWARD -s 192.168.10.0&#x2F;24 -j ACCEPT</span><br><span class="line">-A FORWARD -d 192.168.10.0&#x2F;24 -j ACCEPT</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Tue Aug 16 10:55:10 2016</span><br><span class="line"># Generated by iptables-save v1.4.7 on Tue Aug 16 10:55:10 2016</span><br><span class="line">*nat</span><br><span class="line">:PREROUTING ACCEPT [4983944:300624001]</span><br><span class="line">:POSTROUTING ACCEPT [604:39091]</span><br><span class="line">:OUTPUT ACCEPT [43:3387]</span><br><span class="line">-A PREROUTING -d 172.10.2.201&#x2F;32 -p tcp -m tcp --dport 80 -j DNAT --to-destination 192.168.10.10:80</span><br><span class="line">-A POSTROUTING -s 192.168.0.0&#x2F;16 -o em1 -j MASQUERADE</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Tue Aug 16 10:55:10 2016</span><br></pre></td></tr></table></figure>

<h3 id="192-168-20-20-所有请求转到-192-168-10-10"><a href="#192-168-20-20-所有请求转到-192-168-10-10" class="headerlink" title="192.168.20.20 所有请求转到 192.168.10.10"></a>192.168.20.20 所有请求转到 192.168.10.10</h3><p>开启转发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p>设置 SNAT</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -j MASQUERADE</span><br><span class="line">或者</span><br><span class="line">iptables -t nat -A POSTROUTING -d 192.168.10.10 -j SNAT --to 192.168.20.20</span><br></pre></td></tr></table></figure>

<p>设置 DNAT</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 192.168.20.20 -j DNAT --to 192.168.10.10</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM设置</title>
    <url>//2016/08/05/JVM%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<h1 id="JVM-设置"><a href="#JVM-设置" class="headerlink" title="JVM 设置"></a>JVM 设置</h1><!--
create time: 2016-05-06 18:00:57
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="查看-JVM-相关命令"><a href="#查看-JVM-相关命令" class="headerlink" title="查看 JVM 相关命令"></a>查看 JVM 相关命令</h2><h3 id="查看整个-JVM-内存状态"><a href="#查看整个-JVM-内存状态" class="headerlink" title="查看整个 JVM 内存状态"></a>查看整个 JVM 内存状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jmap -heap [pid]</span><br></pre></td></tr></table></figure>

<p>要注意的是在使用 CMS GC 情况下，jmap -heap 的执行有可能会导致 JAVA 进程挂起</p>
<h3 id="查看-JVM-堆中对象详细占用情况"><a href="#查看-JVM-堆中对象详细占用情况" class="headerlink" title="查看 JVM 堆中对象详细占用情况"></a>查看 JVM 堆中对象详细占用情况</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jmap -histo [pid]</span><br></pre></td></tr></table></figure>

<h3 id="导出整个-JVM-中内存信息"><a href="#导出整个-JVM-中内存信息" class="headerlink" title="导出整个 JVM 中内存信息"></a>导出整个 JVM 中内存信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jmap -dump:format&#x3D;b,file&#x3D;文件名 [pid]</span><br></pre></td></tr></table></figure>

<h3 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h3><p>jhat 是 sun 1.6 及以上版本中自带的一个用于分析 JVM 堆 DUMP 文件的工具，基于此工具可分析 JVM HEAP 中对象的内存占用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jhat -J-Xmx1024M [file]</span><br></pre></td></tr></table></figure>

<p>执行后等待 console 中输出 start HTTP server on port 7000 即可使用浏览器访问 IP：7000</p>
<h3 id="eclipse-Memory-Analyzer"><a href="#eclipse-Memory-Analyzer" class="headerlink" title="eclipse Memory Analyzer"></a>eclipse Memory Analyzer</h3><p>Eclipse 提供的一个用于分析 JVM 堆 Dump 文件的插件。借助这个插件可查看对象的内存占用状况，引用关系，分析内存泄露等。<br><a href="https://www.eclipse.org/mat/">https://www.eclipse.org/mat/</a></p>
<h3 id="kill-3-pid"><a href="#kill-3-pid" class="headerlink" title="kill -3 [pid]"></a>kill -3 [pid]</h3><p>在 Linux 上找到 Java 所在的进程号，然后执行以上命令，线程的相关信息就输出到 console</p>
<h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><p>jstack 是 sun JDK 自带的工具，通过该工具可以看到 JVM 中线程的运行状况，包括锁等待，线程是否在运行<br>执行 jstack [pid] ,线程的所有堆栈信息</p>
<p>“http-8080-10” daemon prio=10 tid=x0a949bb60 nid=0x884 waiting for monitor entry […]</p>
<p>“http-8080-10” 这个线程处于等待状态。 waiting for monitor entry 如果在连续几次输出线程堆栈信息都存在于同一个或多个线程上时，则说明系统中有锁竞争激烈，死锁，或锁饿死的想象。</p>
<p>“http-8080-11” daemon prio=10 tix=xxx nid=xxx in object.wait() […]<br>java.lang.Thread.State:waiting (on object monitor)<br>该表示 http-8080-11 的线程处于对象的 Wait 上，等待其他线程的唤醒，这也是线程池的常见用法。</p>
<p>“Low Memory Detector”daemon prio=10 tix=xx nid=xxx runnable […] java.lang.Thread.State:runnable<br>表示“Low Memory Detector” 的线程处于 Runable 状态，等待获取ＣＰＵ的使用权.</p>
<h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p>jps(Java Virtual Machine Process Status Tool)是 JDK 1.5 提供的一个显示当前所有 java 进程 pid 的命令，简单实用，非常适合在 linux/unix 平台上简单察看当前 java 进程的一些简单情况。</p>
<p>jps 存放在 JAVA_HOME/bin/jps，使用时为了方便请将 JAVA_HOME/bin/加入到 Path.</p>
<h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><pre><code>1. jstat -gc pid
        可以显示gc的信息，查看gc的次数，及时间。
        其中最后五项，分别是young gc的次数，young gc的时间，full gc的次数，full gc的时间，gc的总时间。
2.jstat -gccapacity pid
        可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小，
        如：PGCMN显示的是最小perm的内存使用量，PGCMX显示的是perm的内存最大使用量，
        PGC是当前新生成的perm内存占用量，PC是但前perm内存占用量。
        其他的可以根据这个类推， OC是old内纯的占用量。
3.jstat -gcutil pid
        统计gc信息统计。
4.jstat -gcnew pid
       年轻代对象的信息。
5.jstat -gcnewcapacity pid
       年轻代对象的信息及其占用量。
6.jstat -gcold pid
      old代对象的信息。
7.stat -gcoldcapacity pid
      old代对象的信息及其占用量。
8.jstat -gcpermcapacity pid
      perm对象的信息及其占用量。
9.jstat -class pid
      显示加载class的数量，及所占空间等信息。
10.jstat -compiler pid
      显示VM实时编译的数量等信息。
11.stat -printcompilation pid
      当前VM执行的信息。
    一些术语的中文解释：
     S0C：年轻代中第一个survivor（幸存区）的容量 (字节)
     S1C：年轻代中第二个survivor（幸存区）的容量 (字节)
     S0U：年轻代中第一个survivor（幸存区）目前已使用空间 (字节)
     S1U：年轻代中第二个survivor（幸存区）目前已使用空间 (字节)
     EC：年轻代中Eden（伊甸园）的容量 (字节)
     EU：年轻代中Eden（伊甸园）目前已使用空间 (字节)
     OC：Old代的容量 (字节)
     OU：Old代目前已使用空间 (字节)
     PC：Perm(持久代)的容量 (字节)
     PU：Perm(持久代)目前已使用空间 (字节)
     YGC：从应用程序启动到采样时年轻代中gc次数
     YGCT：从应用程序启动到采样时年轻代中gc所用时间(s)
     FGC：从应用程序启动到采样时old代(全gc)gc次数
     FGCT：从应用程序启动到采样时old代(全gc)gc所用时间(s)
     GCT：从应用程序启动到采样时gc用的总时间(s)
     NGCMN：年轻代(young)中初始化(最小)的大小 (字节)
     NGCMX：年轻代(young)的最大容量 (字节)
     NGC：年轻代(young)中当前的容量 (字节)
     OGCMN：old代中初始化(最小)的大小 (字节)
     OGCMX：old代的最大容量 (字节)
     OGC：old代当前新生成的容量 (字节)
     PGCMN：perm代中初始化(最小)的大小 (字节)
     PGCMX：perm代的最大容量 (字节)
     PGC：perm代当前新生成的容量 (字节)
     S0：年轻代中第一个survivor（幸存区）已使用的占当前容量百分比
     S1：年轻代中第二个survivor（幸存区）已使用的占当前容量百分比
     E：年轻代中Eden（伊甸园）已使用的占当前容量百分比
     O：old代已使用的占当前容量百分比
     P：perm代已使用的占当前容量百分比
     S0CMX：年轻代中第一个survivor（幸存区）的最大容量 (字节)
     S1CMX ：年轻代中第二个survivor（幸存区）的最大容量 (字节)
     ECMX：年轻代中Eden（伊甸园）的最大容量 (字节)
     DSS：当前需要survivor（幸存区）的容量 (字节)（Eden区已满）
     TT： 持有次数限制
     MTT ： 最大持有次数限制</code></pre><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>JVM 堆内存分为 2 块：Permanent Space 和 Heap Space。</p>
<ul>
<li>Permanent 即   持久代（Permanent Generation），主要存放的是 Java 类定义信息，与垃圾收集器要收集的 Java 对象关系不大。</li>
<li>Heap = { Old + NEW = {Eden, from, to} }，Old 即 年老代（Old Generation），New 即   年轻代（Young Generation）。年老代和年轻代的划分对垃圾收集影响比较大。</li>
</ul>
<h3 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代"></a>年轻代</h3><p>所有新生成的对象首先都是放在年轻代。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。年轻代一般分 3 个区，1 个 Eden 区，2 个 Survivor 区（from 和 to）。<br>大 部分对象在 Eden 区中生成。当 Eden 区满时，还存活的对象将被复制到 Survivor 区（两个中的一个），当一个 Survivor 区满时，此区的存活 对象将被复制到另外一个 Survivor 区，当另一个 Survivor 区也满了的时候，从前一个 Survivor 区复制过来的并且此时还存活的对象，将可 能被复制到年老代。<br>2 个 Survivor 区是对称的，没有先后关系，所以同一个 Survivor 区中可能同时存在从 Eden 区复制过来对象，和从另一个 Survivor 区复制过来的对象；而复制到年老区的只有从另一个 Survivor 区过来的对象。而且，因为需要交换的原因，Survivor 区至少有一个是空的。特殊的情况下，根据程序需要，Survivor 区是可以配置为多个的（多于 2 个），这样可以增加对象在年轻代中的存在时间，减少被放到年老代的可能。<br>针对年轻代的垃圾回收即 Young GC。</p>
<h3 id="年老代"><a href="#年老代" class="headerlink" title="年老代"></a>年老代</h3><p>在年轻代中经历了 N 次（可配置）垃圾回收后仍然存活的对象，就会被复制到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。<br>针对年老代的垃圾回收即 Full GC。</p>
<h3 id="持久代"><a href="#持久代" class="headerlink" title="持久代"></a>持久代</h3><p>用 于存放静态类型数据，如 Java Class, Method 等。持久代对垃圾回收没有显著影响。但是有些应用可能动态生成或调用一些 Class，例如 Hibernate CGLib 等，在这种时候往往需要设置一个比较大的持久代空间来存放这些运行过程中动态增加的类型。</p>
<p>所以，当一组对象生成时，内存申请过程如下：</p>
<ol>
<li>JVM 会试图为相关 Java 对象在年轻代的 Eden 区中初始化一块内存区域。</li>
<li>当 Eden 区空间足够时，内存申请结束。否则执行下一步。</li>
<li>JVM 试图释放在 Eden 区中所有不活跃的对象（Young GC）。释放后若 Eden 空间仍然不足以放入新对象，JVM 则试图将部分 Eden 区中活跃对象放入 Survivor 区。</li>
<li>Survivor 区被用来作为 Eden 区及年老代的中间交换区域。当年老代空间足够时，Survivor 区中存活了一定次数的对象会被移到年老代。</li>
<li>当年老代空间不够时，JVM 会在年老代进行完全的垃圾回收（Full GC）。</li>
<li>Full GC 后，若 Survivor 区及年老代仍然无法存放从 Eden 区复制过来的对象，则会导致 JVM 无法在 Eden 区为新生成的对象申请内存，即出现“Out of Memory”。</li>
</ol>
<h3 id="OOM（“Out-of-Memory”）异常一般主要有如下-2-种原因："><a href="#OOM（“Out-of-Memory”）异常一般主要有如下-2-种原因：" class="headerlink" title="OOM（“Out of Memory”）异常一般主要有如下 2 种原因："></a>OOM（“Out of Memory”）异常一般主要有如下 2 种原因：</h3><ol>
<li><p>年老代溢出，表现为：java.lang.OutOfMemoryError:Javaheapspace<br>这是最常见的情况，产生的原因可能是：设置的内存参数 Xmx 过小或程序的内存泄露及使用不当问题。<br>例如循环上万次的字符串处理、创建上千万个对象、在一段代码内申请上百 M 甚至上 G 的内存。还有的时候虽然不会报内存溢出，却会使系统不间断的垃圾回收，也无法处理其它请求。这种情况下除了检查程序、打印堆内存等方法排查，还可以借助一些内存分析工具，比如 MAT 就很不错。</p>
</li>
<li><p>持久代溢出，表现为：java.lang.OutOfMemoryError:PermGenspace<br>通<br>常由于持久代设置过小，动态加载了大量 Java 类而导致溢出，解决办法唯有将参数 -XX:MaxPermSize<br>调大（一般 256m 能满足绝大多数应用程序需求）。将部分 Java 类放到容器共享区（例如 Tomcat share<br>lib）去加载的办法也是一个思路，但前提是容器里部署了多个应用，且这些应用有大量的共享类库。</p>
</li>
</ol>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>-Xmx3550m：设置 JVM 最大堆内存为 3550M。</li>
<li>-Xms3550m：设置 JVM 初始堆内存为 3550M。此值可以设置与-Xmx 相同，以避免每次垃圾回收完成后 JVM 重新分配内存。</li>
<li>-Xss128k： 设置每个线程的栈大小。JDK5.0 以后每个线程栈大小为 1M，之前每个线程栈大小为 256K。应当根据应用的线程所需内存大小进行调整。在相同物理内存 下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000 左右。需要注意的是：当这个 值被设置的较大（例如&gt;2MB）时将会在很大程度上降低系统的性能。</li>
<li>-Xmn2g：设置年轻代大小为 2G。在整个堆内存大小确定的情况下，增大年轻代将会减小年老代，反之亦然。此值关系到 JVM 垃圾回收，对系统性能影响较大，官方推荐配置为整个堆大小的 3/8。</li>
<li>-XX:NewSize=1024m：设置年轻代初始值为 1024M。</li>
<li>-XX:MaxNewSize=1024m：设置年轻代最大值为 1024M。</li>
<li>-XX:PermSize=256m：设置持久代初始值为 256M。</li>
<li>-XX:MaxPermSize=256m：设置持久代最大值为 256M。</li>
<li>-XX:NewRatio=4：设置年轻代（包括 1 个 Eden 和 2 个 Survivor 区）与年老代的比值。表示年轻代比年老代为 1:4。</li>
<li>-XX:SurvivorRatio=4：设置年轻代中 Eden 区与 Survivor 区的比值。表示 2 个 Survivor 区（JVM 堆内存年轻代中默认有 2 个大小相等的 Survivor 区）与 1 个 Eden 区的比值为 2:4，即 1 个 Survivor 区占整个年轻代大小的 1/6。</li>
<li>-XX:MaxTenuringThreshold=7： 表示一个对象如果在 Survivor 区（救助空间）移动了 7 次还没有被垃圾回收就进入年老代。如果设置为 0 的话，则年轻代对象不经过 Survivor 区， 直接进入年老代，对于需要大量常驻内存的应用，这样做可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在 Survivor 区进行多次复制，这样 可以增加对象在年轻代存活时间，增加对象在年轻代被垃圾回收的概率，减少 Full GC 的频率，这样做可以在某种程度上提高服务稳定性。</li>
</ul>
<h2 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h2><p>-Xmn，-XX:NewSize/-XX:MaxNewSize，-XX:NewRatio 3 组参数都可以影响年轻代的大小，混合使用的情况下，优先级是什么？<br>如下：</p>
<ol>
<li>高优先级：-XX:NewSize/-XX:MaxNewSize</li>
<li>中优先级：-Xmn（默认等效  -Xmn=-XX:NewSize=-XX:MaxNewSize=?）</li>
<li>低优先级：-XX:NewRatio</li>
<li>推荐使用-Xmn 参数，原因是这个参数简洁，相当于一次设定 NewSize/MaxNewSIze，而且两者相等，适用于生产环境。-Xmn 配合 -Xms/-Xmx，即可将堆内存布局完成。<br>-Xmn 参数是在 JDK 1.4 开始支持。</li>
</ol>
<h2 id="垃圾回收器选择"><a href="#垃圾回收器选择" class="headerlink" title="垃圾回收器选择"></a>垃圾回收器选择</h2><p>JVM 给出了 3 种选择：串行收集器、并行收集器、并发收集器。串行收集器只适用于小数据量的情况，所以生产环境的选择主要是并行收集器和并发收集器。<br>默认情况下 JDK5.0 以前都是使用串行收集器，如果想使用其他收集器需要在启动时加入相应参数。JDK5.0 以后，JVM 会根据当前系统配置进行智能判断。</p>
<h3 id="串行收集器"><a href="#串行收集器" class="headerlink" title="串行收集器"></a>串行收集器</h3><ul>
<li>-XX:+UseSerialGC：设置串行收集器。</li>
</ul>
<h3 id="并行收集器（吞吐量优先）"><a href="#并行收集器（吞吐量优先）" class="headerlink" title="并行收集器（吞吐量优先）"></a>并行收集器（吞吐量优先）</h3><ul>
<li>-XX:+UseParallelGC：设置为并行收集器。此配置仅对年轻代有效。即年轻代使用并行收集，而年老代仍使用串行收集。</li>
<li>-XX:ParallelGCThreads=20：配置并行收集器的线程数，即：同时有多少个线程一起进行垃圾回收。此值建议配置与 CPU 数目相等。</li>
<li>-XX:+UseParallelOldGC：配置年老代垃圾收集方式为并行收集。JDK6.0 开始支持对年老代并行收集。</li>
<li>-XX:MaxGCPauseMillis=100：设置每次年轻代垃圾回收的最长时间（单位毫秒）。如果无法满足此时间，JVM 会自动调整年轻代大小，以满足此时间。</li>
<li>-XX:+UseAdaptiveSizePolicy：设置此选项后，并行收集器会自动调整年轻代 Eden 区大小和 Survivor 区大小的比例，以达成目标系统规定的最低响应时间或者收集频率等指标。此参数建议在使用并行收集器时，一直打开。</li>
</ul>
<h3 id="并发收集器（响应时间优先）"><a href="#并发收集器（响应时间优先）" class="headerlink" title="并发收集器（响应时间优先）"></a>并发收集器（响应时间优先）</h3><ul>
<li>-XX:+UseConcMarkSweepGC： 即 CMS 收集，设置年老代为并发收集。CMS 收集是 JDK1.4 后期版本开始引入的新 GC 算法。它的主要适合场景是对响应时间的重要性需求大于对吞吐量的 需求，能够承受垃圾回收线程和应用线程共享 CPU 资源，并且应用中存在比较多的长生命周期对象。CMS 收集的目标是尽量减少应用的暂停时间，减少 Full GC 发生的几率，利用和应用程序线程并发的垃圾回收线程来标记清除年老代内存。</li>
<li>-XX:+UseParNewGC：设置年轻代为并发收集。可与 CMS 收集同时使用。JDK5.0 以上，JVM 会根据系统配置自行设置，所以无需再设置此参数。</li>
<li>-XX:CMSFullGCsBeforeCompaction=0： 由于并发收集器不对内存空间进行压缩和整理，所以运行一段时间并行收集以后会产生内存碎片，内存使用效率降低。此参数设置运行 0 次 Full GC 后对内存空间进行压缩和整理，即每次 Full GC 后立刻开始压缩和整理内存。</li>
<li>-XX:+UseCMSCompactAtFullCollection：打开内存空间的压缩和整理，在 Full GC 后执行。可能会影响性能，但可以消除内存碎片。</li>
<li>-XX:+CMSIncrementalMode：设置为增量收集模式。一般适用于单 CPU 情况。</li>
<li>-XX:CMSInitiatingOccupancyFraction=70：表示年老代内存空间使用到 70%时就开始执行 CMS 收集，以确保年老代有足够的空间接纳来自年轻代的对象，避免 Full GC 的发生。</li>
</ul>
<h3 id="其它垃圾回收参数"><a href="#其它垃圾回收参数" class="headerlink" title="其它垃圾回收参数"></a>其它垃圾回收参数</h3><ul>
<li>-XX:+ScavengeBeforeFullGC：年轻代 GC 优于 Full GC 执行。</li>
<li>-XX:-DisableExplicitGC：不响应 System.gc() 代码。</li>
<li>-XX:+UseThreadPriorities：启用本地线程优先级 API。即使  java.lang.Thread.setPriority()  生效，不启用则无效。</li>
<li>-XX:SoftRefLRUPolicyMSPerMB=0：软引用对象在最后一次被访问后能存活 0 毫秒（JVM 默认为 1000 毫秒）。</li>
<li>-XX:TargetSurvivorRatio=90：允许 90%的 Survivor 区被占用（JVM 默认为 50%）。提高对于 Survivor 区的使用率。</li>
</ul>
<h3 id="辅助信息参数设置"><a href="#辅助信息参数设置" class="headerlink" title="辅助信息参数设置"></a>辅助信息参数设置</h3><ul>
<li>-XX:-CITime：打印消耗在 JIT 编译的时间。</li>
<li>-XX:ErrorFile=./hs_err_pid.log：保存错误日志或数据到指定文件中。</li>
<li>-XX:HeapDumpPath=./java_pid.hprof：指定 Dump 堆内存时的路径。</li>
<li>-XX:-HeapDumpOnOutOfMemoryError：当首次遭遇内存溢出时 Dump 出此时的堆内存。</li>
<li>-XX:OnError=”;”：出现致命 ERROR 后运行自定义命令。</li>
<li>-XX:OnOutOfMemoryError=”;”：当首次遭遇内存溢出时执行自定义命令。</li>
<li>-XX:-PrintClassHistogram：按下 Ctrl+Break 后打印堆内存中类实例的柱状信息，同 JDK 的 jmap -histo 命令。</li>
<li>-XX:-PrintConcurrentLocks：按下 Ctrl+Break 后打印线程栈中并发锁的相关信息，同 JDK 的 jstack -l 命令。</li>
<li>-XX:-PrintCompilation：当一个方法被编译时打印相关信息。</li>
<li>-XX:-PrintGC：每次 GC 时打印相关信息。</li>
<li>-XX:-PrintGCDetails：每次 GC 时打印详细信息。</li>
<li>-XX:-PrintGCTimeStamps：打印每次 GC 的时间戳。</li>
<li>-XX:-TraceClassLoading：跟踪类的加载信息。</li>
<li>-XX:-TraceClassLoadingPreorder：跟踪被引用到的所有类的加载信息。</li>
<li>-XX:-TraceClassResolution：跟踪常量池。</li>
<li>-XX:-TraceClassUnloading：跟踪类的卸载信息。</li>
</ul>
<h3 id="关于参数名称等"><a href="#关于参数名称等" class="headerlink" title="关于参数名称等"></a>关于参数名称等</h3><ul>
<li>标准参数（-），所有 JVM 都必须支持这些参数的功能，而且向后兼容；例如：</li>
<li>-client——设置 JVM 使用 Client 模式，特点是启动速度比较快，但运行时性能和内存管理效率不高，通常用于客户端应用程序或开发调试；在 32 位环境下直接运行 Java 程序默认启用该模式。</li>
<li>-server——设置 JVM 使 Server 模式，特点是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境。在具有 64 位能力的 JDK 环境下默认启用该模式。</li>
<li>非标准参数（-X），默认 JVM 实现这些参数的功能，但是并不保证所有 JVM 实现都满足，且不保证向后兼容；</li>
<li>非稳定参数（-XX），此类参数各个 JVM 实现会有所不同，将来可能会不被支持，需要慎重使用；</li>
</ul>
<h2 id="JVM-服务参数调优实战"><a href="#JVM-服务参数调优实战" class="headerlink" title="JVM 服务参数调优实战"></a>JVM 服务参数调优实战</h2><h3 id="大型网站服务器案例"><a href="#大型网站服务器案例" class="headerlink" title="大型网站服务器案例"></a>大型网站服务器案例</h3><p>承受海量访问的动态 Web 应用<br>服务器配置：8 CPU, 8G MEM, JDK 1.6.X</p>
<p>参数方案：<br>-server -Xmx3550m -Xms3550m -Xmn1256m -Xss128k -XX:SurvivorRatio=6 -XX:MaxPermSize=256m -XX:ParallelGCThreads=8 -XX:MaxTenuringThreshold=0 -XX:+UseConcMarkSweepGC</p>
<p>调优说明：</p>
<ul>
<li>-Xmx 与 -Xms 相同以避免 JVM 反复重新申请内存。-Xmx 的大小约等于系统内存大小的一半，即充分利用系统资源，又给予系统安全运行的空间。</li>
<li>-Xmn1256m 设置年轻代大小为 1256MB。此值对系统性能影响较大，Sun 官方推荐配置年轻代大小为整个堆的 3/8。</li>
<li>-Xss128k 设置较小的线程栈以支持创建更多的线程，支持海量访问，并提升系统性能。</li>
<li>-XX:SurvivorRatio=6 设置年轻代中 Eden 区与 Survivor 区的比值。系统默认是 8，根据经验设置为 6，则 2 个 Survivor 区与 1 个 Eden 区的比值为 2:6，一个 Survivor 区占整个年轻代的 1/8。</li>
<li>-XX:ParallelGCThreads=8 配置并行收集器的线程数，即同时 8 个线程一起进行垃圾回收。此值一般配置为与 CPU 数目相等。</li>
<li>-XX:MaxTenuringThreshold=0 设置垃圾最大年龄（在年轻代的存活次数）。如果设置为 0 的话，则年轻代对象不经过 Survivor 区直接进入年老代。对于年老代比较多的应用，可以提高效 率；如果将此值设置为一个较大值，则年轻代对象会在 Survivor 区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概率。 根据被海量访问的动态 Web 应用之特点，其内存要么被缓存起来以减少直接访问 DB，要么被快速回收以支持高并发海量请求，因此其内存对象在年轻代存活多次 意义不大，可以直接进入年老代，根据实际应用效果，在这里设置此值为 0。</li>
<li>-XX:+UseConcMarkSweepGC 设置年老代为并发收集。CMS（ConcMarkSweepGC）收集的目标是尽量减少应用的暂停时间，减少 Full GC 发生的几率，利用和应用程序线程并发的垃圾回收线程来标记清除年老代内存，适用于应用中存在比较多的长生命周期对象的情况。</li>
</ul>
<h3 id="内部集成构建服务器案例"><a href="#内部集成构建服务器案例" class="headerlink" title="内部集成构建服务器案例"></a>内部集成构建服务器案例</h3><p>高性能数据处理的工具应用<br>服务器配置：1 CPU, 4G MEM, JDK 1.6.X</p>
<p>参数方案：<br>-server -XX:PermSize=196m -XX:MaxPermSize=196m -Xmn320m -Xms768m -Xmx1024m</p>
<p>调优说明：</p>
<ul>
<li>-XX:PermSize=196m -XX:MaxPermSize=196m 根据集成构建的特点，大规模的系统编译可能需要加载大量的 Java 类到内存中，所以预先分配好大量的持久代内存是高效和必要的。</li>
<li>-Xmn320m 遵循年轻代大小为整个堆的 3/8 原则。</li>
<li>-Xms768m -Xmx1024m 根据系统大致能够承受的堆内存大小设置即可。<br>在 64 位服务器上运行应用程序，构建执行时，用 jmap -heap 11540 命令观察 JVM 堆内存状况如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Attaching to process ID 11540, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 20.12-b01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio &#x3D; 40</span><br><span class="line">   MaxHeapFreeRatio &#x3D; 70</span><br><span class="line">   MaxHeapSize      &#x3D; 1073741824 (1024.0MB)</span><br><span class="line">   NewSize          &#x3D; 335544320 (320.0MB)</span><br><span class="line">   MaxNewSize       &#x3D; 335544320 (320.0MB)</span><br><span class="line">   OldSize          &#x3D; 5439488 (5.1875MB)</span><br><span class="line">   NewRatio         &#x3D; 2</span><br><span class="line">   SurvivorRatio    &#x3D; 8</span><br><span class="line">   PermSize         &#x3D; 205520896 (196.0MB)</span><br><span class="line">   MaxPermSize      &#x3D; 205520896 (196.0MB)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity &#x3D; 255852544 (244.0MB)</span><br><span class="line">   used     &#x3D; 101395504 (96.69828796386719MB)</span><br><span class="line">   free     &#x3D; 154457040 (147.3017120361328MB)</span><br><span class="line">   39.63044588683081% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity &#x3D; 34144256 (32.5625MB)</span><br><span class="line">   used     &#x3D; 33993968 (32.41917419433594MB)</span><br><span class="line">   free     &#x3D; 150288 (0.1433258056640625MB)</span><br><span class="line">   99.55984397492803% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity &#x3D; 39845888 (38.0MB)</span><br><span class="line">   used     &#x3D; 0 (0.0MB)</span><br><span class="line">   free     &#x3D; 39845888 (38.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation</span><br><span class="line">   capacity &#x3D; 469762048 (448.0MB)</span><br><span class="line">   used     &#x3D; 44347696 (42.29325866699219MB)</span><br><span class="line">   free     &#x3D; 425414352 (405.7067413330078MB)</span><br><span class="line">   9.440459523882184% used</span><br><span class="line">PS Perm Generation</span><br><span class="line">   capacity &#x3D; 205520896 (196.0MB)</span><br><span class="line">   used     &#x3D; 85169496 (81.22396087646484MB)</span><br><span class="line">   free     &#x3D; 120351400 (114.77603912353516MB)</span><br><span class="line">   41.440796365543285% used</span><br></pre></td></tr></table></figure>

<p>结果是比较健康的。</p>
<h2 id="JVM-Server-与-Client-运行模式"><a href="#JVM-Server-与-Client-运行模式" class="headerlink" title="JVM Server 与 Client 运行模式"></a>JVM Server 与 Client 运行模式</h2><p>JVM Server 模式与 client 模式启动，最主要的差别在于：-Server 模式启动时，速度较慢，但是一旦运行起来后，性能将会有很大的提升.原因是:</p>
<p>当虚拟机运行在-client 模式的时候,使用的是一个代号为 C1 的轻量级编译器, 而-server 模式启动的虚拟机采用相对重量级,代号为 C2 的编译器. C2 比 C1 编译器编译的相对彻底,,服务起来之后,性能更高.</p>
<p><code>Java -version</code> 可以直接查看出你使用的是 client 还是 server</p>
<p>Jvm client 代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Documents and Settings\Administrator&gt;java -version</span><br><span class="line">java version <span class="string">"1.6.0_21"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.6.0_21-b06)</span><br><span class="line">Java HotSpot(TM) Client VM (build 17.0-b16, mixed mode, sharing)</span><br></pre></td></tr></table></figure>

<p>Jvm server 代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kaifa02 ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.6.0_06"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.6.0_06-b02)</span><br><span class="line">Java HotSpot(TM) Server VM (build 10.0-b22, mixed mode)</span><br></pre></td></tr></table></figure>

<p>两种模式的切换可以通过更改配置(jvm.cfg 配置文件)来实现:<br>32 位的虚拟机在目录 JAVA_HOME/jre/lib/i386/jvm.cfg,</p>
<p>64 位的在 JAVA_HOME/jre/lib/amd64/jvm.cfg, 目前 64 位只支持 server 模式, 配置内容大致如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-server KNOWN</span><br><span class="line">-client KNOWN</span><br><span class="line">-hotspot ALIASED_TO -client</span><br><span class="line">-classic WARN</span><br><span class="line">-native ERROR</span><br><span class="line">-green ERROR</span><br></pre></td></tr></table></figure>

<p>一般只要变更 -server KNOWN 与 -client KNOWN 两个配置位置先后顺序即可,前提是 JAVA_HOME/jre/bin 目录下同时存在 server 与 client 两个文件夹,分别对应着各自的 jvm.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>编译安装nginx-1.10.1</title>
    <url>//2016/08/05/nginx.html</url>
    <content><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><!--
create time: 2016-08-03 20:03:05
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="nginx-1-8-不支持-tcp-转发"><a href="#nginx-1-8-不支持-tcp-转发" class="headerlink" title="nginx 1.8 不支持 tcp 转发"></a>nginx 1.8 不支持 tcp 转发</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --sbin-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx --conf-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf --pid-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid --with-http_ssl_module --with-pcre&#x3D;..&#x2F;pcre-4.4  --with-zlib&#x3D;..&#x2F;zlib-1.1.3</span><br></pre></td></tr></table></figure>

<h2 id="nginx-1-9-以后支持-tcp-转发"><a href="#nginx-1-9-以后支持-tcp-转发" class="headerlink" title="nginx 1.9 以后支持 tcp 转发"></a>nginx 1.9 以后支持 tcp 转发</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --sbin-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx --conf-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf --pid-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid --with-http_ssl_module --with-pcre&#x3D;..&#x2F;pcre-4.4  --with-zlib&#x3D;..&#x2F;zlib-1.1.3 --with-stream --with-stream_ssl_module --with-http_slice_module</span><br></pre></td></tr></table></figure>

<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p>
<h2 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h2><p><a href="https://nginx.org/en/docs/">https://nginx.org/en/docs/</a></p>
<h2 id="编译安装-nginx-1-10-1-tar-gz"><a href="#编译安装-nginx-1-10-1-tar-gz" class="headerlink" title="编译安装 nginx-1.10.1.tar.gz"></a>编译安装 nginx-1.10.1.tar.gz</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf automake libtool make</span><br><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h3 id="下载-nginx-1-10-1-tar-gz"><a href="#下载-nginx-1-10-1-tar-gz" class="headerlink" title="下载 nginx-1.10.1.tar.gz"></a>下载 nginx-1.10.1.tar.gz</h3><p><a href="https://nginx.org/download/nginx-1.10.1.tar.gz">https://nginx.org/download/nginx-1.10.1.tar.gz</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://nginx.org/download/nginx-1.10.1.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="下载-pcre-8-39"><a href="#下载-pcre-8-39" class="headerlink" title="下载 pcre-8.39"></a>下载 pcre-8.39</h3><p><a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/">ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.zip</span><br></pre></td></tr></table></figure>

<h3 id="下载-zlib-1-2-8"><a href="#下载-zlib-1-2-8" class="headerlink" title="下载 zlib-1.2.8"></a>下载 zlib-1.2.8</h3><p><a href="https://zlib.net/fossils/">https://zlib.net/fossils/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://zlib.net/fossils/zlib-1.2.8.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="解压-nginx-pcre-zlib"><a href="#解压-nginx-pcre-zlib" class="headerlink" title="解压 nginx pcre zlib"></a>解压 nginx pcre zlib</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.10.1.tar.gz</span><br><span class="line">unzip pcre-8.39.zip</span><br><span class="line">tar -xvf zlib-1.2.8.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="configuration-nginx"><a href="#configuration-nginx" class="headerlink" title="configuration nginx"></a>configuration nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd nginx-1.10.1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --sbin-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx --conf-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf --pid-path&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;pid&#x2F;nginx.pid --with-http_ssl_module --with-pcre&#x3D;..&#x2F;pcre-8.39 --with-zlib&#x3D;..&#x2F;zlib-1.2.8 --with-stream --with-stream_ssl_module --with-http_slice_module --with-http_stub_status_module --with-http_gzip_static_module  --with-http_flv_module --with-http_mp4_module</span><br></pre></td></tr></table></figure>

<p>另编译参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--prefix&#x3D;&#x2F;etc&#x2F;nginx&#x2F; --sbin-path&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx --conf-path&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf --error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log --http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log --pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.pid --lock-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx.lock --user&#x3D;nginx --group&#x3D;nginx --with-http_flv_module --with-http_mp4_module --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-file-aio --with-ipv6 --with-cc-opt&#x3D;&#39;-O2 -g -m64 -mtune&#x3D;generic&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">说明：开启tcp转发模块等功能</span><br><span class="line">--with-stream --with-stream_ssl_module --with-http_slice_module</span><br><span class="line"></span><br><span class="line">Nginx中的stub_status模块主要用于查看Nginx的一些状态信息</span><br><span class="line">--with-http_stub_status_module</span><br></pre></td></tr></table></figure>

<h3 id="After-configuration-nginx-is-compiled-and-installed-using-make"><a href="#After-configuration-nginx-is-compiled-and-installed-using-make" class="headerlink" title="After configuration, nginx is compiled and installed using make"></a>After configuration, nginx is compiled and installed using <code>make</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<h3 id="after-make-using-make-install-install"><a href="#after-make-using-make-install-install" class="headerlink" title="after make,using make install install"></a>after <code>make</code>,using <code>make install</code> install</h3><p>安装 nginx 到指定目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>

<h3 id="s-reload"><a href="#s-reload" class="headerlink" title="-s reload"></a>-s reload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload 热重启</span><br></pre></td></tr></table></figure>

<h2 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h2><p><a href="https://segmentfault.com/a/1190000002797606">https://segmentfault.com/a/1190000002797606</a></p>
<p>nginx-location-rewrite</p>
<p><a href="https://seanlook.com/2015/05/17/nginx-location-rewrite/">https://seanlook.com/2015/05/17/nginx-location-rewrite/</a></p>
<p>keepalive</p>
<p><a href="https://seanlook.com/2015/05/18/nginx-keepalived-ha/">https://seanlook.com/2015/05/18/nginx-keepalived-ha/</a></p>
<p>nginx-ssl</p>
<p><a href="https://seanlook.com/2015/05/28/nginx-ssl/">https://seanlook.com/2015/05/28/nginx-ssl/</a></p>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>一个示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location  &#x3D; &#x2F; &#123;</span><br><span class="line">  # 精确匹配 &#x2F; ，主机名后面不能带任何字符串</span><br><span class="line">  [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location  &#x2F; &#123;</span><br><span class="line">  # 因为所有的地址都以 &#x2F; 开头，所以这条规则将匹配到所有请求</span><br><span class="line">  # 但是正则和最长字符串会优先匹配</span><br><span class="line">  [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;documents&#x2F; &#123;</span><br><span class="line">  # 匹配任何以 &#x2F;documents&#x2F; 开头的地址，匹配符合以后，还要继续往下搜索</span><br><span class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br><span class="line">  [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ &#x2F;documents&#x2F;Abc &#123;</span><br><span class="line">  # 匹配任何以 &#x2F;documents&#x2F; 开头的地址，匹配符合以后，还要继续往下搜索</span><br><span class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br><span class="line">  [ configuration CC ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ &#x2F;images&#x2F; &#123;</span><br><span class="line">  # 匹配任何以 &#x2F;images&#x2F; 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span><br><span class="line">  [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">  # 匹配所有以 gif,jpg或jpeg 结尾的请求</span><br><span class="line">  # 然而，所有请求 &#x2F;images&#x2F; 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span><br><span class="line">  [ configuration E ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;images&#x2F; &#123;</span><br><span class="line">  # 字符匹配到 &#x2F;images&#x2F;，继续往下，会发现 ^~ 存在</span><br><span class="line">  [ configuration F ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;images&#x2F;abc &#123;</span><br><span class="line">  # 最长字符匹配到 &#x2F;images&#x2F;abc，继续往下，会发现 ^~ 存在</span><br><span class="line">  # F与G的放置顺序是没有关系的</span><br><span class="line">  [ configuration G ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ &#x2F;images&#x2F;abc&#x2F; &#123;</span><br><span class="line">  # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span><br><span class="line">    [ configuration H ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* &#x2F;js&#x2F;.*&#x2F;\.js&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* favicon.ico &#123;</span><br><span class="line">    log_not_found off;</span><br><span class="line">    access_log off;</span><br><span class="line">    root html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>已=开头表示精确匹配</li>
<li>如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</li>
<li>^~ 开头表示 uri 以某个常规字符串开头，不是正则匹配</li>
<li>~ 开头表示区分大小写的正则匹配;</li>
<li>~* 开头表示不区分大小写的正则匹配</li>
<li>/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li>
</ul>
<p>顺序 no 优先级：</p>
<p>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location <del>,</del>* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p>
<p>上面的匹配结果<br>按照上面的 location 写法，以下的匹配示例成立：</p>
<ul>
<li>/ -&gt; config A<br>精确完全匹配，即使/index.html 也匹配不了</li>
<li>/downloads/download.html -&gt; config B<br>匹配 B 以后，往下没有任何匹配，采用 B</li>
<li>/images/1.gif -&gt; configuration D<br>匹配到 F，往下匹配到 D，停止往下</li>
<li>/images/abc/def -&gt; config D<br>最长匹配到 G，往下匹配 D，停止往下<br>你可以看到 任何以/images/开头的都会匹配到 D 并停止，FG 写在这里是没有任何意义的，H 是永远轮不到的，这里只是为了说明匹配顺序</li>
<li>/documents/document.html -&gt; config C<br>匹配到 C，往下没有任何匹配，采用 C</li>
<li>/documents/1.jpg -&gt; configuration E<br>匹配到 C，往下正则匹配到 E</li>
<li>/documents/Abc.jpg -&gt; config CC<br>最长匹配到 C，往下正则顺序匹配到 CC，不会往下到 E</li>
</ul>
<h3 id="实际使用建议"><a href="#实际使用建议" class="headerlink" title="实际使用建议"></a>实际使用建议</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以实际使用中，个人觉得至少有三个匹配规则定义，如下：</span><br><span class="line">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span><br><span class="line">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class="line"># 第一个必选规则</span><br><span class="line">location &#x3D; &#x2F; &#123;</span><br><span class="line">    proxy_pass https:&#x2F;&#x2F;tomcat:8080&#x2F;index</span><br><span class="line">&#125;</span><br><span class="line"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span><br><span class="line"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span><br><span class="line">location ^~ &#x2F;static&#x2F; &#123;</span><br><span class="line">    root &#x2F;webroot&#x2F;static&#x2F;;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line">    root &#x2F;webroot&#x2F;res&#x2F;;</span><br><span class="line">&#125;</span><br><span class="line">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class="line">#非静态文件请求就默认是动态请求，自己根据实际把握</span><br><span class="line">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    proxy_pass https:&#x2F;&#x2F;tomcat:8080&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://tengine.taobao.org/book/chapter_02.html">https://tengine.taobao.org/book/chapter_02.html</a><br><a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html">https://nginx.org/en/docs/http/ngx_http_rewrite_module.html</a></p>
<h3 id="Rewrite-规则"><a href="#Rewrite-规则" class="headerlink" title="Rewrite 规则"></a>Rewrite 规则</h3><p>rewrite 功能就是，使用 nginx 提供的全局变量或自己设置的变量，结合正则表达式和标志位实现 url 重写以及重定向。rewrite 只能放在 server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <code>https://seanlook.com/a/we/index.php?id=1&amp;u=str</code> 只对/a/we/index.php 重写。语法<code>rewrite regex replacement [flag]</code>;</p>
<p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用 proxy_pass 反向代理。</p>
<p>表明看 rewrite 和 location 功能有点像，都能实现跳转，主要区别在于 rewrite 是在同一域名内更改获取资源的路径，而 location 是对一类路径做控制访问或反向代理，可以 proxy_pass 到其他机器。很多情况下 rewrite 也会写在 location 里，它们的执行顺序是：</p>
<ol>
<li>执行 server 块的 rewrite 指令</li>
<li>执行 location 匹配</li>
<li>执行选定的 location 中的 rewrite 指令</li>
</ol>
<p>如果其中某步 URI 被重写，则重新循环执行 1-3，直到找到真实存在的文件；循环超过 10 次，则返回 500 Internal Server Error 错误。</p>
<h4 id="flag-标志位"><a href="#flag-标志位" class="headerlink" title="flag 标志位"></a>flag 标志位</h4><ul>
<li><code>last</code> : 相当于 Apache 的[L]标记，表示完成 rewrite</li>
<li><code>break</code> : 停止执行当前虚拟主机的后续 rewrite 指令集</li>
<li><code>redirect</code> : 返回 302 临时重定向，地址栏会显示跳转后的地址</li>
<li><code>permanent</code> : 返回 301 永久重定向，地址栏会显示跳转后的地址</li>
</ul>
<p>因为 301 和 302 不能简单的只返回状态码，还必须有重定向的 URL，这就是 return 指令无法返回 301,302 的原因了。这里 last 和 break 区别有点难以理解：</p>
<ol>
<li>last 一般写在 server 和 if 中，而 break 一般使用在 location 中</li>
<li>last 不终止重写后的 url 匹配，即新的 url 会再从 server 走一遍匹配流程，而 break 终止重写后的匹配</li>
<li>break 和 last 都能组织继续执行后面的 rewrite 指令</li>
</ol>
<h3 id="if-指令与全局变量"><a href="#if-指令与全局变量" class="headerlink" title="if 指令与全局变量"></a>if 指令与全局变量</h3><h4 id="if-判断指令"><a href="#if-判断指令" class="headerlink" title="if 判断指令"></a>if 判断指令</h4><p>语法为<code>if(condition){...}</code>，对给定的条件 condition 进行判断。如果为真，大括号内的 rewrite 指令将被执行，if 条件(conditon)可以是如下任何内容：</p>
<ul>
<li><p>当表达式只是一个变量时，如果值为空或任何以 0 开头的字符串都会当做 false</p>
</li>
<li><p>直接比较变量和内容时，使用<code>=</code>或<code>!=</code></p>
</li>
<li><p><code>~</code>正则表达式匹配，<code>~*</code>不区分大小写的匹配，<code>!~</code>区分大小写的不匹配</p>
</li>
<li><p><code>-f</code>和<code>!-f</code>用来判断是否存在文件</p>
</li>
<li><p><code>-d</code>和<code>!-d</code>用来判断是否存在目录</p>
</li>
<li><p><code>-e</code>和<code>!-e</code>用来判断是否存在文件或目录</p>
</li>
<li><p><code>-x</code>和<code>!-x</code>用来判断文件是否可执行</p>
</li>
</ul>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ &#x2F;msie&#x2F;$1 break;</span><br><span class="line">&#125; &#x2F;&#x2F;如果UA包含&quot;MSIE&quot;，rewrite请求到&#x2F;msid&#x2F;目录下</span><br><span class="line"></span><br><span class="line">if ($http_cookie ~* &quot;id&#x3D;([^;]+)(?:;|$)&quot;) &#123;</span><br><span class="line">    set $id $1;</span><br><span class="line"> &#125; &#x2F;&#x2F;如果cookie匹配正则，设置变量$id等于正则引用部分</span><br><span class="line"></span><br><span class="line">if ($request_method &#x3D; POST) &#123;</span><br><span class="line">    return 405;</span><br><span class="line">&#125; &#x2F;&#x2F;如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span><br><span class="line"></span><br><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">&#125; &#x2F;&#x2F;限速，$slow可以通过 set 指令设置</span><br><span class="line"></span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">    break;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">&#125; &#x2F;&#x2F;如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</span><br><span class="line"></span><br><span class="line">if ($args ~ post&#x3D;140)&#123;</span><br><span class="line">    rewrite ^ https:&#x2F;&#x2F;example.com&#x2F; permanent;</span><br><span class="line">&#125; &#x2F;&#x2F;如果query string中包含&quot;post&#x3D;140&quot;，永久重定向到example.com</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123;</span><br><span class="line">    valid_referers none blocked www.jefflei.com www.leizhenfang.com;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125; &#x2F;&#x2F;防盗链</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>下面是可以用作 if 判断的全局变量</p>
<ul>
<li><code>$args</code> ： #这个变量等于请求行中的参数，同$query_string</li>
<li><code>$content_length</code> ： 请求头中的 Content-length 字段。</li>
<li><code>$content_type</code> ： 请求头中的 Content-Type 字段。</li>
<li><code>$document_root</code> ： 当前请求在 root 指令中指定的值。</li>
<li><code>$host</code> ： 请求主机头字段，否则为服务器名称。</li>
<li><code>$http_user_agent</code> ： 客户端 agent 信息</li>
<li><code>$http_cookie</code> ： 客户端 cookie 信息</li>
<li><code>$limit_rate</code> ： 这个变量可以限制连接速率。</li>
<li><code>$request_method</code> ： 客户端请求的动作，通常为 GET 或 POST。</li>
<li><code>$remote_addr</code> ： 客户端的 IP 地址。</li>
<li><code>$remote_port</code> ： 客户端的端口。</li>
<li><code>$remote_user</code> ： 已经经过 Auth Basic Module 验证的用户名。</li>
<li><code>$request_filename</code> ： 当前请求的文件路径，由 root 或 alias 指令与 URI 请求生成。</li>
<li><code>$scheme</code> ： HTTP 方法（如 http，https）。</li>
<li><code>$server_protocol</code> ： 请求使用的协议，通常是 HTTP/1.0 或 HTTP/1.1。</li>
<li><code>$server_addr</code> ： 服务器地址，在完成一次系统调用后可以确定这个值。</li>
<li><code>$server_name</code> ： 服务器名称。</li>
<li><code>$server_port</code> ： 请求到达服务器的端口号。</li>
<li><code>$request_uri</code> ： 包含请求参数的原始 URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</li>
<li><code>$uri</code> ： 不带请求参数的当前 URI，$uri 不包含主机名，如”/foo/bar.html”。</li>
<li><code>$document_uri</code> ： 与$uri 相同。</li>
</ul>
<p>例：<code>https://localhost:88/test1/test2/test.php</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$host：localhost</span><br><span class="line">$server_port：88</span><br><span class="line">$request_uri：https:&#x2F;&#x2F;localhost:88&#x2F;test1&#x2F;test2&#x2F;test.php</span><br><span class="line">$document_uri：&#x2F;test1&#x2F;test2&#x2F;test.php</span><br><span class="line">$document_root：&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">$request_filename：&#x2F;var&#x2F;www&#x2F;html&#x2F;test1&#x2F;test2&#x2F;test.php</span><br></pre></td></tr></table></figure>

<h4 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h4><ul>
<li><code>.</code> ： 匹配除换行符以外的任意字符</li>
<li><code>?</code> ： 重复 0 次或 1 次</li>
<li><code>+</code> ： 重复 1 次或更多次</li>
<li><code>*</code> ： 重复 0 次或更多次</li>
<li><code>\d</code> ：匹配数字</li>
<li><code>^</code> ： 匹配字符串的开始</li>
<li><code>$</code> ： 匹配字符串的介绍</li>
<li><code>{n}</code> ： 重复 n 次</li>
<li><code>{n,}</code> ： 重复 n 次或更多次</li>
<li><code>[c]</code> ： 匹配单个字符 c</li>
<li><code>[a-z]</code> ： 匹配 a-z 小写字母的任意一个</li>
</ul>
<p>小括号()之间匹配的内容，可以在后面通过$1来引用，$2 表示的是前面第二个()里的内容。正则里面容易让人困惑的是\转义特殊字符。</p>
<h3 id="rewrite-实例"><a href="#rewrite-实例" class="headerlink" title="rewrite 实例"></a>rewrite 实例</h3><p>例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    # 定义image日志格式</span><br><span class="line">    log_format imagelog &#39;[$time_local] &#39; $image_file &#39; &#39; $image_type &#39; &#39; $body_bytes_sent &#39; &#39; $status;</span><br><span class="line">    # 开启重写日志</span><br><span class="line">    rewrite_log on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        root &#x2F;home&#x2F;www;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                # 重写规则信息</span><br><span class="line">                error_log logs&#x2F;rewrite.log notice;</span><br><span class="line">                # 注意这里要用‘’单引号引起来，避免&#123;&#125;</span><br><span class="line">                rewrite &#39;^&#x2F;images&#x2F;([a-z]&#123;2&#125;)&#x2F;([a-z0-9]&#123;5&#125;)&#x2F;(.*)\.(png|jpg|gif)$&#39; &#x2F;data?file&#x3D;$3.$4;</span><br><span class="line">                # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</span><br><span class="line">                set $image_file $3;</span><br><span class="line">                set $image_type $4;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location &#x2F;data &#123;</span><br><span class="line">                # 指定针对图片的日志格式，来分析图片类型和大小</span><br><span class="line">                access_log logs&#x2F;images.log mian;</span><br><span class="line">                root &#x2F;data&#x2F;images;</span><br><span class="line">                # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</span><br><span class="line">                try_files &#x2F;$arg_file &#x2F;image404.html;</span><br><span class="line">        &#125;</span><br><span class="line">        location &#x3D; &#x2F;image404.html &#123;</span><br><span class="line">                # 图片不存在返回特定的信息</span><br><span class="line">                return 404 &quot;image not found\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对形如<code>/images/ef/uh7b3/test.png</code>的请求，重写到<code>/data?file=test.png</code>，于是匹配到<code>location /data</code>，先看<code>/data/images/test.png</code>文件存不存在，如果存在则正常响应，如果不存在则重写 tryfiles 到新的 image404 location，直接返回 404 状态码。</p>
<p>例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rewrite ^&#x2F;images&#x2F;(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ &#x2F;resizer&#x2F;$1.$4?width&#x3D;$2&amp;height&#x3D;$3? last;</span><br></pre></td></tr></table></figure>

<p>对形如<code>/images/bla_500x400.jpg</code>的文件请求，重写到<code>/resizer/bla.jpg?width=500&amp;height=400</code>地址，并会继续尝试匹配 location。</p>
<h2 id="log-format"><a href="#log-format" class="headerlink" title="log_format"></a>log_format</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>$remote_addr</td>
<td>客户端地址</td>
<td>211.28.65.253</td>
</tr>
<tr>
<td>$remote_user</td>
<td>客户端用户名称</td>
<td>–</td>
</tr>
<tr>
<td>$time_local</td>
<td>访问时间和时区</td>
<td>18/Jul/2012:17:00:01 +0800</td>
</tr>
<tr>
<td>$request</td>
<td>请求的 URI 和 HTTP 协议</td>
<td>“GET /article-10000.html HTTP/1.1”</td>
</tr>
<tr>
<td>$http_host</td>
<td>请求地址，即浏览器中你输入的地址（IP 或域名）</td>
<td><a href="https://www.duanzhaoqian.com">https://www.duanzhaoqian.com</a> 192.168.100.100</td>
</tr>
<tr>
<td>$status</td>
<td>HTTP 请求状态</td>
<td>200</td>
</tr>
<tr>
<td>$upstream_status</td>
<td>upstream 状态</td>
<td>200</td>
</tr>
<tr>
<td>$body_bytes_sent</td>
<td>发送给客户端文件内容大小</td>
<td>1547</td>
</tr>
<tr>
<td>$http_referer url</td>
<td>跳转来源</td>
<td><a href="https://www.baidu.com/">https://www.baidu.com/</a></td>
</tr>
<tr>
<td>$http_user_agent</td>
<td>用户终端浏览器等信息</td>
<td>“Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C;</td>
</tr>
<tr>
<td>$ssl_protocol</td>
<td>SSL 协议版本</td>
<td>TLSv1</td>
</tr>
<tr>
<td>$ssl_cipher</td>
<td>交换数据中的算法</td>
<td>RC4-SHA</td>
</tr>
<tr>
<td>$upstream_addr</td>
<td>后台 upstream 的地址，即真正提供服务的主机地址</td>
<td>10.10.10.100:80</td>
</tr>
<tr>
<td>$request_time</td>
<td>整个请求的总时间</td>
<td>0.205</td>
</tr>
<tr>
<td>$upstream_response_time</td>
<td>请求过程中，upstream 响应时间</td>
<td>0.002</td>
</tr>
</tbody></table>
<h2 id="nginx-ssl"><a href="#nginx-ssl" class="headerlink" title="nginx ssl"></a>nginx ssl</h2><p><a href="https://www.open-open.com/lib/view/open1433390156947.html">https://www.open-open.com/lib/view/open1433390156947.html</a></p>
<p><a href="https://www.oschina.net/question/12_10555">https://www.oschina.net/question/12_10555</a></p>
<p><a href="https://segmentfault.com/a/1190000002866627">https://segmentfault.com/a/1190000002866627</a></p>
<p>start ssl</p>
<p><a href="https://www.cnblogs.com/apanly/p/5585208.html">https://www.cnblogs.com/apanly/p/5585208.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>jekyll-liquid</title>
    <url>//2016/08/05/jekyll-liquid.html</url>
    <content><![CDATA[<h1 id="jekyll-liquid"><a href="#jekyll-liquid" class="headerlink" title="jekyll-liquid"></a>jekyll-liquid</h1><!--
create time: 2016-08-05 17:40:01
Author: <TODO: 请写上你的名字>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<p><a href="https://alfred-sun.github.io/blog/2015/01/10/jekyll-liquid-syntax-documentation/">liquid api 语法</a></p>
<h2 id="Raw（解决语法冲突）"><a href="#Raw（解决语法冲突）" class="headerlink" title="Raw（解决语法冲突）"></a>Raw（解决语法冲突）</h2><p>临时禁止执行 Jekyll Tag 命令，在生成的内容里存在冲突的语法片段的情况下很有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">去掉% &#125;间的空格</span><br><span class="line">&#123; % raw % &#125;</span><br><span class="line">  In Handlebars, &#123;&#123; this &#125;&#125; will be HTML-escaped, but &#123;&#123;&#123; that &#125;&#125;&#125; will not.</span><br><span class="line">&#123; % endraw % &#125;</span><br><span class="line"></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>jekyll</tag>
        <tag>liquid</tag>
      </tags>
  </entry>
  <entry>
    <title>cisco-asa-5520</title>
    <url>//2016/08/05/cisco-asa-5520.html</url>
    <content><![CDATA[<h1 id="2016-08-09-cisco-asa-5520"><a href="#2016-08-09-cisco-asa-5520" class="headerlink" title="2016-08-09-cisco-asa-5520"></a>2016-08-09-cisco-asa-5520</h1><!--
create time: 2016-08-09 09:54:04
Author: <TODO: 请写上你的名字>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="？"><a href="#？" class="headerlink" title="？"></a>？</h2><p>显示一级命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Type help or &#39;?&#39; for a list of available commands.</span><br><span class="line">yz5520&gt; ?</span><br><span class="line"></span><br><span class="line">  clear       Reset functions</span><br><span class="line">  enable      Turn on privileged commands</span><br><span class="line">  exit        Exit from the EXEC</span><br><span class="line">  help        Interactive help for commands</span><br><span class="line">  login       Log in as a particular user</span><br><span class="line">  logout      Exit from the EXEC</span><br><span class="line">  no          Negate a command or set its defaults</span><br><span class="line">  ping        Send echo messages</span><br><span class="line">  quit        Exit from the EXEC</span><br><span class="line">  show        Show running system information</span><br><span class="line">  traceroute  Trace route to destination</span><br><span class="line">yz5520&gt;</span><br></pre></td></tr></table></figure>

<h2 id="enable"><a href="#enable" class="headerlink" title="enable"></a>enable</h2><p>进入管理模式</p>
<h2 id="enable-password"><a href="#enable-password" class="headerlink" title="enable password"></a>enable password</h2><p>修改 enable 密码</p>
<h2 id="configure-terminal"><a href="#configure-terminal" class="headerlink" title="configure terminal"></a>configure terminal</h2><p>进入全局配置模式</p>
<h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p>默认用户是 pix<br>修改 ssh 密码</p>
<h2 id="show-run"><a href="#show-run" class="headerlink" title="show run"></a>show run</h2><p>查看配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">: Saved</span><br><span class="line">:</span><br><span class="line">ASA Version 8.2(1)</span><br><span class="line">!</span><br><span class="line">hostname yz5520</span><br><span class="line">domain-name ync365.com</span><br><span class="line">enable password *** encrypted</span><br><span class="line">passwd *** encrypted</span><br><span class="line">names</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0&#x2F;0</span><br><span class="line"> nameif outside</span><br><span class="line"> security-level 0</span><br><span class="line"> ip address 221.122.119.2 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0&#x2F;1</span><br><span class="line"> shutdown</span><br><span class="line"> no nameif</span><br><span class="line"> no security-level</span><br><span class="line"> no ip address</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0&#x2F;2</span><br><span class="line"> nameif inside2</span><br><span class="line"> security-level 100</span><br><span class="line"> ip address 30.0.1.254 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0&#x2F;3</span><br><span class="line"> nameif inside</span><br><span class="line"> security-level 100</span><br><span class="line"> ip address 20.0.1.254 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Management0&#x2F;0</span><br><span class="line"> shutdown</span><br><span class="line"> no nameif</span><br><span class="line"> no security-level</span><br><span class="line"> no ip address</span><br><span class="line">!</span><br><span class="line">ftp mode passive</span><br><span class="line">clock timezone CST 8</span><br><span class="line">dns server-group DefaultDNS</span><br><span class="line"> domain-name ync365.com</span><br><span class="line">access-list no-nat extended permit ip 20.0.1.0 255.255.255.0 172.17.2.0 255.255.255.0</span><br><span class="line">access-list no-nat extended permit ip 20.0.1.0 255.255.255.0 10.0.1.0 255.255.255.0</span><br><span class="line">access-list ync365-vpn_splitTunnelAd standard permit 20.0.1.0 255.255.255.0</span><br><span class="line">access-list out-in extended permit icmp any any</span><br><span class="line">access-list out-in extended permit tcp any host 221.122.119.6 eq www</span><br><span class="line">access-list out-in extended permit tcp any host 221.122.119.9 eq 11000</span><br><span class="line">access-list outside_1_cryptomap extended permit ip 20.0.1.0 255.255.255.0 10.0.1.0 255.255.255.0</span><br><span class="line">pager lines 24</span><br><span class="line">mtu outside 1500</span><br><span class="line">mtu inside 1500</span><br><span class="line">mtu inside2 1500</span><br><span class="line">ip local pool vpnpool 172.17.2.1-172.17.2.50 mask 255.255.255.0</span><br><span class="line">no failover</span><br><span class="line">icmp unreachable rate-limit 1 burst-size 1</span><br><span class="line">no asdm history enable</span><br><span class="line">arp timeout 14400</span><br><span class="line">nat-control</span><br><span class="line">global (outside) 1 interface</span><br><span class="line">nat (inside) 0 access-list no-nat</span><br><span class="line">nat (inside) 1 20.0.1.0 255.255.255.0</span><br><span class="line">static (inside,outside) tcp 221.122.119.6 www 20.0.1.91 www netmask 255.255.255.255</span><br><span class="line">static (inside,outside) tcp 221.122.119.9 11000 20.0.1.94 11000 netmask 255.255.255.255</span><br><span class="line">access-group out-in in interface outside</span><br><span class="line">route outside 0.0.0.0 0.0.0.0 221.122.119.1 1</span><br><span class="line">timeout xlate 3:00:00</span><br><span class="line">timeout conn 1:00:00 half-closed 0:10:00 udp 0:02:00 icmp 0:00:02</span><br><span class="line">timeout sunrpc 0:10:00 h323 0:05:00 h225 1:00:00 mgcp 0:05:00 mgcp-pat 0:05:00</span><br><span class="line">timeout sip 0:30:00 sip_media 0:02:00 sip-invite 0:03:00 sip-disconnect 0:02:00</span><br><span class="line">timeout sip-provisional-media 0:02:00 uauth 0:05:00 absolute</span><br><span class="line">timeout tcp-proxy-reassembly 0:01:00</span><br><span class="line">dynamic-access-policy-record DfltAccessPolicy</span><br><span class="line">snmp-server host inside 20.0.1.252 community public</span><br><span class="line">no snmp-server location</span><br><span class="line">no snmp-server contact</span><br><span class="line">snmp-server community *****</span><br><span class="line">snmp-server enable traps snmp authentication linkup linkdown coldstart</span><br><span class="line">snmp-server enable traps syslog</span><br><span class="line">crypto ipsec transform-set vpnset esp-3des esp-md5-hmac</span><br><span class="line">crypto ipsec transform-set ESP-3DES-SHA esp-3des esp-sha-hmac</span><br><span class="line">crypto ipsec security-association lifetime seconds 28800</span><br><span class="line">crypto ipsec security-association lifetime kilobytes 4608000</span><br><span class="line">crypto dynamic-map outside-dyn-map 10 set transform-set vpnset</span><br><span class="line">crypto dynamic-map outside-dyn-map 10 set security-association lifetime seconds 288000</span><br><span class="line">crypto dynamic-map outside-dyn-map 10 set reverse-route</span><br><span class="line">crypto map outside-map 1 match address outside_1_cryptomap</span><br><span class="line">crypto map outside-map 1 set peer 203.158.23.160</span><br><span class="line">crypto map outside-map 1 set transform-set ESP-3DES-SHA</span><br><span class="line">crypto map outside-map 10 ipsec-isakmp dynamic outside-dyn-map</span><br><span class="line">crypto map outside-map interface outside</span><br><span class="line">crypto isakmp enable outside</span><br><span class="line">crypto isakmp policy 1</span><br><span class="line"> authentication pre-share</span><br><span class="line"> encryption 3des</span><br><span class="line"> hash md5</span><br><span class="line"> group 2</span><br><span class="line"> lifetime 43200</span><br><span class="line">crypto isakmp policy 30</span><br><span class="line"> authentication pre-share</span><br><span class="line"> encryption 3des</span><br><span class="line"> hash sha</span><br><span class="line"> group 2</span><br><span class="line"> lifetime 86400</span><br><span class="line">telnet 0.0.0.0 0.0.0.0 inside</span><br><span class="line">telnet timeout 30</span><br><span class="line">ssh 0.0.0.0 0.0.0.0 inside</span><br><span class="line">ssh timeout 30</span><br><span class="line">ssh version 2</span><br><span class="line">console timeout 30</span><br><span class="line">threat-detection basic-threat</span><br><span class="line">threat-detection statistics access-list</span><br><span class="line">no threat-detection statistics tcp-intercept</span><br><span class="line">group-policy ync365-vpn internal</span><br><span class="line">group-policy ync365-vpn attributes</span><br><span class="line"> dns-server value 8.8.8.8</span><br><span class="line"> vpn-tunnel-protocol IPSec</span><br><span class="line"> split-tunnel-policy tunnelspecified</span><br><span class="line"> split-tunnel-network-list value ync365-vpn_splitTunnelAd</span><br><span class="line"> default-domain value ync365.com</span><br><span class="line">username duanzhaoqian password *** encrypted</span><br><span class="line">tunnel-group ync365-vpn type remote-access</span><br><span class="line">tunnel-group ync365-vpn general-attributes</span><br><span class="line"> address-pool vpnpool</span><br><span class="line"> default-group-policy ync365-vpn</span><br><span class="line">tunnel-group ync365-vpn ipsec-attributes</span><br><span class="line"> pre-shared-key *</span><br><span class="line">tunnel-group 203.158.23.160 type ipsec-l2l</span><br><span class="line">tunnel-group 203.158.23.160 ipsec-attributes</span><br><span class="line"> pre-shared-key *</span><br><span class="line">!</span><br><span class="line">class-map inspection_default</span><br><span class="line"> match default-inspection-traffic</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">policy-map type inspect dns preset_dns_map</span><br><span class="line"> parameters</span><br><span class="line">  message-length maximum 512</span><br><span class="line">  message-length maximum client auto</span><br><span class="line">policy-map global_policy</span><br><span class="line"> class inspection_default</span><br><span class="line">  inspect dns preset_dns_map</span><br><span class="line">  inspect ftp</span><br><span class="line">  inspect h323 h225</span><br><span class="line">  inspect h323 ras</span><br><span class="line">  inspect netbios</span><br><span class="line">  inspect rsh</span><br><span class="line">  inspect rtsp</span><br><span class="line">  inspect skinny</span><br><span class="line">  inspect esmtp</span><br><span class="line">  inspect sqlnet</span><br><span class="line">  inspect sunrpc</span><br><span class="line">  inspect tftp</span><br><span class="line">  inspect sip</span><br><span class="line">  inspect xdmcp</span><br><span class="line">!</span><br><span class="line">service-policy global_policy global</span><br><span class="line">prompt hostname context</span><br><span class="line">Cryptochecksum:0f024f9e9c7a7f6f8d7d476188a2ca3a</span><br><span class="line">: end</span><br></pre></td></tr></table></figure>

<p>查看局部配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yz5520(config)# show run access-list</span><br><span class="line">access-list no-nat extended permit ip 20.0.1.0 255.255.255.0 172.17.2.0 255.255.255.0</span><br><span class="line">access-list no-nat extended permit ip 20.0.1.0 255.255.255.0 10.0.1.0 255.255.255.0</span><br><span class="line">access-list ync365-vpn_splitTunnelAd standard permit 20.0.1.0 255.255.255.0</span><br><span class="line">access-list out-in extended permit icmp any any</span><br><span class="line">access-list out-in extended permit tcp any host 221.122.119.6 eq www</span><br><span class="line">access-list out-in extended permit tcp any host 221.122.119.9 eq 11000</span><br><span class="line">access-list outside_1_cryptomap extended permit ip 20.0.1.0 255.255.255.0 10.0.1.0 255.255.255.0</span><br><span class="line">yz5520(config)#</span><br></pre></td></tr></table></figure>

<h2 id="interface-GigabitEthernet0-1"><a href="#interface-GigabitEthernet0-1" class="headerlink" title="interface GigabitEthernet0/1"></a>interface GigabitEthernet0/1</h2><p>进入网卡配置模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yz5520(config)#  interface ?</span><br><span class="line"></span><br><span class="line">configure mode commands&#x2F;options:</span><br><span class="line">  GigabitEthernet  GigabitEthernet IEEE 802.3z</span><br><span class="line">  Management       Management interface</span><br><span class="line">  Redundant        Redundant Interface</span><br><span class="line">  &lt;cr&gt;</span><br><span class="line">yz5520(config)#  interface  GigabitEthernet0&#x2F;1</span><br><span class="line">yz5520(config-if)#</span><br></pre></td></tr></table></figure>

<h2 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h2><p>退出</p>
<h2 id="access-list"><a href="#access-list" class="headerlink" title="access-list"></a>access-list</h2><p>添加访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">access-list out-in extended permit tcp any host 221.122.119.9 eq 11000</span><br></pre></td></tr></table></figure>

<p>取消访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">no access-list out-in extended permit tcp any host 221.122.119.9 eq 11000</span><br></pre></td></tr></table></figure>

<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>添加映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static (inside,outside) tcp 221.122.119.9 11000 20.0.1.94 11000 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>

<p>取消映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">no static (inside,outside) tcp 221.122.119.9 11000 20.0.1.94 11000 netmask 255.255.255.255</span><br></pre></td></tr></table></figure>

<p>不同网段互相访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">access-list no-nat extended permit ip 20.0.1.0 255.255.255.0 10.0.1.0 255.255.255.0</span><br><span class="line">static (inside2,inside) 10.0.1.0 10.0.1.0 netmask 255.255.255.0</span><br></pre></td></tr></table></figure>

<p>VPN172 段访问 10、20 段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">access-list no-nat extended permit ip 20.0.1.0 255.255.255.0 172.17.2.0 255.255.255.0</span><br><span class="line">access-list no-nat extended permit ip 10.0.1.0 255.255.255.0 172.17.2.0 255.255.255.0</span><br><span class="line">nat (inside) 0 access-list no-nat</span><br><span class="line">nat (inside2) 0 access-list no-nat</span><br></pre></td></tr></table></figure>

<p>允许访问公网</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nat (inside) 1 20.0.1.0 255.255.255.0</span><br><span class="line">nat (inside2) 1 10.0.1.0 255.255.255.0</span><br></pre></td></tr></table></figure>

<h2 id="wirte"><a href="#wirte" class="headerlink" title="wirte"></a>wirte</h2><p>保存配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wirte memory</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yz5520(config)# write ?</span><br><span class="line"></span><br><span class="line">exec mode commands&#x2F;options:</span><br><span class="line">  erase     Clear flash memory configuration</span><br><span class="line">  memory    Save active configuration to the flash</span><br><span class="line">  net       Save the active configuration to the tftp server</span><br><span class="line">  standby   Save the active configuration on the active unit to the flash on</span><br><span class="line">            the standby unit</span><br><span class="line">  terminal  Display the current active configuration</span><br><span class="line">  &lt;cr&gt;</span><br><span class="line">yz5520(config)#</span><br></pre></td></tr></table></figure>

<h2 id="clear-configure"><a href="#clear-configure" class="headerlink" title="clear configure"></a>clear configure</h2><p>清除配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;清除VPN用户</span><br><span class="line">clear configure username duanzhaoqian</span><br></pre></td></tr></table></figure>

<h2 id="demo-config"><a href="#demo-config" class="headerlink" title="demo config"></a>demo config</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yz5520(config)# show run</span><br><span class="line">: Saved</span><br><span class="line">:</span><br><span class="line">ASA Version 8.2(1)</span><br><span class="line">!</span><br><span class="line">hostname yz5520</span><br><span class="line">domain-name ync365.com</span><br><span class="line">enable password *** encrypted</span><br><span class="line">passwd *** encrypted</span><br><span class="line">names</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0&#x2F;0</span><br><span class="line"> nameif outside</span><br><span class="line"> security-level 0</span><br><span class="line"> ip address 221.122.119.2 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0&#x2F;1</span><br><span class="line"> shutdown</span><br><span class="line"> no nameif</span><br><span class="line"> no security-level</span><br><span class="line"> no ip address</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0&#x2F;2</span><br><span class="line"> nameif inside2</span><br><span class="line"> security-level 100</span><br><span class="line"> ip address 10.0.1.254 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0&#x2F;3</span><br><span class="line"> nameif inside</span><br><span class="line"> security-level 100</span><br><span class="line"> ip address 20.0.1.254 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Management0&#x2F;0</span><br><span class="line"> shutdown</span><br><span class="line"> no nameif</span><br><span class="line"> no security-level</span><br><span class="line"> no ip address</span><br><span class="line">!</span><br><span class="line">ftp mode passive</span><br><span class="line">clock timezone CST 8</span><br><span class="line">dns server-group DefaultDNS</span><br><span class="line"> domain-name ync365.com</span><br><span class="line">same-security-traffic permit inter-interface</span><br><span class="line">access-list no-nat extended permit ip 20.0.1.0 255.255.255.0 172.17.2.0 255.255.255.0</span><br><span class="line">access-list no-nat extended permit ip 10.0.1.0 255.255.255.0 172.17.2.0 255.255.255.0</span><br><span class="line">access-list no-nat extended permit ip 20.0.1.0 255.255.255.0 10.0.1.0 255.255.255.0</span><br><span class="line">access-list ync365-vpn_splitTunnelAd standard permit 20.0.1.0 255.255.255.0</span><br><span class="line">access-list ync365-vpn_splitTunnelAd standard permit 10.0.1.0 255.255.255.0</span><br><span class="line">access-list out-in extended permit icmp any any</span><br><span class="line">access-list out-in extended permit tcp any host 221.122.119.6 eq www</span><br><span class="line">pager lines 24</span><br><span class="line">mtu outside 1500</span><br><span class="line">mtu inside 1500</span><br><span class="line">mtu inside2 1500</span><br><span class="line">ip local pool vpnpool 172.17.2.1-172.17.2.50 mask 255.255.255.0</span><br><span class="line">no failover</span><br><span class="line">icmp unreachable rate-limit 1 burst-size 1</span><br><span class="line">no asdm history enable</span><br><span class="line">arp timeout 14400</span><br><span class="line">nat-control</span><br><span class="line">global (outside) 1 interface</span><br><span class="line">nat (inside) 0 access-list no-nat</span><br><span class="line">nat (inside) 1 20.0.1.0 255.255.255.0</span><br><span class="line">nat (inside2) 0 access-list no-nat</span><br><span class="line">nat (inside2) 1 10.0.1.0 255.255.255.0</span><br><span class="line">static (inside,outside) tcp 221.122.119.6 www 20.0.1.91 www netmask 255.255.255.255</span><br><span class="line">static (inside2,inside) 10.0.1.0 10.0.1.0 netmask 255.255.255.0</span><br><span class="line">access-group out-in in interface outside</span><br><span class="line">route outside 0.0.0.0 0.0.0.0 221.122.119.1 1</span><br><span class="line">timeout xlate 3:00:00</span><br><span class="line">timeout conn 1:00:00 half-closed 0:10:00 udp 0:02:00 icmp 0:00:02</span><br><span class="line">timeout sunrpc 0:10:00 h323 0:05:00 h225 1:00:00 mgcp 0:05:00 mgcp-pat 0:05:00</span><br><span class="line">timeout sip 0:30:00 sip_media 0:02:00 sip-invite 0:03:00 sip-disconnect 0:02:00</span><br><span class="line">timeout sip-provisional-media 0:02:00 uauth 0:05:00 absolute</span><br><span class="line">timeout tcp-proxy-reassembly 0:01:00</span><br><span class="line">dynamic-access-policy-record DfltAccessPolicy</span><br><span class="line">snmp-server host inside 20.0.1.252 community public</span><br><span class="line">no snmp-server location</span><br><span class="line">no snmp-server contact</span><br><span class="line">snmp-server community *****</span><br><span class="line">snmp-server enable traps snmp authentication linkup linkdown coldstart</span><br><span class="line">snmp-server enable traps syslog</span><br><span class="line">crypto ipsec transform-set vpnset esp-3des esp-md5-hmac</span><br><span class="line">crypto ipsec transform-set ESP-3DES-SHA esp-3des esp-sha-hmac</span><br><span class="line">crypto ipsec security-association lifetime seconds 28800</span><br><span class="line">crypto ipsec security-association lifetime kilobytes 4608000</span><br><span class="line">crypto dynamic-map outside-dyn-map 10 set transform-set vpnset</span><br><span class="line">crypto dynamic-map outside-dyn-map 10 set security-association lifetime seconds 288000</span><br><span class="line">crypto dynamic-map outside-dyn-map 10 set reverse-route</span><br><span class="line">crypto map outside-map 1 set peer 203.158.23.160</span><br><span class="line">crypto map outside-map 1 set transform-set ESP-3DES-SHA</span><br><span class="line">crypto map outside-map 10 ipsec-isakmp dynamic outside-dyn-map</span><br><span class="line">crypto map outside-map interface outside</span><br><span class="line">crypto isakmp enable outside</span><br><span class="line">crypto isakmp policy 1</span><br><span class="line"> authentication pre-share</span><br><span class="line"> encryption 3des</span><br><span class="line"> hash md5</span><br><span class="line"> group 2</span><br><span class="line"> lifetime 43200</span><br><span class="line">crypto isakmp policy 30</span><br><span class="line"> authentication pre-share</span><br><span class="line"> encryption 3des</span><br><span class="line"> hash sha</span><br><span class="line"> group 2</span><br><span class="line"> lifetime 86400</span><br><span class="line">telnet 0.0.0.0 0.0.0.0 inside</span><br><span class="line">telnet timeout 30</span><br><span class="line">ssh 0.0.0.0 0.0.0.0 inside</span><br><span class="line">ssh timeout 30</span><br><span class="line">ssh version 2</span><br><span class="line">console timeout 30</span><br><span class="line">threat-detection basic-threat</span><br><span class="line">threat-detection statistics access-list</span><br><span class="line">no threat-detection statistics tcp-intercept</span><br><span class="line">group-policy ync365-vpn internal</span><br><span class="line">group-policy ync365-vpn attributes</span><br><span class="line"> dns-server value 8.8.8.8</span><br><span class="line"> vpn-tunnel-protocol IPSec</span><br><span class="line"> split-tunnel-policy tunnelspecified</span><br><span class="line"> split-tunnel-network-list value ync365-vpn_splitTunnelAd</span><br><span class="line"> default-domain value ync365.com</span><br><span class="line">username duanzq password *** encrypted</span><br><span class="line">username duanzhaoqian password *** encrypted</span><br><span class="line">tunnel-group ync365-vpn type remote-access</span><br><span class="line">tunnel-group ync365-vpn general-attributes</span><br><span class="line"> address-pool vpnpool</span><br><span class="line"> default-group-policy ync365-vpn</span><br><span class="line">tunnel-group ync365-vpn ipsec-attributes</span><br><span class="line"> pre-shared-key *</span><br><span class="line">tunnel-group 203.158.23.160 type ipsec-l2l</span><br><span class="line">tunnel-group 203.158.23.160 ipsec-attributes</span><br><span class="line"> pre-shared-key *</span><br><span class="line">!</span><br><span class="line">class-map inspection_default</span><br><span class="line"> match default-inspection-traffic</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">policy-map type inspect dns preset_dns_map</span><br><span class="line"> parameters</span><br><span class="line">  message-length maximum 512</span><br><span class="line">  message-length maximum client auto</span><br><span class="line">policy-map global_policy</span><br><span class="line"> class inspection_default</span><br><span class="line">  inspect dns preset_dns_map</span><br><span class="line">  inspect ftp</span><br><span class="line">  inspect h323 h225</span><br><span class="line">  inspect h323 ras</span><br><span class="line">  inspect netbios</span><br><span class="line">  inspect rsh</span><br><span class="line">  inspect rtsp</span><br><span class="line">  inspect skinny</span><br><span class="line">  inspect esmtp</span><br><span class="line">  inspect sqlnet</span><br><span class="line">  inspect sunrpc</span><br><span class="line">  inspect tftp</span><br><span class="line">  inspect sip</span><br><span class="line">  inspect xdmcp</span><br><span class="line">!</span><br><span class="line">service-policy global_policy global</span><br><span class="line">prompt hostname context</span><br><span class="line">Cryptochecksum:644e75a9d106b532653c38ae902181eb</span><br><span class="line">: end</span><br><span class="line">yz5520(config)#</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac SIP</title>
    <url>//2016/08/04/Mac.html</url>
    <content><![CDATA[<h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1><p>Turning Off Rootless System Integrity Protection in OS X El Capitan 10.11 +<br>Again, the vast majority of Mac users should not disable rootless. Disabling rootless is aimed exclusively at advanced Mac users. Do so at your own risk, this is not specifically recommended.</p>
<p>1 Reboot the Mac and hold down Command + R keys simultaneously after you hear the startup chime, this will boot OS X into Recovery Mode<br>2 When the “OS X Utilities” screen appears, pull down the ‘Utilities’ menu at the top of the screen instead, and choose “Terminal”<br>3 Type the following command into the terminal then hit return:<br>csrutil disable; reboot</p>
<p>4 You’ll see a message saying that System Integrity Protection has been disabled and the Mac needs to restart for changes to take effect, and the Mac will then reboot itself automatically, just let it boot up as normal</p>
<pre><code>You can also issue the command by itself without the automatic reboot like so:

csrutil disable

By the way, if you’re interested in disabling rootless, you may also want to disable Gatekeeper while you’re in the command line too.

If you plan on doing something else in the Terminal or OS X Utilities screen you may want to leave off the auto-reboot command at the end, and yes, in case you were wondering, this is the same recovery mode used to reinstall OS X with Internet Recovery.

Once the Mac boots up again, System Integrity Protection will be disabled entirely in OS X.

Checking the Status of Rootless / System Integrity Protection in OS X
If you want to know the status of rootless before rebooting or without rebooting the Mac into recovery mode, just issue the following command into the Terminal:

csrutil status

You’ll either see one of two messages, enabled indi:

$ csrutil status
System Integrity Protection status: enabled.

or

$ csrutil status
System Integrity Protection status: disabled

If at any time you wish to change the status of rootless, another reboot into Recovery Mode is required.

How to Re-Enable Rootless System Integrity Protection in OS X
Simply reboot the Mac again into Recovery Mode as directed above, but at the command line use the following syntax instead:

csrutil enable

Just as before, a reboot of the Mac is required for changes to take effect.

As previously stated, the vast majority of Mac users should leave rootless enabled and embrace System Integrity Protection, as most OS X users have no business in the system level directories anyway. Adjusting this feature is really aimed at advanced Mac users, whether IT, sysadmins, network administrators, developers, tinkerers, security operations, and other related highly technical fields.</code></pre><p>SIP INFO<br>System Integrity Protection restricts the root account and limits the actions that the root user can perform on protected parts of OS X.</p>
<p>Paths and applications protected by System Integrity Protection include:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;System</span><br><span class="line">&#x2F;usr</span><br><span class="line">&#x2F;bin</span><br><span class="line">&#x2F;sbin</span><br></pre></td></tr></table></figure>

<p>Apps that are pre-installed with OS X<br>Paths and applications that third-party apps and installers can write to include:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Applications</span><br><span class="line">&#x2F;Library</span><br><span class="line">&#x2F;usr&#x2F;local</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>SIP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装jekyll</title>
    <url>//2016/08/04/github_pages_jekyll.html</url>
    <content><![CDATA[<h2 id="jekyll-themes"><a href="#jekyll-themes" class="headerlink" title="jekyll themes"></a>jekyll themes</h2><p><a href="https://jekyllthemes.org/">https://jekyllthemes.org/</a></p>
<h2 id="Mac-安装-jekyll"><a href="#Mac-安装-jekyll" class="headerlink" title="Mac 安装 jekyll"></a>Mac 安装 jekyll</h2><blockquote>
<p>“jekyll 是一款简单的博客系统，静态网站生成器。”</p>
</blockquote>
<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>jekyll 是一款简单的博客系统，静态网站生成器。她有一个模版目录，存放整个静态网站的模版文件，可以通过<a href="https://github.com/shopify/liquid/wiki" title="Liquid">Liquid</a>处理模版文件，把使用标记语言<a href="https://en.wikipedia.org/wiki/Textile" title="Textile">Textile</a>或<a href="https://en.wikipedia.org/wiki/Markdown" title="Markdown">Markdown</a>编写的内容文件，按照模版格式，转换成最终的静态网站页面。大名鼎鼎的 GitHub Pages 就是通过它实现的。搭建好我们的博客系统之后，我们还可以把它放到 github 的 pages 上进行展示。</p>
<h3 id="2-安装-Homebrew"><a href="#2-安装-Homebrew" class="headerlink" title="2. 安装 Homebrew"></a>2. 安装 Homebrew</h3><p>使用 Mac 的程序员必不可少的一步便是安装 Homebrew，他就像是 centOS 的<code>yum</code>命令和 ubuntu 的<code>apt-get</code>命令一样，通过<code>brew</code>命令，我们可以快速的安装一些软件包。<br>使用命令行安装 Homebrew 的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;mxcl&#x2F;homebrew&#x2F;go)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="3-安装最新版-ruby"><a href="#3-安装最新版-ruby" class="headerlink" title="3. 安装最新版 ruby"></a>3. 安装最新版 ruby</h3><p>Homebrew 安装完成之后，使用它来安装最新版本的 ruby，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install ruby</span><br></pre></td></tr></table></figure>

<p>安装完成之后，会提示安装好的 ruby 目录为<code>/usr/local/Cellar/ruby/2.2.0</code>,我用的 shell 为 zsh，所以想要最新安装的 ruby 生效，需要将<code>~/.zshrc</code>配置文件中的环境变量<code>PATH</code>中添加上新版本 ruby 的目录，在<code>PATH</code>后添加上 ruby 安装目录的<code>bin</code>文件夹，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;ruby&#x2F;2.2.0&#x2F;bin&quot;</span><br></pre></td></tr></table></figure>

<p>然后输入命令<code>source ~/.zshrc</code>，再使用 ruby 就是最新版本了。</p>
<p>输入命令<code>ruby --version</code>查看 ruby 版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ruby 2.2.0p0 (2014-12-25 revision 49005) [x86_64-darwin14]</span><br></pre></td></tr></table></figure>

<p>如果，版本不对，就使用命令<code>echo $PATH</code>查看最新版本的 ruby 目录是否在环境变量<code>PATH</code>中，如果不对，就按照上述过程修改环境变量<code>PATH</code>。</p>
<h3 id="4-安装-jkeyll"><a href="#4-安装-jkeyll" class="headerlink" title="4. 安装 jkeyll"></a>4. 安装 jkeyll</h3><p>安装最新版本的 jekyll，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install jekyll</span><br></pre></td></tr></table></figure>

<p>因为我们将会使用 Markdown 语言作为标记语言，所以还需要安装 kramdown，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install kramdown</span><br></pre></td></tr></table></figure>

<p>至此，本机的 jekyll 运行环境就已经搭建好了</p>
<h3 id="5-运行例子"><a href="#5-运行例子" class="headerlink" title="5. 运行例子"></a>5. 运行例子</h3><p>安装好之后，就可以自己构建一个博客系统，或者也可以到<a href="https://jekyllthemes.org/" title="jekyll 模板网站">jekyll 模板网站</a> 下载自己喜欢的模板进行修改，然后运行并查看效果，要运行 jekyll 首先要进入博客的根目录，然后运行命令<code>jekyll server</code>，最后会显示启动信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Server address: http:&#x2F;&#x2F;127.0.0.1:4000&#x2F;</span><br><span class="line">Server running... press ctrl-c to stop.</span><br></pre></td></tr></table></figure>

<p>说明程序已经成功启动，在浏览器中输入 localhost:4000，就可以查看自己的博客了。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ</title>
    <url>//2016/07/30/RocketMQ.html</url>
    <content><![CDATA[<h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><!--
create time: 2016-07-30 18:27:22
Author: <TODO: 段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/alibaba/RocketMQ">https://github.com/alibaba/RocketMQ</a></p>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://github.com/alibaba/RocketMQ-docs">https://github.com/alibaba/RocketMQ-docs</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中if语句的几种优化代码的写法</title>
    <url>//2016/06/26/JavaScript-if-statement.html</url>
    <content><![CDATA[<h3 id="一、常见的三元操作符"><a href="#一、常见的三元操作符" class="headerlink" title="一、常见的三元操作符"></a>一、常见的三元操作符</h3><p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (foo) bar();<span class="keyword">else</span> baz(); ==&gt; foo? bar(): baz();</span><br><span class="line"><span class="keyword">if</span> (!foo) bar();<span class="keyword">else</span> baz(); ==&gt; foo? baz(): bar();</span><br><span class="line"><span class="keyword">if</span> (foo) <span class="keyword">return</span> bar();<span class="keyword">else</span> <span class="keyword">return</span> baz(); ==&gt; <span class="keyword">return</span> foo? bar(): baz();</span><br></pre></td></tr></table></figure>

<h3 id="二、使用-and-amp-amp-和-or-运算符"><a href="#二、使用-and-amp-amp-和-or-运算符" class="headerlink" title="二、使用 and(&amp;&amp;)和 or(||)运算符"></a>二、使用 and(&amp;&amp;)和 or(||)运算符</h3><p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (foo) bar(); ==&gt; foo &amp;&amp; bar();</span><br><span class="line"><span class="keyword">if</span> (!foo) bar(); ==&gt; foo || bar();</span><br></pre></td></tr></table></figure>

<h3 id="三、省略大括号"><a href="#三、省略大括号" class="headerlink" title="三、省略大括号{}"></a>三、省略大括号{}</h3><p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (foo) <span class="keyword">return</span> bar(); <span class="keyword">else</span> other(); ==&gt; &#123;<span class="keyword">if</span> (foo) <span class="keyword">return</span> bar();other()&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的json数组操作</title>
    <url>//2016/06/23/javascript-json-array.html</url>
    <content><![CDATA[<p>在 jquery 中处理 JSON 数组的情况中遍历用到的比较多，但是用添加移除这些好像不是太多。<br>今天试过 json[i].remove(),json.remove(i)之后都不行，看网页的 DOM 对象中好像 JSON 数据是以数组的形式出现的，查阅了下相关 JS 中数组的操作一试果然很爽。<br>记录下来。</p>
<h2 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> <span class="built_in">Array</span>();  <span class="comment">//创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> <span class="built_in">Array</span>([size]);  <span class="comment">//创建一个数组并指定长度，注意不是上限，是长度</span></span><br><span class="line"><span class="keyword">var</span> arrayObj = <span class="keyword">new</span> <span class="built_in">Array</span>([element0[, element1[, ...[, elementN]]]]);  <span class="comment">//创建一个数组并赋值</span></span><br></pre></td></tr></table></figure>

<p>要说明的是，虽然第二种方法创建数组指定了长度，但实际上所有情况下数组都是变长的，也就是说即使指定了长度为 5，仍然可以将元素存储在规定长度以外的，注意：这时长度会随之改变。</p>
<h2 id="数组的元素的访问"><a href="#数组的元素的访问" class="headerlink" title="数组的元素的访问"></a>数组的元素的访问</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> testGetArrValue = arrayObj[<span class="number">1</span>]; <span class="comment">//获取数组的元素值</span></span><br><span class="line">arrayObj[<span class="number">1</span>] = <span class="string">'这是新值'</span>; <span class="comment">//给数组元素赋予新的值</span></span><br></pre></td></tr></table></figure>

<h2 id="数组元素的添加"><a href="#数组元素的添加" class="headerlink" title="数组元素的添加"></a>数组元素的添加</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObj. push([item1 [item2 [. . . [itemN ]]]]);<span class="comment">// 将一个或多个新元素添加到数组结尾，并返回数组新长度</span></span><br><span class="line">arrayObj.unshift([item1 [item2 [. . . [itemN ]]]]);<span class="comment">// 将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度</span></span><br><span class="line">arrayObj.splice(insertPos,<span class="number">0</span>,[item1[, item2[, . . . [,itemN]]]]);<span class="comment">//将一个或多个新元素插入到数组的指定位置，插入位置的元素自动后移，返回""。</span></span><br></pre></td></tr></table></figure>

<h2 id="数组元素的删除"><a href="#数组元素的删除" class="headerlink" title="数组元素的删除"></a>数组元素的删除</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObj.pop(); <span class="comment">//移除最后一个元素并返回该元素值</span></span><br><span class="line">arrayObj.shift(); <span class="comment">//移除最前一个元素并返回该元素值，数组中元素自动前移</span></span><br><span class="line">arrayObj.splice(deletePos, deleteCount); <span class="comment">//删除从指定位置deletePos开始的指定数量deleteCount的元素，数组形式返回所移除的元素</span></span><br></pre></td></tr></table></figure>

<h2 id="数组的截取和合并"><a href="#数组的截取和合并" class="headerlink" title="数组的截取和合并"></a>数组的截取和合并</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObj.slice(start, [end]); <span class="comment">//以数组的形式返回数组的一部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素</span></span><br><span class="line">arrayObj.concat([item1[, item2[, . . . [,itemN]]]]); <span class="comment">//将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的新的数组</span></span><br></pre></td></tr></table></figure>

<h2 id="数组的拷贝"><a href="#数组的拷贝" class="headerlink" title="数组的拷贝"></a>数组的拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObj.slice(<span class="number">0</span>); <span class="comment">//返回数组的拷贝数组，注意是一个新的数组，不是指向</span></span><br><span class="line">arrayObj.concat(); <span class="comment">//返回数组的拷贝数组，注意是一个新的数组，不是指向</span></span><br></pre></td></tr></table></figure>

<h2 id="数组元素的排序"><a href="#数组元素的排序" class="headerlink" title="数组元素的排序"></a>数组元素的排序</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObj.reverse(); <span class="comment">//反转元素（最前的排到最后、最后的排到最前），返回数组地址</span></span><br><span class="line">arrayObj.sort(); <span class="comment">//对数组元素排序，返回数组地址</span></span><br></pre></td></tr></table></figure>

<h2 id="数组元素的字符串化"><a href="#数组元素的字符串化" class="headerlink" title="数组元素的字符串化"></a>数组元素的字符串化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObj.join(separator); <span class="comment">//返回字符串，这个字符串将数组的每一个元素值连接在一起，中间用 separator 隔开。</span></span><br></pre></td></tr></table></figure>

<p>toLocaleString 、toString 、valueOf：可以看作是 join 的特殊用法，不常用</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>清洗 Git Repo 代码仓库</title>
    <url>//2016/06/19/clean-git-repo.html</url>
    <content><![CDATA[<h2 id="手动清理"><a href="#手动清理" class="headerlink" title="手动清理"></a>手动清理</h2><p>如果你们的代码仓库问题比较少，只有几个不该提交的文件，可以参考 Atlassian 的一篇关于<a href="https://confluence.atlassian.com/display/BITBUCKET/Maintaining+a+Git+Repository">维护 Git Repo</a>的文章。</p>
<h3 id="大致过程如下："><a href="#大致过程如下：" class="headerlink" title="大致过程如下："></a>大致过程如下：</h3><p>首先进行 Git 垃圾回收：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git gc --auto</span><br></pre></td></tr></table></figure>

<p>其次查看 Git 仓库占用空间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ du -hs .git&#x2F;objects</span><br><span class="line">45M .git&#x2F;objects</span><br></pre></td></tr></table></figure>

<p>然后找出历史中超过一定大小的文件，最后在历史中删除并且提交。如果感兴趣手动处理这个过程可以参照文章后边的链接。</p>
<h3 id="相关的几个命令："><a href="#相关的几个命令：" class="headerlink" title="相关的几个命令："></a>相关的几个命令：</h3><p>清理历史中的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git filter-branch --force --index-filter &#39;git rm --cached --ignore-unmatch ****&#x2F;nohup.out&#39; --prune-empty --tag-name-filter cat -- --all</span><br><span class="line">git filter-branch --index-filter &#39;git rm --cached --ignore-unmatch ****&#x2F;nohup.out&#39; HEAD</span><br><span class="line">git for-each-ref --format&#x3D;&quot;%(refname)&quot; refs&#x2F;original&#x2F; | xargs -n 1 git update-ref -d</span><br></pre></td></tr></table></figure>

<p>强制提交覆盖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog expire --expire&#x3D;now --all</span><br><span class="line">git gc --prune&#x3D;now</span><br><span class="line">git push --all --force</span><br><span class="line">git push --tags --force</span><br></pre></td></tr></table></figure>

<h2 id="查找大文件并清理"><a href="#查找大文件并清理" class="headerlink" title="查找大文件并清理"></a>查找大文件并清理</h2><p>下载<a href="https://raw.githubusercontent.com/Jack614/jalpc_jekyll_theme/gh-pages/git_find_big.sh">Bash Script</a>，在项目目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ chmod 777 git_find_big.sh</span><br><span class="line">$ git gc --auto</span><br></pre></td></tr></table></figure>

<p>查找大文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git_find_big.sh</span><br><span class="line">All sizes are in kB&#39;s. The pack column is the size of the object, compressed, inside the pack file.</span><br><span class="line">size  pack  SHA                                       location</span><br><span class="line">592   580   e3117f48bc305dd1f5ae0df3419a0ce2d9617336  media&#x2F;img&#x2F;emojis.jar</span><br><span class="line">550   169   b594a7f59ba7ba9daebb20447a87ea4357874f43  media&#x2F;js&#x2F;aui&#x2F;aui-dependencies.jar</span><br><span class="line">518   514   22f7f9a84905aaec019dae9ea1279a9450277130  media&#x2F;images&#x2F;screenshots&#x2F;issue-tracker-wiki.jar</span><br><span class="line">337   92    1fd8ac97c9fecf74ba6246eacef8288e89b4bff5  media&#x2F;js&#x2F;lib&#x2F;bundle.js</span><br><span class="line">240   239   e0c26d9959bd583e5ef32b6206fc8abe5fea8624  media&#x2F;img&#x2F;featuretour&#x2F;heroshot.png</span><br></pre></td></tr></table></figure>

<p>手动清理文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git filter-branch --index-filter &#39;git rm --cached --ignore-unmatch filename&#39; HEAD</span><br></pre></td></tr></table></figure>

<p>提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>AngularJS Guide Chinese version</title>
    <url>//2016/06/15/angularjs-guide.html</url>
    <content><![CDATA[<h1 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h1><p>这是一个 AngularJS Guide 的中文分支版本，提供关于 AngularJS 的视频、入门、使用与论坛等中文互联网内容，这里的分类并没有完全参照英文版，也并不固定，如果你有发现新的内容需要添加新类别，直接加吧。</p>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul>
<li><a href="https://i.youku.com/u/UMzQyMDgyODk2/videos">Angular 教学视频 youku 转载</a></li>
</ul>
<h2 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h2><ul>
<li><a href="https://www.infoq.com/cn/news/2013/02/angular-web-app">使用 AngularJS 构建大型 Web 应用</a></li>
<li><a href="https://www.ituring.com.cn/article/13471">AngularJS 入门教程</a></li>
<li><a href="https://www.cnblogs.com/lcllao/archive/2012/10/18/2728787.html">AngularJS 学习笔记</a></li>
</ul>
<h2 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h2><ul>
<li><a href="https://www.cnblogs.com/whitewolf/archive/2013/03/24/2979344.html">AngularJS 开发一些经验总结</a></li>
<li><a href="https://www.cnblogs.com/whitewolf/archive/2012/09/11/2680659.html">再谈 AngularJS DI(Dependency Injection)</a></li>
<li><a href="https://www.cnblogs.com/whitewolf/archive/2013/03/27/2983806.html">Angularjs 的 IOC Inject 分析</a></li>
<li><a href="https://www.cnblogs.com/whitewolf/archive/2013/05/22/3092184.html">细说 Angular ng-class</a></li>
<li><a href="https://www.cnblogs.com/whitewolf/archive/2013/04/16/3024843.html">AngularJS Controller 间通信机制</a></li>
<li><a href="https://www.cnblogs.com/whitewolf/archive/2012/09/14/2684186.html">AngularJS 表达式-Expression</a></li>
<li><a href="https://key232323.iteye.com/blog/1769376">AngularJS 关于依赖和模块与 amd/cmd 的区别，分享下结合使用示例</a></li>
<li><a href="https://blog.miniasp.com/post/2013/05/12/AngularJS-ng-module-select-ngOptions-usage-samples.aspx">搞懂 AngularJS 預設模組 select 標籤的 ngOptions 參數用法</a></li>
<li><a href="https://blog.miniasp.com/post/2013/05/08/AngularJS-Intellisense-in-Visual-Studio-2012.aspx">如何讓 Visual Studio 2012 支援 AngularJS 的 Intellisense</a></li>
<li><a href="https://www.csdn.net/article/2013-04-27/2815077-code-organization-angularjs-javascript">如何组织大型 JavaScript 应用中的代码？</a></li>
</ul>
<h2 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h2><ul>
<li><a href="https://www.AngularJS.cn/">AngularJS 中文社区</a></li>
<li><a href="https://www.angulargirl.com/bbs/forum.php">angulargirl</a></li>
</ul>
<p>繁体中文翻译</p>
<h1 id="学习-AngularJS"><a href="#学习-AngularJS" class="headerlink" title="学习 AngularJS"></a>学习 AngularJS</h1><p>译者: 这是 jmcunningham/AngularJS-Learning 的简体中文翻译<br>我会尽量依照原文翻译 某些专有名词就不另外翻译 如果翻译错误也请提出建议指教 希望大家可以帮忙提供更多更好的 AngularJS 学习资源 谢谢</p>
<p>这里提供一些学习 AngularJS 的部落格链接, 文章, 和影片. 这个列表还在持续成长中. 如果你有想提供的链接与资源, 欢迎提出 pull request. 我也会尽量确认以下的资源是有用的(不是只有两段文字的灌水文). 如果你有更好的方法来分类这些资源, 请让我知道. 在一般主题分类中的类似文章, 我之后也会把他们另外分类出来.</p>
<p>注意：**开头的链接是讨论 ANGULAR 1.2 版的新功能. 许多人希望快速了解 Angular 1.2 版的新功能, 所以我也会在之后开出新的分类标题. 等内容整理差不多或者 1.2 版分类变得太大我再来编辑, 不过现在的话 Angular 1.2 链接可以在两处同时看到.</p>
<h2 id="Angular-1-2-的新功能"><a href="#Angular-1-2-的新功能" class="headerlink" title="Angular 1.2 的新功能"></a>Angular 1.2 的新功能</h2><ul>
<li><a href="https://www.youtube.com/watch?v=W13qDdJDHp8&feature=youtu.be">**AngularJS 1.2 &amp; Beyond</a></li>
<li><a href="https://kensheedlo.com/2013/08/15/error-message-minification-with-minerr.html">**Error Message Minification with MinErr</a></li>
<li><a href="https://weblogs.asp.net/dwahlin/archive/2013/08/14/angularjs-routing-changes.aspx">**AngularJS 路由的变化</a></li>
<li><a href="https://blog.jasoncust.com/2013/08/angularjs-missing-directives-focus-blur_14.html">**AngularJS 缺失的指令: Focus &amp; Blur</a></li>
<li><a href="https://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html">**Remastered Animation in AngularJS 1.2</a></li>
<li><a href="https://www.johnpapa.net/preparing-for-animations-in-angular-1-2-0/">**Preparing for Animations in Angular 1.2.0</a></li>
<li><a href="https://www.neevtech.com/blog/2013/08/17/5-cool-features-in-angularjs-1-2/">**AngularJS 1.2 中的 5 个超酷新特性</a></li>
<li><a href="https://www.exratione.com/2013/09/replacing-jqueryslidedown-with-nganimate-in-angularjs-120/">**在 AngularJS 1.2.0 中使用 ngAnimate 替代 jQuery.slideDown()</a></li>
<li><a href="https://wildermuth.com/2013/9/18/Getting_Ready_for_AngularJS_1_2">**为 AngularJS 1.2 做好准备</a></li>
</ul>
<h2 id="书籍-Books"><a href="#书籍-Books" class="headerlink" title="书籍 Books"></a>书籍 Books</h2><ul>
<li><a href="https://shop.oreilly.com/product/0636920028055.do">AngularJS</a></li>
<li><a href="https://www.packtpub.com/angularjs-to-build-dynamic-web-applications/book">立刻快速开发 AngularJS</a></li>
<li><a href="https://leanpub.com/recipes-with-angular-js">AngularJS 菜单</a></li>
<li><a href="https://www.manning.com/bford/">AngularJS 在行动</a></li>
<li><a href="https://henriquat.re/">AngularJS For .Net 开发员</a></li>
<li><a href="https://www.packtpub.com/angularjs-web-application-development/book">AngularJS 浏览器应用程序开发</a></li>
<li><a href="https://bleedingedgepress.com/our-books/developing-an-angularjs-edge/">发现自己的 AngularJS 优势</a></li>
<li><a href="https://www.packtpub.com/angularjs-directives/book">AngularJS Directives</a></li>
<li><a href="https://www.ng-book.com/">ng-book</a></li>
<li><a href="https://teropa.info/build-your-own-angular/">打造你的 AngularJS</a></li>
<li><a href="https://www.packtpub.com/dependency-injection-angularjs/book">AngularJS 依赖注入</a></li>
<li><a href="https://www.packtpub.com/learning-web-development-with-bootstrap-and-angular/book">通过 Bootstrap 和 AngularJS 学习 Web 开发</a></li>
<li><a href="https://www.packtpub.com/angularjs-design-patterns/book">AngularJS 设计模式</a></li>
<li><a href="https://www.packtpub.com/angularjs-web-application-development-blueprints/book">AngularJS 网路应用开发蓝图</a></li>
<li><a href="https://leanpub.com/Practical_AngularJS">实用 AngularJS</a></li>
</ul>
<h2 id="影片-Videos"><a href="#影片-Videos" class="headerlink" title="影片 Videos"></a>影片 Videos</h2><ul>
<li><a href="https://www.egghead.io/">Egghead.io</a> — 44 videos of about 4 minutes each — <a href="https://github.com/msfrisbie/egghead-angularjs">source code</a></li>
<li><a href="https://weblogs.asp.net/dwahlin/archive/2013/04/12/video-tutorial-angularjs-fundamentals-in-60-ish-minutes.aspx">视屏教程: 60 分钟教你 AngularJS 基础入门</a> — 1:10:50</li>
<li><a href="https://www.youtube.com/user/angularjs">AngularJS YouTube 主页</a> — several videos, mostly presentations of 1h or more</li>
<li><a href="https://www.youtube.com/watch?v=8ILQOFAgaXE">Angular JS 入门</a> — 50:05</li>
<li><a href="https://www.youtube.com/watch?v=hqAyiqUs93c">Angular JS 端对端测试</a> — 52:59</li>
<li><a href="https://www.youtube.com/watch?v=18ifoT-Id54">Angular JS 安全性</a> — 29:45</li>
<li><a href="https://www.youtube.com/watch?v=fSAgFxjFSqY">Grunt 和 Angular JS 前端开发流程</a> — 1:02:37</li>
<li><a href="https://www.youtube.com/watch?v=WuiHuZq_cg4">AngularJS 教程</a> — 12:19</li>
<li><a href="https://tekpub.com/products/angular">AngularJS 秀 (Tekpub)</a> — 8 videos (paid)</li>
<li><a href="https://tutsplus.com/course/easier-js-apps-with-angular/">用 AngularJS 快速开发 Javascript 应用程序(Tuts+)</a> — 22 videos of about 5 minutes each, in 8 sections (paid)</li>
<li><a href="https://pluralsight.com/training/Courses/TableOfContents/angularjs-fundamentals">AngularJS 基础入门 (Pluralsight)</a> - 6 hours 15 minutes total (paid)</li>
<li><a href="https://www.youtube.com/watch?v=W13qDdJDHp8&feature=youtu.be">**AngularJS 1.2 和未来</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLfLN8Jd9-DVEQ0-PEnVeeUYyO0yg28mhN">AngularJS 实例</a> - Growing list of 5 minute or less videos</li>
<li><a href="https://www.youtube.com/watch?v=C7ZI7z7qnHU">用 AngularJS 和 Firebase 开发实时程序</a></li>
<li><a href="https://www.youtube.com/watch?v=XwSFg8nqBFA">MongoDB 和 AngularJS， MEAN 堆</a></li>
<li><a href="https://www.youtube.com/watch?v=mVjpwia1YN4">AngularJS, EmberJS 和 KnockoutJS 双向绑定的比较</a></li>
<li><a href="https://pluralsight.com/training/courses/TableOfContents?courseName=angular-best-practices&highlight=">Angular 最佳实践</a> - 64 videos(paid)</li>
<li><a href="https://www.youtube.com/channel/UCdaEMffiYgTf_E7uTMxM4og/videos">Neosavvy 的 Angular &amp; Jasmine 视频系列</a> - 16 videos of about 2-3 minutes each</li>
<li><a href="https://www.youtube.com/channel/UCNhQ8pYS9U1EbwCx42NKaYQ">AngularJS 视频集合</a> — Collection of Videos from Various websites.</li>
<li><a href="https://www.youtube.com/user/ngconfvideos">ng-conf YouTube 页面</a> — YouTube channel with all the presentations given at the Angular Conference in January 2014.</li>
<li><a href="https://www.youtube.com/watch?v=TRrL5j3MIvo&feature=youtu.be">通过 50 个例子学习 Angular.js (第 1 部分)</a></li>
</ul>
<h2 id="在线课程-Courses"><a href="#在线课程-Courses" class="headerlink" title="在线课程 Courses"></a>在线课程 Courses</h2><ul>
<li><a href="https://www.thinkster.io/">Thinkster.io - 学习 AngularJS 更好的方法</a> - 免費的線上 AngularJS 課程</li>
<li><a href="https://ng-tutorial.mgechev.com/">AngularJS 互动教程</a></li>
<li><a href="https://www.udemy.com/angularjs-jumpstart/?sl=E0EYdlw9RBMALEwzBwZX">和 Dan Wahlin 一起学习 AngularJS</a></li>
<li><a href="https://tutsplus.com/course/hands-on-angular/">Tuts+: 开始使用 Angular</a></li>
<li><a href="https://www.codeschool.com/courses/shaping-up-with-angular-js">Code School Shaping Up with Angular.js</a></li>
<li><a href="https://www.lynda.com/AngularJS-tutorials/Up-Running-AngularJS/154414-2.html">Lynda Up and Running with AngularJS</a></li>
<li><a href="https://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1">Codecademy AngularJs</a></li>
</ul>
<h2 id="帮助-Help"><a href="#帮助-Help" class="headerlink" title="帮助 Help"></a>帮助 Help</h2><ul>
<li><a href="https://stackoverflow.com/questions/tagged/angularjs">StackOverflow</a></li>
<li><a href="https://groups.google.com/group/angular">AngularJS 邮件列表（谷歌小组）</a></li>
<li><a href="https://webchat.freenode.net/?channels=angularjs&uio=d4">Chatroom （基于浏览器的在线聊天系统）</a></li>
<li><a href="https://plus.google.com/u/0/communities/115368820700870330756">AngularJS Google+的社区</a></li>
<li><a href="https://www.reddit.com/r/angularjs">reddit</a></li>
</ul>
<h2 id="一般主题-General-Topics"><a href="#一般主题-General-Topics" class="headerlink" title="一般主题 General Topics"></a>一般主题 General Topics</h2><ul>
<li><a href="https://www.cheatography.com/proloser/cheat-sheets/angularjs/">AngularJS 速查表</a></li>
<li><a href="https://devgirl.org/2013/03/21/fun-with-angularjs/">AngularJS 乐趣</a></li>
<li><a href="https://onehungrymind.com/angularjs-philly-ete-slides/">AngularJS Philly ETE 幻灯</a></li>
<li><a href="https://blog.tomaka17.com/2012/12/random-tricks-when-using-angularjs/">随机技巧使用 AngularJS</a></li>
<li><a href="https://www.peterbe.com/plog/what-stumped-me-about-angularjs">AngularJS 难倒我的是什么</a></li>
<li><a href="https://oscarvillarreal.com/2013/05/07/5-reasons-to-use-angularjs-in-the-corporate-app-world/">5 个理由在企业应用程序世界中使用 AngularJS</a></li>
<li><a href="https://ify.io/lazy-loading-in-angularjs/">在 AngularJS 中实现延迟加载</a></li>
<li><a href="https://www.yearofmoo.com/2012/10/more-angularjs-magic-to-supercharge-your-webapp.html">用更多 AngularJS 魔力来大力增压你的浏览器应用程序</a></li>
<li><a href="https://www.bennadel.com/blog/2472-HashKeyCopier-An-AngularJS-Utility-Class-For-Merging-Cached-And-Live-Data.htm">HashKeyCopier - 一个 AngularJS 合并缓存和实时数据的实用工具类</a></li>
<li><a href="https://www.bennadel.com/blog/2444-Exploring-Directives-scope-DOM-Rendering-And-Timing-In-AngularJS.htm">在 AngularJS 中探索 Directive 指令，$scope，DOM 渲染和时序</a></li>
<li><a href="https://www.bennadel.com/blog/2432-Applying-A-Cached-Response-To-An-AngularJS-Resource.htm">在 AngularJS 资源上应用缓存的响应</a></li>
<li><a href="https://www.blogeek.com.ar/2013/06/03/angularytics-the-solution-to-tracking-page-views-and-events-in-a-spa-with-angularjs/">Angularytics: 在 SPA 中用 AngularJS 来跟踪页面访问量和事件的解决方案</a></li>
<li><a href="https://www.blogeek.com.ar/2013/05/01/sharing-data-state-on-angularjs-alternatives-comparison-and-my-solution/">在 AngularJS 上共享数据，状态和模型： 方案选择，比较和我的解决方案</a></li>
<li><a href="https://www.jefclaes.be/2013/06/angularjs-and-ie8-caching.html">Angular.js 和 IE8 缓存</a></li>
<li><a href="https://www.yearofmoo.com/2012/11/angularjs-and-seo.html">AngularJS 和 SEO</a></li>
<li><a href="https://sravi-kiran.blogspot.com/2013/03/TemplatesRoutingAndSharingDataBetweenViewsInAnAngularJsApplication.html">模板，路由和共享数据视图之间的一个 AngularJS 的应用</a></li>
<li><a href="https://blog.thousandeyes.com/improving-end-user-experience-with-angularjs/">用 AngularJS 改善最终用户体验</a></li>
<li><a href="https://viralpatel.net/blogs/angularjs-controller-tutorial/">AngularJS 控制器教程与实例</a></li>
<li><a href="https://amitavroy.com/justread/content/articles/html5-local-storage-angular-js">HTML5 本地存储与 Angular JS</a></li>
<li><a href="https://gonzalo123.com/2013/07/08/dynamic-routes-with-angularjs-and-silex/">动态路由和 AngularJS 以及 Silex</a></li>
<li><a href="https://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/">在你的 AngularJS 应用中建模数据和状态</a></li>
<li><a href="https://www.phase2technology.com/blog/code-reuse-in-angularjs/">AngularJS 代码重用 </a></li>
<li><a href="https://weblogs.asp.net/dwahlin/archive/2013/05/22/dynamically-loading-controllers-and-views-with-angularjs-and-requirejs.aspx">在 AngularJS 和 RequireJS 中动态加载控制器和视图</a></li>
<li><a href="https://htmlcssjavascript.com/javascript/sorting-by-multiple-fields-with-different-sort-orders-using-the-angularjs-orderby-filter/">用 AngularJS 的 orderby 筛选器对多个字段用不同顺序排序</a></li>
<li><a href="https://blog.brunoscopelliti.com/http-response-interceptors">$http 响应拦截器</a></li>
<li><a href="https://trochette.github.io/Angular-Design-Patterns-Best-Practices/#/intro">AngularJS: 先进的设计模式和最佳实践</a></li>
<li><a href="https://aboutcode.net/2013/07/27/json-date-parsing-angularjs.html">AngularJS 的自动 JSON 数据解析</a></li>
<li><a href="https://odetocode.com/blogs/scott/archive/2013/05/01/angularjs-abstractions-modules.aspx">AngularJS 抽象：模块</a></li>
<li><a href="https://www.bennadel.com/blog/2507-Mixing-Static-Content-With-ngSwitch-And-ngSwitchWhen-In-AngularJS.htm">在 AngularJS 中用 ngSwitch 和 ngSwitchWhen 来混合静态内容</a></li>
<li><a href="https://pseudobry.com/building-large-apps-with-angularjs.html">AngularJS 构建大型应用程序</a></li>
<li><a href="https://kensheedlo.com/2013/08/15/error-message-minification-with-minerr.html">**错误信息与 ​​ 微小 MinErr</a></li>
<li><a href="https://blog-it.hypoport.de/2013/08/24/how-to-make-your-angularjs-app-work-in-ie-8/">如何让你的 AngularJS 应用程序在 IE8 工作</a></li>
<li><a href="https://tech.small-improvements.com/2013/09/10/angularjs-performance-with-large-lists/">AngularJS 性能优化的长列表</a></li>
<li><a href="https://www.innerhtml.com/responsive-website-using-angularjs.html">AngularJS 响应网站</a></li>
<li><a href="https://medium.com/p/f8ae57e2cec3">在 AngularJS 减少初始化时间</a></li>
<li><a href="https://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/">用 Yeoman, Grunt 和 Bower 快速开发 Angular 程序</a></li>
<li><a href="https://wildermuth.com/2013/9/18/Getting_Ready_for_AngularJS_1_2">**AngularJS 1.2 准备</a></li>
<li><a href="https://wintellect.com/blogs/jlikness/10-reasons-web-developers-should-learn-angularjs">10 个理由网页开发人员应该了解 AngularJS</a></li>
<li><a href="https://blog.mgechev.com/2013/10/01/angularjs-partials-lazy-prefetching-strategy-weighted-directed-graph/">AngularJS partials 的懒惰预取</a></li>
<li><a href="https://net.tutsplus.com/articles/resources-to-get-you-up-to-speed-in-angularjs/">让你加快速度 AngularJS 开发的资源</a></li>
<li><a href="https://solutionoptimist.com/2013/10/07/enhance-log-using-angularjs-decorators/">使用装饰提升 AngularJS $log</a></li>
<li><a href="https://www.bennadel.com/blog/2542-Logging-Client-Side-Errors-With-AngularJS-And-Stacktrace-js.htm">使用 AngularJS 和 Stacktrace.js 记录客户端错误</a></li>
<li><a href="https://timothy.userapp.io/post/63412334209/form-autocomplete-and-remember-password-with-angularjs">AngularJS 表单自动完成，并记住密码</a></li>
<li><a href="https://blog.scalyr.com/2013/10/31/angularjs-1200ms-to-35ms/">优化 AngularJS: 从 1200ms 到 35ms</a></li>
<li><a href="https://www.bennadel.com/blog/2551-Creating-A-RequireJS-Service-For-AngularJS-Applications.htm">为 AngularJS 应用创建一个 RequireJS 服务</a></li>
<li><a href="https://www.bennadel.com/blog/2553-Loading-AngularJS-Components-After-Your-Application-Has-Been-Bootstrapped.htm">在你的应用开始后加载 AngularJS 组件</a></li>
<li><a href="https://blog.getelementsbyidea.com/load-a-module-on-demand-with-angularjs/">根据需求加载 AngularJS 模块</a></li>
<li><a href="https://newtriks.com/2013/11/29/environment-specific-configuration-in-angularjs-using-grunt/">用 Grunt 来配置 AngularJS 环境</a></li>
<li><a href="https://weblogs.asp.net/dwahlin/archive/2014/02/18/what-s-the-role-of-the-server-in-single-page-applications-spas.aspx">服务器在单页应用(SPAs)中的作用?</a></li>
<li><a href="https://blog.pusher.com/making-angular-js-realtime-with-pusher/">通过 Websockets 将 Angular.js 实时化</a></li>
<li><a href="https://blog.shinetech.com/2014/02/04/rich-object-models-and-angular-js/">丰富的对象模型和 Angular.js</a></li>
<li><a href="https://blog.shinetech.com/2014/02/28/rich-object-models-and-angular-identity-maps/">丰富的对象模型和 Angular: 一致性映射</a></li>
<li><a href="https://www.webdeveasy.com/interceptors-in-angularjs-and-useful-examples/">AngularJS 中的障碍和实用例子</a></li>
<li><a href="https://www.undefinednull.com/2014/02/17/resolve-in-angularjs-routes-explained-as-story/">通过故事理解 AngularJS 路径</a></li>
<li><a href="https://blog.safaribooksonline.com/2014/04/08/refactoring-angularjs-get-hands-filthy/">重构 AngularJS</a></li>
<li><a href="https://medium.com/opinionated-angularjs/2e6a067c73bc">Angular 模型和 javascript 的类</a></li>
<li><a href="https://jonathancreamer.com/the-state-of-angularjs-controllers/">angularjs 控制器的状态</a></li>
<li><a href="https://www.yearofmoo.com/2014/05/how-to-use-ngmessages-in-angularjs.html">怎么使用 AngularJS 的 ngMessages</a></li>
<li><a href="https://toddmotto.com/digging-into-angulars-controller-as-syntax/">深度挖掘 Angular 的控制器</a></li>
<li><a href="https://toddmotto.com/everything-about-custom-filters-in-angular-js/">AngularJS 自定义过滤器</a></li>
<li><a href="https://toddmotto.com/all-about-angulars-emit-broadcast-on-publish-subscribing/">理解 Angular 的$scope和$rootScope 事件系统中的$emit,$broadcast 和$on </a></li>
<li><a href="https://www.garbl.es/angularjs/preload/2014/06/07/frictionless-data-preloading-in-angularjs/">AngularJS 无阻碍数据预载</a></li>
</ul>
<h2 id="介绍-开始学习-AngularJS"><a href="#介绍-开始学习-AngularJS" class="headerlink" title="介绍/开始学习 AngularJS"></a>介绍/开始学习 AngularJS</h2><ul>
<li><a href="https://www.adobe.com/devnet/html5/articles/getting-started-with-angularjs.html">AngularJS 入门</a></li>
<li><a href="https://stephanebegaudeau.tumblr.com/post/48776908163/everything-you-need-to-understand-to-start-with">你需要开始了解的 AngularJS 的一切</a></li>
<li><a href="https://codigovivo.com/2013/06/09/what-to-know-to-be-an-expert-in-angularjs/">要成为 AngularJS 专家必备的知识</a></li>
<li><a href="https://net.tutsplus.com/tutorials/javascript-ajax/5-awesome-angularjs-features/">5 个很棒的 AngularJS 功能</a></li>
<li><a href="https://blog.artlogic.com/2013/03/06/angularjs-for-jquery-developers/">AngularJS for jQuery 开发者</a></li>
<li><a href="https://www.webdesignerdepot.com/2013/04/an-introduction-to-angularjs/">AngularJS 入门指南</a></li>
<li><a href="https://net.tutsplus.com/tutorials/javascript-ajax/building-a-web-app-from-scratch-in-angularjs/">用 AngularJS 从头开始写应用程序</a></li>
<li><a href="https://glennstovall.com/blog/2013/06/27/angularjs-an-overview/">AngularJS: 概述</a></li>
<li><a href="https://www.sitepoint.com/angularjs-tutorial-build-an-app-using-directives-and-data-binding/">AngularJS 教程 - 建立一个应用程序使用的指令和数据绑定</a></li>
<li><a href="https://www.revillwebdesign.com/angularjs-tutorial/">在 30 分钟内教会你 AngularJS</a></li>
<li><a href="https://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/">用 Yeoman, Grunt 和 Bower 快速开发</a></li>
<li><a href="https://www.sitepoint.com/10-reasons-use-angularjs/">10 个你需要开始用 AngularJS 的理由</a></li>
<li><a href="https://www.kidsil.net/2013/09/filtering-with-angularjs/">AngularJS 筛选器</a></li>
<li><a href="https://toddmotto.com/ultimate-guide-to-learning-angular-js-in-one-day/">一天学会 AngularJS</a></li>
<li><a href="https://learnangularjs.net/2013/10/24/7-ways-to-be-successful-with-angularjs/">7 种成功学习 Angular 的方法</a></li>
<li><a href="https://scotch.io/tutorials/javascript/creating-a-single-page-todo-app-with-node-and-angular"> 用 Node and Angular 创建单页应用</a></li>
<li><a href="https://tutorialzine.com/2013/08/learn-angularjs-5-examples"> 通过 5 个实例学习 Angular</a></li>
<li><a href="https://www.exratione.com/2013/12/considering-speed-and-slowness-in-angularjs/">考虑的 AngularJS 的效率</a></li>
<li><a href="https://newtriks.com/2013/11/29/environment-specific-configuration-in-angularjs-using-grunt/">Environment Specific Configuration in AngularJS Using Grunt</a></li>
<li><a href="https://solutionoptimist.com/2013/10/07/enhance-angularjs-logging-using-decorators/">用装饰来提升 Angular 日志</a></li>
<li><a href="https://github.com/deontologician/pipr/blob/master/tut.org">Picking Up Angular, build a twitter-like application</a></li>
<li><a href="https://blog.loadimpact.com/2014/06/03/exception-handling-in-an-angularjs-web-application-tutorial/">AngularJS 网页应用的异常处理</a></li>
<li><a href="https://www.pubnub.com/blog/angularjs-101-from-zero-to-angular-in-seconds/">AngularJS 101: 从 0 开始学 Angular</a></li>
</ul>
<h2 id="使用及学习心得-Lessons-Learned"><a href="#使用及学习心得-Lessons-Learned" class="headerlink" title="使用及学习心得 Lessons Learned"></a>使用及学习心得 Lessons Learned</h2><ul>
<li><a href="https://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/">经验教训：一年一个大 AngularJS 项目</a></li>
<li><a href="https://branchandbound.net/blog/web/2013/08/some-angularjs-pitfalls/">一些 AngularJS 陷阱</a></li>
<li><a href="https://ruoyusun.com/2013/05/25/things-i-wish-i-were-told-about-angular-js.html">我希望我事先被告知关于 Angular.js 的事实</a></li>
<li><a href="https://www.objectpartners.com/2013/08/09/i-wish-i-knew-then-what-i-know-now-life-with-angularjs/">我希望我当时就知道我现在知道的东西 — 我和 AngularJS</a></li>
<li><a href="https://gocardless.com/blog/building-a-large-angular-application/">如何建立一个大型 Angular.js 应用</a></li>
<li><a href="https://www.bytesforthought.com/angularjs-tips/">对新手和全能好奇的开发人员的 AngularJS 提示和技巧</a></li>
</ul>
<h2 id="分段式文章-Multipart-Articles"><a href="#分段式文章-Multipart-Articles" class="headerlink" title="分段式文章 Multipart Articles"></a>分段式文章 Multipart Articles</h2><ul>
<li>开始使用 elasticsearch 和 AngularJS: <a href="https://www.fullscale.co/blog/2013/02/28/getting_started_with_elasticsearch_and_AngularJS_searching.html">Part1 - 搜索</a>, <a href="https://www.fullscale.co/blog/2013/03/07/getting_started_with_elasticsearch_and-AngularJS_faceting.html">Part 2: Faceting</a>, <a href="https://www.fullscale.co/blog/2013/03/20/getting_started_with_elasticsearch_and_AngularJS_d3.html">Part 3: Visualization</a></li>
<li>用 AngularJS 开发可维护网络应用: <a href="https://blog.akquinet.de/2013/01/22/maintainable-rich-web-applications-with-angularjs/">Part 1</a>, <a href="https://blog.akquinet.de/2013/03/21/maintainable-rich-web-applications-with-angularjs-part-2/">Part 2</a></li>
<li>Google,Twitter 和 AngularJS: <a href="https://dailyjs.com/2013/04/11/angularjs-1/">1: Google, Twitter, and AngularJS</a>, <a href="https://dailyjs.com/2013/04/18/angularjs-2/">2: Let’s Make a Feed Reader</a>, <a href="https://dailyjs.com/2013/04/25/angularjs-3/">3: 生成源</a>, <a href="https://dailyjs.com/2013/05/09/angularjs-4/">4: 管理源</a>, <a href="https://dailyjs.com/2013/05/16/angularjs-5/">5: 测试</a>, <a href="https://dailyjs.com/2013/05/30/angularjs-6/">6: 增加依赖</a>, <a href="https://dailyjs.com/2013/06/06/angularjs-7/">7: 表格验证</a>, <a href="https://dailyjs.com/2013/06/13/angularjs-8/">8: 迭代程序 &amp; 过滤器</a>, <a href="https://dailyjs.com/2013/07/18/angularjs-9/">9: 安装</a></li>
<li>用 AnuglarJS 打造 SignalR Stock Ticker: <a href="https://sravi-kiran.blogspot.in/2013/05/ImplementingSignalRStockTickerUsingAngularJSPart1.html">Part 1</a>, <a href="https://sravi-kiran.blogspot.in/2013/05/ImplementingSignalRStockTickerUsingAngularJSPart2.html">Part 2</a></li>
<li>AngularJS 最佳实践: 我之前都做错了!: <a href="https://blog.artlogic.com/2013/05/02/ive-been-doing-it-wrong-part-1-of-3/">Part 1</a>, <a href="https://blog.artlogic.com/2013/05/06/angularjs-best-practices-ive-been-doing-it-wrong-part-2-of-3/">Part 2</a>, <a href="https://blog.artlogic.com/2013/05/08/angularjs-best-practices-ive-been-doing-it-wrong-part-3-of-3/">Part 3</a></li>
<li>AngularJS 简介 <a href="https://www.raweng.com/blog/2013/01/30/introduction-to-angularjs-part-1/">Part 1</a>, <a href="https://www.raweng.com/blog/2013/05/16/introduction-to-angularjs-part-2/">Part 2</a></li>
<li>深入 AngularJS : <a href="https://suhairhassan.com/2013/06/07/angularjs-in-depth-part-1.html">Part 1</a>, <a href="https://suhairhassan.com/2013/07/25/angularjs-in-depth-part-2.html">Part 2: 过滤器</a></li>
<li><a href="https://www.ng-newsletter.com/posts/beginner2expert-how_to_start.html">The 7 成为 Angularjs 大师</a>, <a href="https://www.ng-newsletter.com/posts/beginner2expert-scopes.html">Part 2: Scopes</a>, <a href="https://www.ng-newsletter.com/posts/beginner2expert-data-binding.html">Part 3: 双向绑定</a>, <a href="https://www.ng-newsletter.com/posts/beginner2expert-directives.html">Part 4 and 5: Expressions and directives</a>, <a href="https://www.ng-newsletter.com/posts/beginner2expert-services.html">Part 6: 服务</a></li>
<li>AngularJS 概况: <a href="https://msmvps.com/blogs/theproblemsolver/archive/2013/04/05/getting-started-with-angularjs.aspx">1:开始 AngularJS 编程</a>, <a href="https://msmvps.com/blogs/theproblemsolver/archive/2013/04/10/creating-an-angularjs-controller.aspx">2:创造 一个 AngularJS 控制器</a>, <a href="https://msmvps.com/blogs/theproblemsolver/archive/2013/04/15/the-angularjs-scope-is-not-the-mvc-model.aspx">3: AngularJS $scope 不是 MVC 模型</a>, <a href="https://msmvps.com/blogs/theproblemsolver/archive/2013/05/10/using-repeating-elements-in-angularjs.aspx">4:在 AngularJS 中重复使用元素</a>, <a href="https://msmvps.com/blogs/theproblemsolver/archive/2013/05/13/filtering-the-data-in-an-angularjs-ngrepeat-element.aspx">5: 在一个 AngularJS ngRepeat 元素中过滤数据</a>, <a href="https://msmvps.com/blogs/theproblemsolver/archive/2013/08/19/using-the-angularjs-formcontroller-to-control-form-submission.aspx">6:用 #AngularJS 表格控制器来控制表格提交</a>, <a href="https://msmvps.com/blogs/theproblemsolver/archive/2013/08/29/creating-an-angularjs-directive.aspx">7:创造 #AngularJS Directive</a>, <a href="https://msmvps.com/blogs/theproblemsolver/archive/2013/09/05/using-the-dom-in-an-angularjs-application.aspx">8:在一个 AngularJS 应用中使用 DOM</a></li>
<li>打造一个基于 MongoDB, ExpressJS, AngularJS, 和 Node.js 的 Google 日历订阅 App <a href="https://www.jonathanbroquist.com/blog/2013/10/building-a-google-calendar-booking-app-with-mongodb-expressjs-angularjs-and-node-js-part-1/">Part 1</a></li>
<li>创造组建: <a href="https://blog.thousandeyes.com/creating-extensible-widgets-part-1-jquery-to-angularjs/">Part 1: 30 秒将 jQuery 转成 AngularJS</a>, <a href="https://blog.thousandeyes.com/creating-extensible-widgets-part-2-angularjs-directive-controllers/">Part 2: AngularJS Directive 控制器</a></li>
</ul>
<h2 id="范例应用程序-Sample-Apps"><a href="#范例应用程序-Sample-Apps" class="headerlink" title="范例应用程序 Sample Apps"></a>范例应用程序 Sample Apps</h2><ul>
<li><a href="https://www.codeproject.com/Articles/576246/A-Shopping-Cart-Application-Built-with-AngularJS">建有 AngularJS 购物车应用程序</a></li>
<li><a href="https://cacodaemon.de/index.php?id=51">用谷歌 feed API 和 AngularJS 建立一个 feed 阅读器</a></li>
</ul>
<h2 id="Scopes-amp-Compile"><a href="#Scopes-amp-Compile" class="headerlink" title="Scopes &amp; Compile"></a>Scopes &amp; Compile</h2><ul>
<li><a href="https://jimhoskins.com/2012/12/17/angularjs-and-apply.html">AngularJS 和 scope.$apply</a></li>
<li><a href="https://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs">AngularJS 什么是范围原型/原型继承的细微之处？</a></li>
<li><a href="https://eburley.github.io/2013/01/31/angularjs-watch-pub-sub-best-practices.html">angularjs.org watch, on pub sub, 和你.</a></li>
<li><a href="https://www.befundoo.com/blog/use-ng-bind-in-angularjs/">AngularJS 中使用 Ng-bind</a></li>
<li><a href="https://www.bennadel.com/blog/2480-Unbinding-watch-Listeners-In-AngularJS.htm">In AngularJS 中解除绑定 $watch() Listeners </a></li>
<li><a href="https://www.bennadel.com/blog/2457-Accessing-scope-On-The-DOM-Using-AngularJS.htm">使用 AngularJS 对 DOMZ 中的 $scope 进行访问</a></li>
<li><a href="https://www.bennadel.com/blog/2449-Directive-Link-observe-And-watch-Functions-Execute-Inside-An-AngularJS-Context.htm">指令链路, $observe, 和 $watch 功能在 AngularJS 语境执行的内部</a></li>
<li><a href="https://codingsmackdown.tv/blog/2013/04/29/hailing-all-frequencies-communicating-in-angularjs-with-the-pubsub-design-pattern/">Hailing All Frequencies – 在 AngularJS 用 Pub / Sub 设计模式进行内部沟通</a></li>
<li><a href="https://jimhoskins.com/2012/12/14/nested-scopes-in-angularjs.html">AngularJS 嵌套作用域</a></li>
<li><a href="https://thenittygritty.co/angularjs-pitfalls-using-scopes">AngularJS: 6 个常见的使用作用域的陷阱</a></li>
<li>Scoping AngularJS Directives: <a href="https://spectaclelabs.io/blog/2013/06/22/scoping-angularjs-directives-part-1/">Part 1</a>, <a href="https://spectaclelabs.io/blog/2013/06/23/scoping-angularjs-directives-part-2/">Part 2</a></li>
<li><a href="https://angular-tips.com/blog/2013/08/watch-how-the-apply-runs-a-digest/">$watch $apply 是怎么运行 $digest 的</a></li>
<li><a href="https://www.benlesh.com/2013/08/angularjs-watch-digest-and-apply-oh-my.html">AngularJS: $watch, $digest 和 $apply</a></li>
<li><a href="https://angular-tips.com/blog/2013/08/removing-the-unneeded-watches/">删除不需要的 Watches</a></li>
<li><a href="https://www.benlesh.com/2013/08/angular-compile-how-it-works-how-to-use.html">Angular - $compile: 它是如何工作，如何使用它。</a></li>
<li><a href="https://ruoyusun.com/2013/08/24/a-glimpse-of-angularjs-scope-via-example.html">通过实例来了解 Angular.js $scope</a></li>
<li><a href="https://variadic.me/posts/2013-10-15-share-state-between-controllers-in-angularjs.html">在 AngularJS 控制器之间共享状态</a></li>
</ul>
<h2 id="依賴注入-Dependency-Injection"><a href="#依賴注入-Dependency-Injection" class="headerlink" title="依賴注入 Dependency Injection"></a>依賴注入 Dependency Injection</h2><ul>
<li><a href="https://www.alexrothenberg.com/2013/02/11/the-magic-behind-angularjs-dependency-injection.html">AngularJS 依赖注入背后的魔法</a></li>
<li><a href="https://dailyjs.com/2013/05/23/angularjs-injection/">AngularJS: 更多关于依赖注入</a></li>
<li><a href="https://diegobarahona.com/javascript/angularjs/2013/06/13/angularjs-dependency-injection/">Angularjs 依赖注入</a></li>
<li><a href="https://joelhooks.com/blog/2013/08/18/configuring-dependency-injection-in-angularjs/">在 AngularJS 中配置依赖注入</a></li>
<li><a href="https://www.bennadel.com/blog/2527-Defining-Instantiatable-Classes-In-The-AngularJS-Dependency-Injection-Framework.htm">在 AngularJS 依赖注入框架中定义实例化的类</a></li>
</ul>
<h2 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令 Directives"></a>指令 Directives</h2><ul>
<li><a href="https://www.adobe.com/devnet/html5/articles/angularjs-directives-and-the-computer-science-of-javascript.html">AngularJS 指令和 JavaScript 的计算机科学</a></li>
<li><a href="https://henriquat.re/directives/introduction-to-directives/introductionToDirectives.html">AngularJS 指令 - 特定于域的扩展为 HTML</a></li>
<li><a href="https://www.befundoo.com/university/tutorials/angularjs-directives-tutorial/">AngularJS 指令教程</a></li>
<li><a href="https://panthersoftware.com/blog/2013/05/30/commentable-a-polymorphic-nested-comments-directive-for-angularjs/">Commentable： AngularJS 的多态嵌套注释指令</a></li>
<li><a href="https://blog.brunoscopelliti.com/the-ngform-directive-of-angularjs">AngularJS 的 ngForm 指令</a></li>
<li><a href="https://blog.brunoscopelliti.com/run-a-directive-after-the-dom-has-finished-rendering">执行指令后，DOM 完成渲染</a></li>
<li><a href="https://blog.brunoscopelliti.com/use-cases-of-angularjs-directives">使用 AngularJS 指令的案例</a></li>
<li><a href="https://www.bennadel.com/blog/2476-My-Approach-To-Building-AngularJS-Directives-That-Bind-To-JavaScript-Events.htm">我的方法来构建绑定到 JavaScript 的事件的 AngularJS 指令</a></li>
<li><a href="https://www.bennadel.com/blog/2471-Delegating-Nested-Directive-Behavior-To-Parent-Directive-In-AngularJS.htm">AngularJS 委派嵌套指令行为转到父指令</a></li>
<li><a href="https://www.bennadel.com/blog/2447-Exploring-Directive-Controllers-Compiling-Linking-And-Priority-In-AngularJS.htm">AngularJS 探索指令控制器，编译，链接和优先级</a></li>
<li><a href="https://www.bennadel.com/blog/2446-Using-Controllers-In-Directives-In-AngularJS.htm">AngularJS 在指令中使用控制器</a></li>
<li><a href="https://www.grobmeier.de/angular-js-directives-with-json-arguments-08012013.html">Angular.js 使用 JSON 参数的指令</a></li>
<li><a href="https://amitgharat.wordpress.com/2013/06/08/the-hitchhikers-guide-to-the-directive/">指令的漫游指南</a></li>
<li><a href="https://codingsmackdown.tv/blog/2012/12/14/creating-a-simple-angularjs-directive/">创建一个简单的 AngularJS 指令</a></li>
<li><a href="https://www.codeproject.com/Articles/607873/Extending-HTML-with-AngularJS-Directives">扩展的 HTML AngularJS 指令</a></li>
<li><a href="https://sporto.github.io/blog/2013/06/24/nested-recursive-directives-in-angular/">Angular 嵌套递归指令</a></li>
<li><a href="https://icelab.com.au/articles/an-all-in-one-directive-controller-with-angularjs/">AngularJS 一个全功能于一身的指令控制器</a></li>
<li><a href="https://icelab.com.au/articles/levelling-up-with-angularjs-building-a-reusable-click-to-edit-directive/">平了 AngularJS 的战场: 构建可重用点击编辑指令</a></li>
<li><a href="https://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags/">AngularJS 覆盖标准的 HTML 标签的指令</a></li>
<li><a href="https://ngokevin.com/blog/angularslider/">AngularJS 移动滑块指令</a></li>
<li><a href="https://www.bennadel.com/blog/2494-Using-Namespaces-For-One-Off-Directives-In-AngularJS.htm">在 AngularJS 中使用命名空间一次性指令</a></li>
<li><a href="https://www.phase2technology.com/blog/angularjs-and-compile/">AngularJS 和 $compile</a></li>
<li><a href="https://www.ng-newsletter.com/posts/directives.html">深度了解指令</a></li>
<li><a href="https://www.grobmeier.de/angularjs-referencing-parent-scope-directive-23082013.html">AngularJS: 引用父作用域的指令</a></li>
<li><a href="https://angular-tips.com/blog/2013/08/tip-directives-with-the-same-name/">提示：具有相同的名称的指令</a></li>
<li><a href="https://odetocode.com/blogs/scott/archive/2013/09/11/moving-data-in-an-angularjs-directive.aspx">将数据移入一个 AngularJS 指令</a></li>
<li><a href="https://weblogs.asp.net/dwahlin/archive/2013/09/24/building-a-custom-angularjs-unique-value-directive.aspx">构建自定义 AngularJS 指令的独特价值</a></li>
<li><a href="https://toddmotto.com/creating-an-angularjs-directive-from-one-of-your-existing-plugins-scripts/">从现有的插件/脚本之一创建 AngularJS 指令</a></li>
<li><a href="https://jasonmore.net/angular-js-directives-difference-controller-link/">Angular.js 指令 - 控制器和链路之间的区别</a></li>
<li><a href="https://www.befundoo.com/university/tutorials/angularjs-directives-tutorial/">AngularJS 指令教程</a></li>
<li><a href="https://seanhess.github.io/2013/10/14/angularjs-directive-design.html">AngularJS 指令设计一点通</a></li>
<li><a href="https://suhairhassan.com/2013/10/21/refactoring-to-angularjs-directive.html">重构 AngularJS 指令</a></li>
</ul>
<h2 id="服务-供应商-Services-Providers"><a href="#服务-供应商-Services-Providers" class="headerlink" title="服务/供应商 Services/Providers"></a>服务/供应商 Services/Providers</h2><ul>
<li><a href="https://iffycan.blogspot.com/2013/05/angular-service-or-factory.html">Angular service 还是 factory?</a></li>
<li><a href="https://blog.jdriven.com/2013/03/how-to-create-singleton-angularjs-services-in-4-different-ways/">如何在 4 种不同的方式创建 （Singleton） AngularJS 服务</a></li>
<li><a href="https://sravi-kiran.blogspot.com/2013/03/MovingAjaxCallsToACustomServiceInAngularJS.html">Angular JS 中移动 AJAX 调用到定制服务</a></li>
<li><a href="https://angular-tips.com/blog/2013/08/consuming-services/">消费服务</a></li>
<li><a href="https://angular-tips.com/blog/2013/08/understanding-service-types/">了解服务的类型</a></li>
<li><a href="https://djds4rce.wordpress.com/2013/08/13/understanding-angular-http-interceptors/">理解 angular $http 拦截器</a></li>
<li><a href="https://blog.xebia.com/2013/09/01/differences-between-providers-in-angularjs/">在 AngularJS 中 provider 供应商之间的差异</a></li>
<li><a href="https://docs.google.com/document/d/1gkDp8HJU5Hdgse6d0Ol0_nsi9MQulVTbRCkEThW0RRY/edit#">Angular 的模块：工厂服务，服务，价值，噢，我的天啊</a></li>
</ul>
<h2 id="路由-Routing"><a href="#路由-Routing" class="headerlink" title="路由 Routing"></a>路由 Routing</h2><ul>
<li><a href="https://blog.brunoscopelliti.com/how-to-defer-route-definition-in-an-angularjs-web-app">如何在 AngularJS Web 应用程序中推迟路由定义</a></li>
<li><a href="https://txt.fliglio.com/2013/05/angularjs-state-management-with-ui-router/">AngularJS UI 路由器状态管理</a></li>
<li><a href="https://www.bennadel.com/blog/2441-Nested-Views-Routing-And-Deep-Linking-With-AngularJS.htm">AngularJS 嵌套视图，路由和深层链接</a></li>
<li><a href="https://angular-ui.github.io/ui-router/sample/#/">Angular UI 路由器</a></li>
<li><a href="https://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs/">AngularJS 使用 UI 路由器基础</a></li>
<li><a href="https://weblogs.asp.net/dwahlin/archive/2013/08/14/angularjs-routing-changes.aspx">**AngularJS 路由变化</a></li>
</ul>
<h2 id="承诺-递延-Promises-Deferred"><a href="#承诺-递延-Promises-Deferred" class="headerlink" title="承诺/递延 Promises/Deferred"></a>承诺/递延 Promises/Deferred</h2><ul>
<li><a href="https://www.blogeek.com.ar/2013/05/02/enhancing-angular-promises-returning-new-promise-of-field-or-method-called-from-original-promises-result/">加强 Angular 承诺: 从当初的诺言的结果中返回字段或方法的新的承诺</a></li>
<li><a href="https://blog.brunoscopelliti.com/angularjs-promise-or-dealing-with-asynchronous-requests-in-angularjs">AngularJS 承诺，或在 AngularJS 处理异步请求</a></li>
<li><a href="https://imownbey.github.io/skinny_controllers_for_yeezus.html">在 AngularJS 中利用 Futures </a></li>
<li><a href="https://markdalgleish.com/2013/06/using-promises-in-angularjs-views/">在 AngularJS 视图中使用承诺</a></li>
<li><a href="https://liamkaufman.com/blog/2013/09/09/using-angularjs-promises/">使用 AngularJS 承诺</a></li>
<li><a href="https://blog.brunoscopelliti.com/show-route-only-after-all-promises-are-resolved">只有在所有的承诺都解决了再显示路由</a></li>
</ul>
<h2 id="表单-Forms"><a href="#表单-Forms" class="headerlink" title="表单 Forms"></a>表单 Forms</h2><ul>
<li><a href="https://blog.brunoscopelliti.com/form-validation-the-angularjs-way">AngularJS 表单验证</a></li>
<li><a href="https://blog.brunoscopelliti.com/angularjs-directive-to-test-the-strength-of-a-password">AngularJS 指令来测试密码强度</a></li>
<li><a href="https://blog.brunoscopelliti.com/angularjs-directive-to-check-that-passwords-match">AngularJS 指令来检查密码是否匹配</a></li>
<li><a href="https://www.bennadel.com/blog/2452-Mixing-Static-And-Dynamic-Data-In-An-AngularJS-Select-Menu.htm">在 AngularJS 选择菜单中混合静态和动态数据</a></li>
<li><a href="https://www.grobmeier.de/angular-js-ng-select-and-ng-options-21112012.html">Angular.js: ng-select 和 ng-options</a></li>
<li><a href="https://www.grobmeier.de/angular-js-autocomplete-and-enabling-a-form-with-watch-and-blur-19112012.html">Angular.js: 用 $watch 和 blur 自动完成和启用表单</a></li>
<li><a href="https://kazimanzurrashid.com/posts/create-angularjs-directives-to-remove-duplicate-codes-in-form">创建 AngularJS 指令在表格中来删除重复的代码</a></li>
<li><a href="https://www.bennadel.com/blog/2468-Forced-Repaints-In-Directive-Can-Cause-Accidental-Scrolling-In-AngularJS.htm">In AngularJS 在指令中强制重绘会导致意外滚动</a></li>
<li><a href="https://odetocode.com/blogs/scott/archive/2013/06/19/using-ngoptions-in-angularjs.aspx">在 AngularJS 中使用 ngOptions</a></li>
<li><a href="https://sravi-kiran.blogspot.com/2013/06/ShowingValidationMessagesInBulkWhileValidatingFormUsingAngularJS.html">用 Angular JS 验证表单显示大量验证消息</a></li>
<li><a href="https://blog.brunoscopelliti.com/a-directive-to-manage-file-upload-in-an-angularjs-application">在 AngularJS 应用程序管理文件上传的指令</a></li>
<li><a href="https://odetocode.com/blogs/scott/archive/2013/06/25/radio-buttons-with-angularjs.aspx">AngularJS 单选按钮</a></li>
<li><a href="https://shazwazza.com/post/Reference-the-current-form-controller-in-AngularJS">AngularJS Referece 当前的 FormController</a></li>
<li><a href="https://shazwazza.com/post/Listening-for-validation-changes-in-AngularJS">在 AngularJS 中监听变化的验证</a></li>
<li><a href="https://www.bennadel.com/blog/2492-What-A-Select-watch-Teaches-Me-About-ngModel-And-AngularJS.htm">A Select $watch() 教我关于 ngModel 和 AngularJS</a></li>
<li><a href="https://code.realcrowd.com/on-the-bleeding-edge-advanced-angularjs-form-validation/">最前沿的：高级 AngularJS 表单验证</a></li>
<li><a href="https://aboutcode.net/2013/07/13/twitter-bootstrap-control-group-directive-for-angularjs.html">Twitter Bootstrap control-group directive for AngularJS</a></li>
<li><a href="https://blog.codebrag.com/post/57412530001/preventing-duplicated-requests-in-angularjs">在 AngularJS 中防止重复的请求</a></li>
<li><a href="https://blog.jasoncust.com/2013/08/angularjs-missing-directives-native.html">AngularJS 缺少的指令：原表单复位</a></li>
<li><a href="https://blog.jasoncust.com/2013/08/angularjs-missing-directives-focus-blur_14.html">**AngularJS 缺少的指令：焦点和模糊</a></li>
<li><a href="https://www.benlesh.com/2013/03/angular-js-validating-form-elements-in.html">Angular JS: 重复验证表单元素</a></li>
<li><a href="https://www.benlesh.com/2012/12/angular-js-custom-validation-via.html">Angular JS: 通过指令自定义验证</a></li>
<li><a href="https://www.benlesh.com/2012/11/angular-js-form-validation.html">Angular JS: 表单验证</a></li>
<li><a href="https://www.ng-newsletter.com/posts/validations.html">深入学习表单验证</a></li>
<li><a href="https://jeremymarc.github.io/2013/08/20/ng-model-and-custom-form-validation/">Ng-model 和自定义表单验证</a></li>
<li><a href="https://www.amitavroy.com/justread/content/articles/angular-js-ajax-dropdowns-date-picker-and-saving-data">Angular JS Ajax 下拉菜单，日期选择器和保存数据</a></li>
<li><a href="https://mrbool.com/the-concepts-of-angularjs-forms/29117">AngularJS 表单的概念</a></li>
</ul>
<h2 id="认证-Authentication"><a href="#认证-Authentication" class="headerlink" title="认证 Authentication"></a>认证 Authentication</h2><ul>
<li><a href="https://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app">AngularJS Web 应用程序处理用户身份验证</a></li>
<li><a href="https://www.frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/">Angular.js 单页应用程序验证</a></li>
<li><a href="https://arthur.gonigberg.com/2013/06/29/angularjs-role-based-auth/">AngularJS – 快速的基于角色的认证</a></li>
<li><a href="https://vickev.com/#!/article/authentication-in-single-page-applications-node-js-passportjs-angularjs">单页应用验证</a></li>
</ul>
<h2 id="Collections-amp-ngRepeat-Stuff"><a href="#Collections-amp-ngRepeat-Stuff" class="headerlink" title="Collections (&amp; ngRepeat Stuff)"></a>Collections (&amp; ngRepeat Stuff)</h2><ul>
<li><a href="https://www.bennadel.com/blog/2485-Working-With-Inherited-Collections-In-AngularJS.htm">使用 AngularJS 继承来的 Collection</a></li>
<li><a href="https://www.bennadel.com/blog/2451-Adding-An-ngRepeat-List-Delimiter-In-AngularJS.htm">在 AngularJS 中 添加 ngRepeat 列表分隔符</a></li>
<li><a href="https://www.bennadel.com/blog/2456-Grouping-Nested-ngRepeat-Lists-In-AngularJS.htm">在 AngularJS 中分组嵌套 ngRepeat 列表</a></li>
<li><a href="https://www.bennadel.com/blog/2450-Using-ngController-With-ngRepeat-In-AngularJS.htm">在 AngularJS 中使用 ngController 和 ngRepeat</a></li>
<li><a href="https://www.bennadel.com/blog/2443-Rendering-DOM-Elements-With-ngRepeat-In-AngularJS.htm">在 AngularJS 中通过 ngRepeat 渲染 DOM 元素</a></li>
</ul>
<h2 id="原始码组织架构-Code-Organization"><a href="#原始码组织架构-Code-Organization" class="headerlink" title="原始码组织架构 Code Organization"></a>原始码组织架构 Code Organization</h2><ul>
<li><a href="https://briantford.com/blog/huuuuuge-angular-apps.html">用 AngularJS 开发超大的应用程序</a></li>
<li><a href="https://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript">大 AngularJS 和 JavaScript 的应用的代码组织</a></li>
<li><a href="https://www.blogeek.com.ar/2013/05/18/proposed-angulars-project-structure/">Angular 应用程序的网页结构构想</a></li>
<li><a href="https://www.blogeek.com.ar/2013/03/23/the-right-way-of-coding-angularjs-how-to-organize-a-regular-webapp/">如何组织一个普通 Web 应用程序： 编码 AngularJS 的正确方法。基本示例</a></li>
<li><a href="https://codingsmackdown.tv/blog/2013/04/19/angularjs-modules-for-great-justice/">AngularJS 模块</a></li>
<li><a href="https://github.com/Nikku/requirejs-angular-define">ngDefine: AngularJS &amp; RequireJS</a></li>
<li><a href="https://clintberry.com/2013/modular-angularjs-application-design/">模块化 AngularJS 应用设计</a></li>
<li><a href="https://solutionoptimist.com/2013/09/30/requirejs-angularjs-dependency-injection/">在 AngularJS DI 中使用 RequireJS</a></li>
</ul>
<h2 id="测试-Testing"><a href="#测试-Testing" class="headerlink" title="测试 Testing"></a>测试 Testing</h2><ul>
<li><a href="https://www.yearofmoo.com/2013/01/full-spectrum-testing-with-angularjs-and-testacular.html">用 AngularJS 和 Testacular 进行全频谱测试</a></li>
<li><a href="https://codingsmackdown.tv/blog/2012/12/28/mocking-promises-in-unit-tests/">在单元测试中 Mocking 承诺</a></li>
<li><a href="https://newtriks.com/2013/04/26/how-to-test-an-angularjs-directive/">如何测试 AngularJS 指令</a></li>
<li><a href="https://sravi-kiran.blogspot.com/2013/04/UnitTestingAngularJsControllerUsingJasmine.html">用 Jasmine 单元测试 AngularJS 控制器</a></li>
<li><a href="https://sravi-kiran.blogspot.com/2013/06/UnitTestingAngularJsControllerUsingQUnitAndSinon.html">使用 QUnit 和 Sinon 单元测试 AngularJS 控制器</a></li>
<li><a href="https://www.portlandwebworks.com/blog/testing-angularjs-directives-handling-external-templates">测试 AngularJS Directive： 处理外部模板</a></li>
<li><a href="https://www.alexrothenberg.com/2013/08/06/how-to-unit-test-an-angular-app.html">如何进行 Angular 应用程序的单元测试</a></li>
<li><a href="https://www.benlesh.com/2013/06/angular-js-unit-testing-directives.html">单元测试 - 指令 Directives</a></li>
<li><a href="https://www.benlesh.com/2013/06/angular-js-unit-testing-services.html">单元测试 - 服务</a></li>
<li><a href="https://www.benlesh.com/2013/05/angularjs-unit-testing-controllers.html">单元测试 - 控制器</a></li>
<li><a href="https://flippinawesome.org/2013/09/09/mocking-server-dependencies-in-javascript-and-angularjs/">在 JavaScript 和 AngularJS 中 mock 服务器依赖性</a></li>
<li><a href="https://www.yearofmoo.com/2013/09/advanced-testing-and-debugging-in-angularjs.html">AngularJS 先进的测试和调试的</a></li>
<li><a href="https://andyshora.com/unit-testing-best-practices-angularjs.html">AngularJS 单元测试的最佳实践</a></li>
<li><a href="https://blogs.mulesoft.org/angularjs-using-decorators-for-unit-testing/">在 AngularJS 中装饰你的测试</a></li>
</ul>
<h2 id="RESTful-Stuff"><a href="#RESTful-Stuff" class="headerlink" title="RESTful Stuff"></a>RESTful Stuff</h2><ul>
<li><a href="https://www.bennadel.com/blog/2433-Using-RESTful-Controllers-In-An-AngularJS-Resource.htm">在 AngularJS 资源中使用 REST 风格的控制器</a></li>
<li><a href="https://www.blogeek.com.ar/2013/04/09/restangular-new-angular-framework-to-handle-restful-resources-properly-and-easily/">Restangular: 新 AngularJS 框架来适当地，轻松地处理 REST API REST 风格的资源</a></li>
<li><a href="https://www.blogeek.com.ar/2013/04/26/new-features-on-restangular-the-ultimate-rest-api-client-for-angularjs/">Restangular 新功能: 针对 Angular 的终极 REST API 客户端</a></li>
<li><a href="https://weblogs.asp.net/dwahlin/archive/2013/08/16/using-an-angularjs-factory-to-interact-with-a-restful-service.aspx">使用 AngularJS 厂服务与 RESTful 服务实现互动</a></li>
<li><a href="https://blog.brunoscopelliti.com/authentication-to-a-restful-web-service-in-an-angularjs-web-app">在 AngularJS web 应用程序中实现一个 REST 风格的 Web 服务身份验证</a></li>
</ul>
<h2 id="本地化-Localization"><a href="#本地化-Localization" class="headerlink" title="本地化 Localization"></a>本地化 Localization</h2><ul>
<li><a href="https://codingsmackdown.tv/blog/2013/04/23/localizing-your-angularjs-apps-update/">Localizing Your AngularJS Apps</a></li>
<li><a href="https://blog.brunoscopelliti.com/internazionalization-i18n-with-angularjs">Internazionalization (i18n) with AngularJS</a></li>
<li><a href="https://coderwall.com/p/uyrtpq">AngularJS And i18n</a></li>
</ul>
<h2 id="界面-UI-Stuff"><a href="#界面-UI-Stuff" class="headerlink" title="界面 UI Stuff"></a>界面 UI Stuff</h2><ul>
<li><a href="https://angular-ui.github.io/">Angular UI 套件（包括一些子项目）</a></li>
<li><a href="https://www.yearofmoo.com/2013/04/animation-in-angularjs.html">AngularJS 动画</a></li>
<li><a href="https://www.yearofmoo.com/2013/05/enhanced-animations-in-angularjs.html">在 AngularJS 增强的动画功能</a></li>
<li><a href="https://www.befundoo.com/blog/angularjs-popup-dialog/">可重复使用的 AngularJS 弹出的对话框中服务</a></li>
<li><a href="https://www.bennadel.com/blog/2440-Creating-A-Custom-Show-Hide-Directive-In-AngularJS.htm">在 AngularJS 中创建自定义显示/隐藏 Directive </a></li>
<li><a href="https://www.grobmeier.de/bootstrap-tabs-with-angular-js-25112012.html">在 Angular.js 中实现 Bootstrap Tabs</a></li>
<li><a href="https://codingsmackdown.tv/blog/2013/01/02/using-response-interceptors-to-show-and-hide-a-loading-widget/">使用拦截器的响应显示和隐藏一个装载小工具</a></li>
<li><a href="https://hueypetersen.com/posts/2013/06/24/typeahead-with-angular/">用 AngularJS 建立一个 Typeahead Directive </a></li>
<li><a href="https://fundoo-solutions.github.io/angularjs-modal-service/">AngularJS Modal 服务</a></li>
<li><a href="https://www.bennadel.com/blog/2497-Cross-Fading-Images-With-AngularJS.htm">AngularJS 中实现交叉衰落图像</a></li>
<li><a href="https://dailyjs.com/2013/06/07/angular-svg/">AngularJS 和 SVG</a></li>
<li><a href="https://jjperezaguinaga.wordpress.com/2013/07/16/angularjs-scroll-animations/">AngularJS: 滚动动画</a></li>
<li><a href="https://flippinawesome.org/2013/08/05/animating-with-angularjs/">AngularJS 动画</a></li>
<li><a href="https://buildinternet.com/2013/08/drag-and-drop-file-upload-with-angularjs/">用 AngularJS 实现拖放文件上传</a></li>
<li><a href="https://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html">**在 AngularJS 1.2 中重新掌握动画</a></li>
<li><a href="https://www.benlesh.com/2013/02/angular-js-scrolling-to-element-by-id.html">Angular JS - 通过 ID 滚动到某个元素</a></li>
<li><a href="https://weblogs.asp.net/dwahlin/archive/2013/08/19/building-an-angularjs-dialog-service.aspx">构建 AngularJS 对话服务</a></li>
<li><a href="https://www.johnpapa.net/preparing-for-animations-in-angular-1-2-0/">**在 Angular 1.2.0 中准备使用动画</a></li>
<li><a href="https://www.exratione.com/2013/09/replacing-jqueryslidedown-with-nganimate-in-angularjs-120/">**在 AngularJS 1.2.0 中用 ngAnimate 替换 jQuery.slideDown()</a></li>
<li><a href="https://veamospues.wordpress.com/2013/10/13/angularjs-blurred-image-directive/">AngularJS: 模糊图像 directive</a></li>
<li><a href="https://julienrenaux.fr/2013/10/27/create-a-load-more-widget-using-angularjs-ajax-and-bootstrap-3/">使用 AngularJS，Ajax 和 Bootstrap 3 来建立一个“加载更多”小工具</a></li>
</ul>
<h2 id="整合其他语言-框架-Integration-With-Other-Languages-Frameworks"><a href="#整合其他语言-框架-Integration-With-Other-Languages-Frameworks" class="headerlink" title="整合其他语言/框架 Integration With Other Languages/Frameworks"></a>整合其他语言/框架 Integration With Other Languages/Frameworks</h2><ul>
<li><a href="https://notebookheavy.com/2013/05/22/angularjs-and-typescript/">AngularJS 和 TypeScript</a></li>
<li><a href="https://spiiice.net/using-angularjs-and-d3-to-create-a-wordcloud-directive/">用 AngularJS 和 D3 来建立一个 WordCloud Directive</a></li>
<li><a href="https://www.bennadel.com/blog/2448-Using-jQuery-Event-Delegation-In-AngularJS.htm">在 AngularJS 中用 jQuery Event Delegation </a></li>
<li><a href="https://sravi-kiran.blogspot.in/2013/05/HookingUpAspNetSignalRWithAngularJS.html">Hooking up ASP.NET SignalR with Angular JS</a></li>
<li><a href="https://blog.brunoscopelliti.com/facebook-authentication-in-your-angularjs-web-app">在你的 AngularJS 应用程序进行 Facebook 的身份验证</a></li>
<li><a href="https://newtriks.com/2013/06/11/automating-angularjs-with-yeoman-grunt-and-bower/">用 Yeoman, Grunt &amp; Bower 来全面自动化你的 Angular 开发过程</a></li>
<li><a href="https://briantford.com/blog/angular-bower.html">用 Bower 编写可重用的 AngularJS 组件</a></li>
<li><a href="https://wbyoko.co/angularjs/angularjs-google-maps-components.html">用 ngularJS 开发谷歌地图的组件</a></li>
<li><a href="https://mircozeiss.com/sync-multiple-angularjs-apps-without-server-via-pouchdb/">无需服务器来通过 PouchDB 来同步多个 AngularJS 应用程序</a></li>
<li><a href="https://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb/">用 AngularJS 和 PouchDB 构建离线应用</a></li>
<li><a href="https://shellycloud.com/blog/2013/10/how-to-integrate-angularjs-with-rails-4">如何 AngularJS 和 Rails 集成 4</a></li>
</ul>
<h2 id="后端代管-Hosted-Backends"><a href="#后端代管-Hosted-Backends" class="headerlink" title="后端代管 Hosted Backends"></a>后端代管 Hosted Backends</h2><ul>
<li><a href="https://brandid.github.io/parse-angular-demo/#/features">Parse.com boilerplate 建设大型，复杂 AngularJS 应用</a></li>
<li><a href="https://github.com/firebase/angularFire">用 Firebase 用于 Angular 应用程序的实时数据库</a></li>
<li><a href="https://blog.backlift.com/entry/angular-tut1">用 Backlift 开发针对 Angular 的 CRUD 后端 </a></li>
<li><a href="https://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb/">用 AngularJS 和 PouchDB 构建离线应用</a></li>
<li><a href="https://www.dreamfactory.com/angularjs-example">用 DreamFactory 开发 针对 Angular 的 CRUD 后端</a></li>
<li><a href="https://www.firebase.com/blog/2013-10-04-firebase-angular-data-binding.html">Firebase 和 Angular 三个双向数据绑定</a></li>
</ul>
<h2 id="移动装置-Mobile"><a href="#移动装置-Mobile" class="headerlink" title="移动装置 Mobile"></a>移动装置 Mobile</h2><ul>
<li><a href="https://devgirl.org/2013/06/10/quick-start-guide-phonegap-and-angularjs/">PhoneGap+AngularJS 快速入门指南</a></li>
<li><a href="https://briantford.com/blog/angular-phonegap.html">用 AngularJS 开发 PhoneGap 引用程序</a></li>
<li><a href="https://tech.pro/tutorial/1357/phonegap-and-angularjs-in-app-browser">PhoneGap 和 AngularJS: In App Browser</a></li>
<li><a href="https://tech.pro/tutorial/1349/phonegap-and-angularjs-notification-service">PhoneGap 和 AngularJS: Notification Service</a></li>
<li><a href="https://abou-kone.com/2013/07/17/developing-a-mobile-app-with-phonegap-angularjs-and-expressjs-part-i/">用 Phonegap, AngularJS 和 ExpressJS 开发移动程序第一部分</a></li>
</ul>
<h2 id="编译器-Text-editor-bundles-IDE-Stuff"><a href="#编译器-Text-editor-bundles-IDE-Stuff" class="headerlink" title="编译器 Text editor bundles/IDE Stuff"></a>编译器 Text editor bundles/IDE Stuff</h2><ul>
<li><a href="https://github.com/angular-ui/AngularJS-sublime-package">Sublime text 2 包</a></li>
<li><a href="https://github.com/matthewsimo/angular-vim-snippets">VIM UltiSnip &amp; Snipmate AngularJS 代码片段 </a></li>
<li><a href="https://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/">在 WebStorm 7 中运行 Javscript 测试</a></li>
<li><a href="https://www.microsoft.com/visualstudio">Visual Studio</a></li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul>
<li><a href="https://github.com/angular/angularjs-batarang">AngularJS Batarang Chrome 浏览器扩展</a></li>
<li><a href="https://spascaffold.azurewebsites.net/AngularJSScaffold">从 JSON 或者 restful API 生成 JavaScript 和 HTML，使用 AngularJS 和 JQuery</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>用jPages为Jekyll增加分页</title>
    <url>//2016/06/04/jekyll-pagination-with-jpages.html</url>
    <content><![CDATA[<p>Jekyll 自带的分页功能总不是那么全，在<a href="https://jekyll.bootcss.com/docs/pagination/">官方文档</a>中有讲到 Jekyll 自带分页的使用方法，为了达到更好的分页效果，比如在不同类别的文章下进行分页，就要用别的方法来实现了。</p>
<p>首先，在网上我也找到了很多 Jekyll 的第三方插件，功能很强大，不过 github 不允许使用，无奈之下只好另寻他法。因为平时做网站开发想到的都是后端分页的方法，那么在 github 这个不用考虑性能的网站上，我们为什么不能尝试使用前端分页的方法呢？而且我们的文章也不是非常多，一次得到所有数据再分页未尝不可。就这样，我在网上找到了一些基于 jQuery 的前端分页插件，使用感觉最好的就是<a href="https://luis-almeida.github.io/jPages/">jPages</a>了。</p>
<p>jPages 的文档很详细，每种分页的方法从 html、JavaScript 到 CSS 都有源代码，并有展示，这里我讲一下我是怎么用到 jekyll 中，我使用的是 items per page 这个 example：</p>
<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>首先需要把 jPages.js 和 js.js 引入页面，放在 jQuery.js 的下面</p>
<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>然后在<code>_includes/head.html</code>中加入对应的 js：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">/* initiate the plugin */</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div.pag-holder'</span>).jPages(&#123;</span></span><br><span class="line"><span class="actionscript">      containerID: <span class="string">'pag-itemContainer'</span>,</span></span><br><span class="line"><span class="actionscript">      perPage: <span class="number">5</span> <span class="comment">/* num of items per page */</span>,</span></span><br><span class="line">      startPage: 1,</span><br><span class="line">      startRange: 1,</span><br><span class="line">      midRange: 3,</span><br><span class="line">      endRange: 1,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个 js 的作用是对<code>id=&quot;pag-holder&quot;</code>的 div 进行渲染，主要是实现对应的页数和样式，对应的 html 在<code>_includes/pagination.html</code>中，注意 js 中的<code>containerID</code>，它会找页面中<code>id=pag-itemContainer</code>的 id，对其进行分页，观察得到其实他就是将所有的 item 包装成<code>&lt;ul&gt;&lt;li&gt;</code>，然后对每个 item 进行分页，然后下面就好做了，下面是<code>python.html</code>中的部分代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"pag-itemContainer"</span> <span class="attr">style</span>=<span class="string">"list-style:none;"</span>&gt;</span></span><br><span class="line">  &#123;\% assign counter = 0 \%&#125; &#123;\% for post in site.categories['Python'] \%&#125; &#123;\%</span><br><span class="line">  assign counter = counter | plus: 1 \%&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ps：因为 jekyll 会对代码中语法检查，我使用”\“进行转义</li>
</ul>
<p>因为直接使用<code>&lt;ul&gt;&lt;li&gt;</code>会有一个圆点在每个 item 之前，使用<code>style=&quot;list-style:none;&quot;</code>即可去除，这里我用了一个计数器，是为了在<code>_includes/pagination.html</code>中判断文章是否达到分页要求，因为我设置的是<code>perPage:5</code>，所以我有一个大于 5 的判断。</p>
<h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>最后一步就是对分页的样式重新定义，因为 jPages 自带的样式很不好看，我使用的是 bootstrap，这里需要在<code>jPages.js</code>中进行修改，具体可以在我<a href="https://github.com/Jack614/jalpc_jekyll_theme/blob/gh-pages/static/js/jPages.js">项目</a>中的代码查看，有注释的部分是 jPages 原来的代码。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>pagination</tag>
        <tag>jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title>使用iTerm2上传下载文件</title>
    <url>//2016/05/29/Z-Modem-integration-for-iTerm2.html</url>
    <content><![CDATA[<p>在 Mac 上使用 iTerm2 确实让 Linux 终端操作方便的很多，加上<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>这个强大 shell 的利器，敲命令就像滚键盘一样。</p>
<p>但是 iTerm2 没有对文件上传下载进行支持，这个是要比 secureCRT 弱的地方，不过我们总有办法能够解决，因为 iTerm2 足够强大，下面是利用 rz/sz 工具来实现文件上传下载的方法：</p>
<p>在 Mac 电脑上安装 rz/sz：<code>brew install lrzsz</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iterm2-zmodem</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> copyright (c) 2013 by Harald Lapp &lt;harald@octris.org&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> AppleScript portion from:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in<span class="_">-a</span>-bash-script</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> licensed under cc-wiki with attribution required</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This script can be found at:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/aurora/iterm2-zmodem</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is a re-implementation of the shell scripts <span class="string">"iterm2-recv-zmodem.sh"</span> and</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"iterm2-send-zmodem.sh"</span> found at https://github.com/mmastrac/iterm2-zmodem</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> usage</span></span><br><span class="line">if [[ $1 != "sz" &amp;&amp; $1 != "rz" ]]; then</span><br><span class="line">    echo "usage: $0 sz|rz"</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> send Z-Modem cancel sequence</span></span><br><span class="line">function cancel &#123;</span><br><span class="line">	echo -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> send notification using growlnotify</span></span><br><span class="line">function notify &#123;</span><br><span class="line">    local msg=$1</span><br><span class="line"></span><br><span class="line">    if command -v growlnotify &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">        growlnotify -a /Applications/iTerm.app -n "iTerm" -m "$msg" -t "File transfer"</span><br><span class="line">    else</span><br><span class="line">        echo "# $msg" | tr '\n' ' '</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">setup</span></span><br><span class="line">[[ $LRZSZ_PATH != "" ]] &amp;&amp; LRZSZ_PATH=":$LRZSZ_PATH" || LRZSZ_PATH=""</span><br><span class="line"></span><br><span class="line">PATH=$(command -p getconf PATH):/usr/local/bin$LRZSZ_PATH</span><br><span class="line">ZCMD=$(</span><br><span class="line">    if command -v $1 &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">        echo "$1"</span><br><span class="line">    elif command -v l$1 &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">        echo "l$1"</span><br><span class="line">    fi</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> main</span></span><br><span class="line">if [[ $ZCMD = "" ]]; then</span><br><span class="line">    cancel</span><br><span class="line">    echo</span><br><span class="line"></span><br><span class="line">    notify "Unable to find Z-Modem tools"</span><br><span class="line">    exit</span><br><span class="line">elif [[ $1 = "rz" ]]; then</span><br><span class="line">    # receive a file</span><br><span class="line">    DST=$(</span><br><span class="line">        osascript \</span><br><span class="line">            -e "tell application \"iTerm\" to activate" \</span><br><span class="line">            -e "tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"" \</span><br><span class="line">            -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    if [[ $DST = "" ]]; then</span><br><span class="line">        cancel</span><br><span class="line">        echo</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">	cd "$DST"</span><br><span class="line"></span><br><span class="line">    notify "Z-Modem started receiving file"</span><br><span class="line"></span><br><span class="line">    $ZCMD -e -y</span><br><span class="line">    echo</span><br><span class="line"></span><br><span class="line">    notify "Z-Modem finished receiving file"</span><br><span class="line">else</span><br><span class="line">    # send a file</span><br><span class="line">    SRC=$(</span><br><span class="line">        osascript \</span><br><span class="line">            -e "tell application \"iTerm\" to activate" \</span><br><span class="line">            -e "tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"" \</span><br><span class="line">            -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\"\")"</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    if [[ $SRC = "" ]]; then</span><br><span class="line">        cancel</span><br><span class="line">        echo</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    notify "Z-Modem started sending</span><br><span class="line"><span class="meta">$</span><span class="bash">SRC<span class="string">"</span></span></span><br><span class="line"></span><br><span class="line">    $ZCMD -e "$SRC"</span><br><span class="line">    echo</span><br><span class="line"></span><br><span class="line">    notify "Z-Modem finished sending</span><br><span class="line"><span class="meta">$</span><span class="bash">SRC<span class="string">"</span></span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>首先将这个脚本写到/usr/local/bin/iterm2-zmodem 文件下，给它可执行权限<code>chmod +x /usr/local/bin/iterm2/zmodem</code>，这个脚本是在 Linux 终端使用 rz/sz 时调用的，需要由 iTerm2 触发，在 iTerm2-&gt;Preferences…-&gt;Profiles-&gt;Advanced 下的 Triggers，点击 Edit 进入编辑。加入如下配置即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Regular expression: \*\*B0100</span><br><span class="line">Action:             Run Coprocess</span><br><span class="line">Parameters:         &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-zmodem sz</span><br><span class="line"></span><br><span class="line">Regular expression: \*\*B00000000000000</span><br><span class="line">Action:             Run Coprocess</span><br><span class="line">Parameters:         &#x2F;usr&#x2F;local&#x2F;bin&#x2F;iterm2-zmodem rz</span><br></pre></td></tr></table></figure>

<p>Github 链接：<a href="https://github.com/Jack614/iterm2-zmodem">https://github.com/Jack614/iterm2-zmodem</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 记录</title>
    <url>//2016/05/27/js.html</url>
    <content><![CDATA[<h1 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h1><p>##算法</p>
<p><strong>循环数组的数组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function loop(arr) &#123;</span><br><span class="line">        if (arr &amp;&amp; arr.length &lt;&#x3D; 1) return arr[0];</span><br><span class="line">        var temA &#x3D; [];</span><br><span class="line">        for (var i &#x3D; 0, len1 &#x3D; arr[0].length; i &lt; len1; i++) &#123;</span><br><span class="line">            for (var j &#x3D; 0, len2 &#x3D; arr[1].length; j &lt; len2; j++) &#123;</span><br><span class="line">                temA.push(arr[0][i] + &#39;&amp;&#39; + arr[1][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr &#x3D; [temA].concat(arr.splice(2));</span><br><span class="line">        return arguments.callee(arr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr&#x3D;[];</span><br><span class="line">var arr1&#x3D;[1,2,3];</span><br><span class="line">var arr2&#x3D;[4,5,6];</span><br><span class="line">arr.push(arr1);</span><br><span class="line">arr.push(arr2);</span><br><span class="line"></span><br><span class="line">loop(arr);</span><br><span class="line"></span><br><span class="line">结果:[&quot;1&amp;4&quot;, &quot;1&amp;5&quot;, &quot;1&amp;6&quot;, &quot;2&amp;4&quot;, &quot;2&amp;5&quot;, &quot;2&amp;6&quot;, &quot;3&amp;4&quot;, &quot;3&amp;5&quot;, &quot;3&amp;6&quot;]</span><br><span class="line"></span><br><span class="line">var arr3&#x3D;[7,8,9];</span><br><span class="line">arr.push(arr3);</span><br><span class="line">loop(arr);</span><br><span class="line"></span><br><span class="line">结果:[&quot;1&amp;4&amp;7&quot;, &quot;1&amp;4&amp;8&quot;, &quot;1&amp;4&amp;9&quot;, &quot;1&amp;5&amp;7&quot;, &quot;1&amp;5&amp;8&quot;, &quot;1&amp;5&amp;9&quot;, &quot;1&amp;6&amp;7&quot;, &quot;1&amp;6&amp;8&quot;, &quot;1&amp;6&amp;9&quot;, &quot;2&amp;4&amp;7&quot;, &quot;2&amp;4&amp;8&quot;, &quot;2&amp;4&amp;9&quot;, &quot;2&amp;5&amp;7&quot;, &quot;2&amp;5&amp;8&quot;, &quot;2&amp;5&amp;9&quot;, &quot;2&amp;6&amp;7&quot;, &quot;2&amp;6&amp;8&quot;, &quot;2&amp;6&amp;9&quot;, &quot;3&amp;4&amp;7&quot;, &quot;3&amp;4&amp;8&quot;, &quot;3&amp;4&amp;9&quot;, &quot;3&amp;5&amp;7&quot;, &quot;3&amp;5&amp;8&quot;, &quot;3&amp;5&amp;9&quot;, &quot;3&amp;6&amp;7&quot;, &quot;3&amp;6&amp;8&quot;, &quot;3&amp;6&amp;9&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>两个数组比较</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr1&#x3D;[1,2,3];</span><br><span class="line">var arr2&#x3D;[1,3,5];</span><br><span class="line">var end &#x3D; arr1.length;</span><br><span class="line">var swap &#x3D; false;</span><br><span class="line">for (var i &#x3D; 0; i &lt; end;) &#123;</span><br><span class="line">  swap &#x3D; false;</span><br><span class="line">  for (var j &#x3D; i; j &lt; arr2.length; j++) &#123;</span><br><span class="line">      if (arr1[i] &#x3D;&#x3D; arr2[j]) &#123;</span><br><span class="line">          var tmp &#x3D; arr2[i];</span><br><span class="line">          arr2[i] &#x3D; arr2[j];</span><br><span class="line">          arr2[j] &#x3D; tmp;</span><br><span class="line">          swap &#x3D; true;</span><br><span class="line">          break;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (swap !&#x3D; true) &#123;</span><br><span class="line">      var tmp &#x3D; arr1[i];</span><br><span class="line">      arr1[i] &#x3D; arr1[--end];</span><br><span class="line">      arr1[end] &#x3D; tmp;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果: end 之前是相同的元素，end 之后是不同的元素<br>如果 end == arr1.length &amp;&amp; end == arr2.length,两个数组的值一样</p>
<h1 id="JS-call-方法"><a href="#JS-call-方法" class="headerlink" title="JS call 方法"></a>JS call 方法</h1><p>call 主要改变了 this 的指向</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; function()&#123;</span><br><span class="line">      console.log(this);    &#x2F;&#x2F; &#39;littledu&#39;</span><br><span class="line">     console.log(typeof this);      &#x2F;&#x2F;  Object</span><br><span class="line">     console.log(this instanceof String);    &#x2F;&#x2F; true</span><br><span class="line">&#125;</span><br><span class="line">a.call(&#39;littledu&#39;);</span><br></pre></td></tr></table></figure>

<p>call 了后，就把当前函数推入所传参数的作用域中去了，不知道这样说对不对，但反正 this 就指向了所传进去的对象就肯定的了。</p>
<h1 id="Array-prototype-slice-call-arguments"><a href="#Array-prototype-slice-call-arguments" class="headerlink" title="Array.prototype.slice.call(arguments)"></a>Array.prototype.slice.call(arguments)</h1><p>Array.prototype.slice.call(arguments)能将具有 length 属性的对象转成数组，除了 IE 下的节点集合（因为 ie 下的 dom 对象是以 com 对象的形式实现的，js 对象与 com 对象不能进行转换）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a&#x3D;&#123;length:2,0:&#39;first&#39;,1:&#39;second&#39;&#125;;</span><br><span class="line">Array.prototype.slice.call(a);&#x2F;&#x2F;  [&quot;first&quot;, &quot;second&quot;]</span><br><span class="line"></span><br><span class="line">var a&#x3D;&#123;length:2&#125;;</span><br><span class="line">Array.prototype.slice.call(a);&#x2F;&#x2F;  [undefined, undefined]</span><br></pre></td></tr></table></figure>

<h2 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h2><h3 id="attr-和-prop"><a href="#attr-和-prop" class="headerlink" title="attr()和 prop()"></a>attr()和 prop()</h3><p><a href="https://segmentfault.com/a/1190000002680303">https://segmentfault.com/a/1190000002680303</a></p>
<blockquote>
<p>取数据的时候用到了以前都没用过的<code>$(this).data(&#39;xxx&#39;)</code>的这种形式，后来看了手册才知道在 HTML5 中可以对元素进行自定义属性。格式类似于<code>data-xxx=&quot;value&quot;</code>,然后可以用 JQ 中的<code>.data()</code>方法进行存取数据。</p>
</blockquote>
<h4 id="操作对象不同"><a href="#操作对象不同" class="headerlink" title="操作对象不同"></a>操作对象不同</h4><p>在 jQuery 中 attr 表示 HTML 文档节点属性，而 prop 则表示 JS 对象属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里的id、class、data_id均是该元素文档节点的attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">data_id</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 这里的name、age、url均是obj的property</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> obj = &#123; name: <span class="string">'CodePlayer'</span>, age: <span class="number">18</span>, url: <span class="string">'https://www.365mini.com/'</span> &#125;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 jQuery 中，<code>prop()</code>函数的设计目标是用于设置或获取指定 DOM 元素(指的是 JS 对象，Element 类型)上的属性(property)；<code>attr()</code>函数的设计目标是用于设置或获取指定 DOM 元素所对应的文档节点上的属性(attribute)。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- attr()函数针对的是该文档节点的attribute --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">data_id</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// prop()函数针对的是该DOM元素(msg)自身的property</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $msg = $(msg);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然，在 jQuery 的底层实现中，函数<code>attr()</code>和<code>prop()</code>的功能都是通过 JS 原生的 Element 对象(如上述代码中的 msg)实现的。<code>attr()</code>函数主要依赖的是 Element 对象的 getAttribute()和 setAttribute()两个方法。<code>prop()</code>函数主要依赖的则是 JS 中原生的对象属性获取和设置方式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">data_id</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $msg = $(msg);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">/* *** attr()依赖的是Element对象的element.getAttribute( attribute ) 和 element.setAttribute( attribute, value ) *** */</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 相当于 msg.setAttribute("data_id", 145);</span></span></span><br><span class="line"><span class="actionscript">  $msg.attr(<span class="string">'data_id'</span>, <span class="number">145</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 相当于 msg.getAttribute("data_id");</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> dataId = $msg.attr(<span class="string">'data_id'</span>); <span class="comment">// 145</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">/* *** prop()依赖的是JS原生的 element[property] 和 element[property] = value; *** */</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 相当于 msg["pid"] = "pid值";</span></span></span><br><span class="line"><span class="actionscript">  $msg.prop(<span class="string">'pid'</span>, <span class="string">'pid值'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 相当于 msg["pid"];</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> testProp = $msg.prop(<span class="string">'pid'</span>); <span class="comment">// pid值</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然，jQuery 对这些操作方式进行了封装，使我们操作起来更加方便(比如以对象形式同时设置多个属性)，并且实现了跨浏览器兼容。</p>
<p>此外，虽然<code>prop()</code>针对的是 DOM 元素的<strong>property</strong>，而不是元素节点的<strong>attribute</strong>。不过 DOM 元素某些属性的更改也会影响到元素节点上对应的属性。例如，property 的 id 对应 attribute 的 id，property 的 className 对应 attribute 的 class。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">data_id</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> $msg = $(msg);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.writeln($msg.attr(<span class="string">'class'</span>)); <span class="comment">// test</span></span></span><br><span class="line"><span class="actionscript">  $msg.prop(<span class="string">'className'</span>, <span class="string">'newTest'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 修改className(property)导致class(attitude)也随之更改</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.writeln($msg.attr(<span class="string">'class'</span>)); <span class="comment">// newTest</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="应用版本不同"><a href="#应用版本不同" class="headerlink" title="应用版本不同"></a>应用版本不同</h4><p><code>attr()</code>是 jQuery 1.0 版本就有的函数，<code>prop()</code>是<strong>jQuery 1.6</strong>版本新增的函数。毫无疑问，在 1.6 之前，你只能使用<code>attr()</code>函数；1.6 及以后版本，你可以根据实际需要选择对应的函数。</p>
<h4 id="设置属性值类型不同"><a href="#设置属性值类型不同" class="headerlink" title="设置属性值类型不同"></a>设置属性值类型不同</h4><p>由于 attr()函数操作的是文档节点的属性，因此设置的属性值只能是字符串类型，如果不是字符串类型，也会调用其 toString()方法，将其转为字符串类型。<br>prop()函数操作的是 JS 对象的属性，因此设置的属性值可以为包括数组和对象在内的任意类型。</p>
<h4 id="其他的细节问题"><a href="#其他的细节问题" class="headerlink" title="其他的细节问题"></a>其他的细节问题</h4><p>在 jQuery 1.6 之前，只有<code>attr()</code>函数可用，该函数不仅承担了<em>attribute</em>的设置和获取工作，还同时承担了<em>property</em>的设置和获取工作。例如：在 jQuery 1.6 之前，<code>attr()</code>也可以设置或获取<strong>tagName</strong>、<strong>className</strong>、<strong>nodeName</strong>、<strong>nodeType</strong>等 DOM 元素的 property。</p>
<p>直到 jQuery 1.6 新增<code>prop()</code>函数，并用来承担 property 的设置或获取工作之后，<code>attr()</code>才只用来负责<strong>attribute</strong>的设置和获取工作。</p>
<p>★★★★★<br>此外，对于表单元素的<code>checked</code>、<code>selected</code>、<code>disabled</code>等属性，在 jQuery 1.6 之前，<code>attr()</code>获取这些属性的返回值为 Boolean 类型：如果被选中(或禁用)就返回<strong>true</strong>，否则返回<strong>false</strong>。</p>
<p>★★★★★<br>但是从 1.6 开始，使用<code>attr()</code>获取这些属性的返回值为<strong>String</strong>类型，如果被选中(或禁用)就返回<code>checked</code>、<code>selected</code>或<code>disabled</code>，否则(即元素节点没有该属性)返回<code>undefined</code>。并且，在某些版本中，这些属性值表示文档加载时的初始状态值，即使之后更改了这些元素的选中(或禁用)状态，对应的属性值也不会发生改变。因为 jQuery 认为：<strong>attribute</strong>的<strong>checked</strong>、<strong>selected</strong>、<strong>disabled</strong>就是表示该属性初始状态的值，<strong>property</strong>的<strong>checked</strong>、<strong>selected</strong>、<strong>disabled</strong>才表示该属性实时状态的值(值为 true 或 false)。</p>
<p>因此，在 jQuery 1.6 及以后版本中，请使用<code>prop()</code>函数来设置或获取<strong>checked</strong>、<strong>selected</strong>、<strong>disabled</strong>等属性。对于其它能够用<code>prop()</code>实现的操作，也尽量使用<code>prop()</code>函数。</p>
<h2 id="a-标签-href"><a href="#a-标签-href" class="headerlink" title="a 标签 href"></a>a 标签 href</h2><h4 id="href-属性和-onclick-属性触发事件-event-对象-this-不是同一个对象"><a href="#href-属性和-onclick-属性触发事件-event-对象-this-不是同一个对象" class="headerlink" title="href 属性和 onclick 属性触发事件 event 对象 this 不是同一个对象"></a>href 属性和 onclick 属性触发事件 event 对象 this 不是同一个对象</h4><h4 id="href-：触发事件的-this-是-window-对象"><a href="#href-：触发事件的-this-是-window-对象" class="headerlink" title="href ：触发事件的 this 是 window 对象"></a>href ：触发事件的 this 是 window 对象</h4><h4 id="onclick-：触发的事件-this-是控件"><a href="#onclick-：触发的事件-this-是控件" class="headerlink" title="onclick ：触发的事件 this 是控件"></a>onclick ：触发的事件 this 是控件<a></a></h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    href的event对象是window,因此这个this就是指的window</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:href_function(this,'href_function')"</span>&gt;</span></span><br><span class="line">      href="javascript:href_function(this,'href_function')"</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    onclick的对象是当前控件a,因此可以获取控件a（链接）相关的信息</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">onclick</span>=<span class="string">"_click(this,'_click')"</span>&gt;</span></span><br><span class="line">      onclick="_click(this,'_click')"</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> ss = <span class="string">'我是window对象的属性'</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">href_function</span><span class="params">(obj, param)</span> </span>&#123;</span></span><br><span class="line">    alert(param);</span><br><span class="line"><span class="actionscript">    alert(obj.outerHTML); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="actionscript">    alert(obj.ss); <span class="comment">//我是window对象的属性</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">_click</span>(<span class="params">obj, param</span>) </span>&#123;</span></span><br><span class="line">    alert(param);</span><br><span class="line"><span class="handlebars"><span class="xml">    alert(obj.outerHTML); //<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">onclick</span>=<span class="string">"_click(this,'_click')"</span>&gt;</span>onclick="_click(this,'_click')"<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">    alert(obj.ss); <span class="comment">//undefined</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 命令</title>
    <url>//2016/05/25/Linux%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<h1 id="Linux-相关操作"><a href="#Linux-相关操作" class="headerlink" title="Linux 相关操作"></a>Linux 相关操作</h1><h2 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;version 查看系统版本</span><br><span class="line">uname -a</span><br><span class="line">cat &#x2F;proc&#x2F;cpuinfo</span><br><span class="line">cat &#x2F;etc&#x2F;redhat-release</span><br><span class="line">getconf -a 查看系统所有变量</span><br><span class="line">getconf LONG_BIT 查看系统位数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># uname -a # 查看内核&#x2F;操作系统&#x2F;CPU信息</span><br><span class="line"># head -n 1 &#x2F;etc&#x2F;issue # 查看操作系统版本</span><br><span class="line"># cat &#x2F;proc&#x2F;cpuinfo # 查看CPU信息</span><br><span class="line"># hostname # 查看计算机名</span><br><span class="line"># lspci -tv # 列出所有PCI设备</span><br><span class="line"># lsusb -tv # 列出所有USB设备</span><br><span class="line"># lsmod # 列出加载的内核模块</span><br><span class="line"># env # 查看环境变量资源</span><br><span class="line"># free -m # 查看内存使用量和交换区使用量</span><br><span class="line"># df -h # 查看各分区使用情况</span><br><span class="line"># du -sh &lt;目录名&gt; # 查看指定目录的大小</span><br><span class="line"># grep MemTotal &#x2F;proc&#x2F;meminfo # 查看内存总量</span><br><span class="line"># grep MemFree &#x2F;proc&#x2F;meminfo # 查看空闲内存量</span><br><span class="line"># uptime # 查看系统运行时间、用户数、负载</span><br><span class="line"># cat &#x2F;proc&#x2F;loadavg # 查看系统负载磁盘和分区</span><br><span class="line"># mount | column -t # 查看挂接的分区状态</span><br><span class="line"># fdisk -l # 查看所有分区</span><br><span class="line"># swapon -s # 查看所有交换分区</span><br><span class="line"># hdparm -i &#x2F;dev&#x2F;hda # 查看磁盘参数(仅适用于IDE设备)</span><br><span class="line"># dmesg | grep IDE # 查看启动时IDE设备检测状况网络</span><br><span class="line"># ifconfig # 查看所有网络接口的属性</span><br><span class="line"># iptables -L # 查看防火墙设置</span><br><span class="line"># route -n # 查看路由表</span><br><span class="line"># netstat -lntp # 查看所有监听端口</span><br><span class="line"># netstat -antp # 查看所有已经建立的连接</span><br><span class="line"># netstat -s # 查看网络统计信息进程</span><br><span class="line"># ps -ef # 查看所有进程</span><br><span class="line"># top # 实时显示进程状态用户</span><br><span class="line"># w # 查看活动用户</span><br><span class="line"># id &lt;用户名&gt; # 查看指定用户信息</span><br><span class="line"># last # 查看用户登录日志</span><br><span class="line"># cut -d: -f1 &#x2F;etc&#x2F;passwd # 查看系统所有用户</span><br><span class="line"># cut -d: -f1 &#x2F;etc&#x2F;group # 查看系统所有组</span><br><span class="line"># crontab -l # 查看当前用户的计划任务服务</span><br><span class="line"># chkconfig –list # 列出所有系统服务</span><br><span class="line"># chkconfig –list | grep on # 列出所有启动的系统服务程序</span><br><span class="line"># rpm -qa # 查看所有安装的软件包</span><br><span class="line">iostat 显示存储细节</span><br><span class="line">cat &#x2F;proc&#x2F;meminfo 显示内存使用</span><br><span class="line">mpstat -P ALL 显示每个CPU状态</span><br><span class="line">pmap 显示进程占用内存量</span><br><span class="line">pstree -p 显示进程父子关系</span><br></pre></td></tr></table></figure>

<p>16 个 Linux 服务器监控命令<br><a href="https://roclinux.cn/?p=2549">https://roclinux.cn/?p=2549</a></p>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f catalina.out|grep --color -B 20 &#39;com.ync365.seed.service.user.impl&#39;</span><br></pre></td></tr></table></figure>

<h2 id="关闭-selinux"><a href="#关闭-selinux" class="headerlink" title="关闭 selinux"></a>关闭 selinux</h2><p>打开<code>/etc/selinux/config</code>，把<code>SELINUX=enforcing</code>改为<code>SELINUX=disabled</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure>

<h2 id="epel-源"><a href="#epel-源" class="headerlink" title="epel 源"></a>epel 源</h2><p><a href="https://dl.fedoraproject.org/pub/epel/6/x86_64/">https://dl.fedoraproject.org/pub/epel/6/x86_64/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;x86_64&#x2F;epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>

<h2 id="pushd-popd-切换目录"><a href="#pushd-popd-切换目录" class="headerlink" title="pushd popd 切换目录"></a>pushd popd 切换目录</h2><p>让切换目录更方便: pushd,popd,dirs,cd -</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一，为何要使用这几个命令?</span><br><span class="line">   可能大家会有疑问，为何要使用这几个命令，</span><br><span class="line">   难道用cd不就可以切换目录了吗？</span><br><span class="line">   没错，使用cd就可以切换到需要访问的目录，</span><br><span class="line">   但是有时会是一个路径很长，层次很多的目录，进到此目录下后，这时我们不小心运行了 cd命令，</span><br><span class="line">   理所当然，我们回到了自己的home目录，这时如果想回去怎么办？</span><br><span class="line"></span><br><span class="line">   还有：因为工作的需要，我们需要不停在几个很深层的目录之间切换，不止一个，</span><br><span class="line">   那么即使有tab键帮忙，我们也会因为一个cd命令花费很多时间,如何在多个目录之间切换时能更方便些</span><br><span class="line">   pushd,popd是我们的好帮手</span><br><span class="line"></span><br><span class="line">   说明:  pushd,popd，dirs这几个我们讲到的命令是bash内建的命令，</span><br><span class="line">         所以只要登录到了bash,这几个命令就可以使用了</span><br><span class="line"></span><br><span class="line">二,如何在两个目录之间切换?</span><br><span class="line">如果只是在两个目录之间切换，那么还不必使用pushd,</span><br><span class="line">  这时只需使用 cd -就可以了</span><br><span class="line"></span><br><span class="line">  cd -的作用是可以回到前一个目录，</span><br><span class="line">  看例子:</span><br><span class="line"></span><br><span class="line">  [root@localhost ~]# cd &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget&#x2F;pics&#x2F;</span><br><span class="line">  [root@localhost pics]# cd -</span><br><span class="line">   &#x2F;root</span><br><span class="line">  [root@localhost ~]# cd -</span><br><span class="line">   &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget&#x2F;pics</span><br><span class="line">  [root@localhost pics]#</span><br><span class="line"></span><br><span class="line">  怎么样？在两个目录之间切换非常方便，无需再输入很长的路径</span><br><span class="line"></span><br><span class="line">  说明:</span><br><span class="line">  为何cd -能够回到前一个目录?</span><br><span class="line">  这是因为 -在此处等同于 $OLDPWD变量,</span><br><span class="line">  此问题可以参见bash的info信息,</span><br><span class="line">  cd 一项有相关的说明: An argument of - is equivalent to $OLDPWD.</span><br><span class="line">$OLDPWD变量就是bash所记录的前一个目录</span><br><span class="line">  也就是说:$OLDPWD和-相等</span><br><span class="line"></span><br><span class="line">  下面我们再看一个例子:</span><br><span class="line">  [root@localhost ~]# cd &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget&#x2F;pics&#x2F;</span><br><span class="line">  [root@localhost pics]# echo $OLDPWD;</span><br><span class="line">  &#x2F;root</span><br><span class="line">  [root@localhost pics]# cd $OLDPWD</span><br><span class="line">  [root@localhost ~]# echo $OLDPWD;</span><br><span class="line">  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget&#x2F;pics</span><br><span class="line">  [root@localhost ~]# cd $OLDPWD;</span><br><span class="line">  [root@localhost pics]# echo $OLDPWD;</span><br><span class="line">  &#x2F;root</span><br><span class="line"></span><br><span class="line">   我们可以得到结构:  用cd -和cd $OLDPWD都可以在最近所操作的两个目录之间进行切换</span><br><span class="line"></span><br><span class="line">三,如何在多个目录之间切换?</span><br><span class="line">  因为 cd -和 cd $OLDPWD都是只支持最近操作的两个目录，所以要在多个目录之间操作时，</span><br><span class="line">  我们需要使用 pushd</span><br><span class="line"></span><br><span class="line">  1,</span><br><span class="line">  先来介绍我们会用到的3条命令</span><br><span class="line"></span><br><span class="line">  pushd：切换到作为参数的目录，并把原目录和当前目录压入到一个虚拟的堆栈中</span><br><span class="line">         如果不指定参数，则会回到前一个目录，并把堆栈中最近的两个目录作交换</span><br><span class="line"></span><br><span class="line">  popd： 弹出堆栈中最近的目录</span><br><span class="line">  dirs: 列出当前堆栈中保存的目录列表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  看例子:</span><br><span class="line">  [root@localhost ~]# pushd &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;</span><br><span class="line">  &#x2F;usr&#x2F;local&#x2F;sbin ~</span><br><span class="line">  [root@localhost sbin]# dirs</span><br><span class="line">  &#x2F;usr&#x2F;local&#x2F;sbin ~</span><br><span class="line">  [root@localhost sbin]# dirs -p -v</span><br><span class="line">   0  &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">   1  ~</span><br><span class="line">	[root@localhost sbin]# pushd &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget&#x2F;</span><br><span class="line">  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget &#x2F;usr&#x2F;local&#x2F;sbin ~</span><br><span class="line">  [root@localhost kget]# dirs -p -v</span><br><span class="line">   0  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">   1  &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">   2  ~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  说明: dirs的 -p参数可以每行一个目录的形式显示堆栈中的目录列表</span><br><span class="line">              -v参数可以在目录前加上编号</span><br><span class="line">              注意:有 -v时，不添加 -p也可以每行一个目录的形式显示</span><br><span class="line">  说明之二:我们可以看到:最近压入堆栈的目录位于最上面</span><br><span class="line"></span><br><span class="line">  2,如何在最近的两个目录之间切换?</span><br><span class="line"></span><br><span class="line">   在最近的两个目录之间切换:用pushd不加参数即可</span><br><span class="line"></span><br><span class="line">   [root@localhost kget]# pushd &#x2F;boot&#x2F;grub&#x2F;</span><br><span class="line">   &#x2F;boot&#x2F;grub &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget &#x2F;usr&#x2F;local&#x2F;sbin ~</span><br><span class="line"> 	[root@localhost grub]# dirs -v</span><br><span class="line">   0  &#x2F;boot&#x2F;grub</span><br><span class="line">   1  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">   2  &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">   3  ~</span><br><span class="line">   [root@localhost grub]# pushd</span><br><span class="line">   &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget &#x2F;boot&#x2F;grub &#x2F;usr&#x2F;local&#x2F;sbin ~</span><br><span class="line">   [root@localhost kget]# dirs -v</span><br><span class="line">   0  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">   1  &#x2F;boot&#x2F;grub</span><br><span class="line">   2  &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">   3  ~</span><br><span class="line">   [root@localhost kget]# pushd</span><br><span class="line">   &#x2F;boot&#x2F;grub &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget &#x2F;usr&#x2F;local&#x2F;sbin ~</span><br><span class="line">   [root@localhost grub]# dirs -v</span><br><span class="line">   0  &#x2F;boot&#x2F;grub</span><br><span class="line">   1  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">   2  &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">   3  ~</span><br><span class="line"> 说明：可以看到，用pushd不加参数在最近的两个目录之间切换时，</span><br><span class="line">        当前目录总是位于堆栈的最上面</span><br><span class="line"></span><br><span class="line">  3,如何在多个目录之间切换？</span><br><span class="line"></span><br><span class="line">   用 pushd +n即可</span><br><span class="line">   说明:</span><br><span class="line">   n是一个数字,有此参数时，是切换到堆栈中的第n个目录,并把此目录以堆栈循环的方式推到堆栈的顶部</span><br><span class="line">   需要注意: 堆栈从第0个开始数起</span><br><span class="line"></span><br><span class="line">   看例子:</span><br><span class="line"></span><br><span class="line">   [root@localhost grub]# dirs -v</span><br><span class="line">   0  &#x2F;boot&#x2F;grub</span><br><span class="line">   1  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">   2  &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">   3  ~</span><br><span class="line">   [root@localhost grub]# pushd +2</span><br><span class="line">   &#x2F;usr&#x2F;local&#x2F;sbin ~ &#x2F;boot&#x2F;grub &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">   [root@localhost sbin]# dirs -v</span><br><span class="line">   0  &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">   1  ~</span><br><span class="line">	2  &#x2F;boot&#x2F;grub</span><br><span class="line">   3  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line"></span><br><span class="line">   4,如何把目录从堆栈中删除?</span><br><span class="line">   用popd即可</span><br><span class="line"></span><br><span class="line">   看例子:</span><br><span class="line">   [root@localhost sbin]# dirs -v</span><br><span class="line">   0  &#x2F;usr&#x2F;local&#x2F;sbin</span><br><span class="line">   1  ~</span><br><span class="line">   2  &#x2F;boot&#x2F;grub</span><br><span class="line">   3  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">   [root@localhost sbin]# popd</span><br><span class="line">   ~ &#x2F;boot&#x2F;grub &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">   [root@localhost ~]# dirs -v</span><br><span class="line">   0  ~</span><br><span class="line">   1  &#x2F;boot&#x2F;grub</span><br><span class="line">   2  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">	[root@localhost ~]# popd +1</span><br><span class="line">    ~ &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">   [root@localhost ~]# dirs -v</span><br><span class="line">   0  ~</span><br><span class="line">   1  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line"></span><br><span class="line">   说明：可以看到popd不加参数的运行情况:</span><br><span class="line">        popd把堆栈顶端的目录从堆栈中删除，并切换于位于新的顶端的目录</span><br><span class="line">   说明之二: popd 加有参数 +n时，</span><br><span class="line">   n是堆栈中的第n个目录，表示把堆栈中第n个目录从堆栈中删除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">四，多学一点知识</span><br><span class="line"></span><br><span class="line">   1,pushd和popd都可以只影响堆栈而不切换目录</span><br><span class="line">     用 -n参数即可</span><br><span class="line"> 看例子:</span><br><span class="line">    [root@localhost ~]# dirs -v</span><br><span class="line">    0  ~</span><br><span class="line">    1  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">    [root@localhost ~]# pushd -n &#x2F;boot&#x2F;grub</span><br><span class="line">    ~ &#x2F;boot&#x2F;grub &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">    [root@localhost ~]# dirs -v</span><br><span class="line">     0  ~</span><br><span class="line">     1  &#x2F;boot&#x2F;grub</span><br><span class="line">     2  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line"></span><br><span class="line">    2, dirs可以清空目录堆栈</span><br><span class="line">      用 -c参数即可</span><br><span class="line"></span><br><span class="line">     看例子:</span><br><span class="line">     [root@localhost ~]# dirs -v</span><br><span class="line">     0  ~</span><br><span class="line">     1  &#x2F;boot&#x2F;grub</span><br><span class="line">     2  &#x2F;usr&#x2F;share&#x2F;kde4&#x2F;apps&#x2F;kget</span><br><span class="line">     [root@localhost ~]# dirs -c</span><br><span class="line"> 	[root@localhost ~]# dirs -v</span><br><span class="line">     0  ~</span><br><span class="line"></span><br><span class="line">     说明:  位于堆栈顶部的目录是当前目录，它不能被pop出去的</span><br></pre></td></tr></table></figure>

<h2 id="cp-实现强行覆盖"><a href="#cp-实现强行覆盖" class="headerlink" title="cp 实现强行覆盖"></a>cp 实现强行覆盖</h2><p><code>alias</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost storage]<span class="comment"># alias</span></span><br><span class="line"><span class="built_in">alias</span> cp=<span class="string">'cp -i'</span></span><br><span class="line"><span class="built_in">alias</span> l.=<span class="string">'ls -d .* --color=auto'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l --color=auto'</span></span><br><span class="line"><span class="built_in">alias</span> ls=<span class="string">'ls --color=auto'</span></span><br><span class="line"><span class="built_in">alias</span> mv=<span class="string">'mv -i'</span></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">'rm -i'</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">which</span>=<span class="string">'alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'</span></span><br><span class="line">[root@localhost storage]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>方法一</p>
<p><code>unaslias cp</code>（这只是临时取消 cp 的别名，不是永久的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#unaslias cp</span></span><br></pre></td></tr></table></figure>

<p>方法二</p>
<p>输入\cp 命令，作用也是取消 cp 的别名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#\cp -fr src dest</span></span><br></pre></td></tr></table></figure>

<p>方法三</p>
<p>输入<code>yes|cp -fr src dest</code>，使用管道自动输入 yes。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#yes | cp cp -fr src dest</span></span><br></pre></td></tr></table></figure>

<p>让管道自动输入一大堆得 yes，就可以完成了强行复制了。<br>那有人会问 dos 的 copy 命令怎么实现强行复制的呢？答案是<br>用来 <code>xcopy /y src dest</code> 来实现强行复制。</p>
<h2 id="pkill-命令"><a href="#pkill-命令" class="headerlink" title="pkill 命令"></a>pkill 命令</h2><p>来自: <a href="https://man.linuxde.net/pkill">https://man.linuxde.net/pkill</a></p>
<p>pkill 命令可以按照进程名杀死进程。pkill 和 killall 应用方法差不多，也是直接杀死运行中的程序；如果您想杀掉单个进程，请用 kill 来杀掉。</p>
<p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pkill(选项)(参数)</span><br></pre></td></tr></table></figure>

<p>选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-o：仅向找到的最小（起始）进程号发送信号；</span><br><span class="line">-n：仅向找到的最大（结束）进程号发送信号；</span><br><span class="line">-P：指定父进程号发送信号；</span><br><span class="line">-g：指定进程组；</span><br><span class="line">-t：指定开启进程的终端。</span><br></pre></td></tr></table></figure>

<p>参数</p>
<p>进程名称：指定要查找的进程名称，同时也支持类似 grep 指令中的匹配模式。</p>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pgrep -l gaim</span><br><span class="line">2979 gaim</span><br><span class="line"></span><br><span class="line">pkill gaim</span><br></pre></td></tr></table></figure>

<p>也就是说：kill 对应的是 PID，pkill 对应的是 command。</p>
<h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p>nohup 的用途就是让提交的命令忽略 hangup 信号。</p>
<p>在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上”&amp;”来将命令同时放入后台运行，也可用”&gt;filename 2&gt;&amp;1”来更改缺省的重定向文件名。</p>
<p>nohup 示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@xx ~]# nohup ping www.ibm.com &amp;</span><br><span class="line">[1] 3059</span><br><span class="line">nohup: appending output to &#96;nohup.out&#39;</span><br><span class="line">[root@pvcent107 ~]# ps -ef |grep 3059</span><br><span class="line">root      3059   984  0 21:06 pts&#x2F;3    00:00:00 ping www.ibm.com</span><br><span class="line">root      3067   984  0 21:06 pts&#x2F;3    00:00:00 grep 3059</span><br><span class="line">[root@xx ~]#</span><br></pre></td></tr></table></figure>

<h2 id="时间设置"><a href="#时间设置" class="headerlink" title="时间设置"></a>时间设置</h2><h3 id="linux-时间快-8-小时解决办法"><a href="#linux-时间快-8-小时解决办法" class="headerlink" title="linux 时间快 8 小时解决办法"></a>linux 时间快 8 小时解决办法</h3><p>要解决这个问题，首先要确认当前 CMOS 显示的时间是否是当前的时间，如果是则你的 CMOS 是非 UTC 时间（即 CST 当地时间），要修改<code>/etc/sysconfig/clock</code>文件，将里面的 UTC=true 改为 UTC=false （告诉 Linux 硬件设置的是当地时间）</p>
<p>这个是多数快 8 小时的原因，因为安装 Linux 时默认选项是使用 UTC 时间（可能国外电脑的 CMOS 都是设置的 UTC 时间），系统误认为你的 CMOS 是 UTC 时间，而你又选择了＋ 8 的时区，所以 Linux 在 CMOS 时间上加了 8 小时作为系统的时间</p>
<p>更改时区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm &#x2F;etc&#x2F;localtime</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai  &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure>

<p>读取硬件时间到系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clock --hctosys</span><br></pre></td></tr></table></figure>

<p>输入 Date 查看当前是否为 CST 时间（CST 表示当地时间，如我们设置的 Shanghai ），如果时间不正确用以下方式修改时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date -s 2010-02-03 12:00:00</span><br></pre></td></tr></table></figure>

<p>将系统时间写入硬件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clock --systohc</span><br></pre></td></tr></table></figure>

<h3 id="ntp-安装"><a href="#ntp-安装" class="headerlink" title="ntp 安装"></a>ntp 安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y ntp</span><br></pre></td></tr></table></figure>

<p>设置 ntp 服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ntp.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Hosts on local network are less restricted.</span><br><span class="line">#restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line">restrict 192.168.0.0 mask 255.255.0.0 nomodify notrap</span><br></pre></td></tr></table></figure>

<p>启动 ntp 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service ntpd start</span><br></pre></td></tr></table></figure>

<p>设置客户端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ntp.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Use public servers from the pool.ntp.org project.</span><br><span class="line"># Please consider joining the pool (https:&#x2F;&#x2F;www.pool.ntp.org&#x2F;join.html).</span><br><span class="line">#server 0.centos.pool.ntp.org iburst</span><br><span class="line">#server 1.centos.pool.ntp.org iburst</span><br><span class="line">#server 2.centos.pool.ntp.org iburst</span><br><span class="line">#server 3.centos.pool.ntp.org iburst</span><br><span class="line">server 192.168.100.10</span><br></pre></td></tr></table></figure>

<p>设置 ntpd 随机启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig ntpd on</span><br><span class="line">chkconfig ntpd --list</span><br></pre></td></tr></table></figure>

<p>检查 ntp 状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntpstat</span><br><span class="line">[root@localhost ~]# ntpstat</span><br><span class="line">synchronised to NTP server (192.168.100.10) at stratum 4</span><br><span class="line">   time correct to within 7968 ms</span><br><span class="line">   polling server every 64 s</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch ntpq -p</span><br></pre></td></tr></table></figure>

<h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><h2 id="centos-mini-安装桌面环境"><a href="#centos-mini-安装桌面环境" class="headerlink" title="centos mini 安装桌面环境"></a>centos mini 安装桌面环境</h2><p><a href="https://cnzhx.net/blog/centos-yum-install-desktop/">https://cnzhx.net/blog/centos-yum-install-desktop/</a></p>
<h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -rn 路由表</span><br></pre></td></tr></table></figure>

<h2 id="查看文件占用"><a href="#查看文件占用" class="headerlink" title="查看文件占用"></a>查看文件占用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -sh 文件大小</span><br><span class="line">df 磁盘信息</span><br></pre></td></tr></table></figure>

<h2 id="查看内存使用"><a href="#查看内存使用" class="headerlink" title="查看内存使用"></a>查看内存使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">free 内存信息  -m 以M为单位</span><br></pre></td></tr></table></figure>

<h2 id="查看操作系统"><a href="#查看操作系统" class="headerlink" title="查看操作系统"></a>查看操作系统</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getconfig LONG_BIT  64&#x2F;32位</span><br></pre></td></tr></table></figure>

<h2 id="xargs-命令"><a href="#xargs-命令" class="headerlink" title="xargs 命令"></a>xargs 命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xargs 	find &#x2F;sbin -perm +700 |ls -l       这个命令是错误的</span><br><span class="line">find &#x2F;sbin -perm +700 |xargs ls -l   这样才是正确的</span><br><span class="line">xargs 可以读入 stdin 的资料，并且以空白字元或断行字元作为分辨</span><br></pre></td></tr></table></figure>

<h2 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a>find 命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -name &#39;.project&#39; -print -exec rm -rf &#123;&#125; \; 递归删除</span><br></pre></td></tr></table></figure>

<h2 id="查看路由信息（经过网关）"><a href="#查看路由信息（经过网关）" class="headerlink" title="查看路由信息（经过网关）"></a>查看路由信息（经过网关）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">route -n get default</span><br><span class="line">route -n get www.google.com</span><br></pre></td></tr></table></figure>

<h2 id="追踪路由"><a href="#追踪路由" class="headerlink" title="追踪路由"></a>追踪路由</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">traceroute www.google.com</span><br></pre></td></tr></table></figure>

<h2 id="linux-serf"><a href="#linux-serf" class="headerlink" title="linux serf"></a>linux serf</h2><p>Serf is a tool for cluster membership, failure detection, and orchestration that is decentralized, fault-tolerant and highly available. Serf runs on every major platform: Linux, Mac OS X, and Windows. It is extremely lightweight: it uses 5 to 10 MB of resident memory and primarily communicates using infrequent UDP messages.<br><a href="https://www.serfdom.io/intro/index.html">https://www.serfdom.io/intro/index.html</a></p>
<h2 id="lsof-文件相关信息-pid-端口"><a href="#lsof-文件相关信息-pid-端口" class="headerlink" title="lsof 文件相关信息 pid 端口"></a>lsof 文件相关信息 pid 端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof &#96;which httpd&#96; &#x2F;&#x2F;那个进程在使用apache的可执行文件</span><br><span class="line">lsof &#x2F;etc&#x2F;passwd &#x2F;&#x2F;那个进程在占用&#x2F;etc&#x2F;passwd</span><br><span class="line">lsof &#x2F;dev&#x2F;hda6 &#x2F;&#x2F;那个进程在占用hda6</span><br><span class="line">lsof &#x2F;dev&#x2F;cdrom &#x2F;&#x2F;那个进程在占用光驱</span><br><span class="line">lsof -c sendmail &#x2F;&#x2F;查看sendmail进程的文件使用情况</span><br><span class="line">lsof -c courier -u ^zahn &#x2F;&#x2F;显示出那些文件被以courier打头的进程打开，但是并不属于用户zahn</span><br><span class="line">lsof -p 30297 &#x2F;&#x2F;显示那些文件被pid为30297的进程打开</span><br><span class="line">lsof -D &#x2F;tmp 显示所有在&#x2F;tmp文件夹中打开的instance和文件的进程。但是symbol文件并不在列</span><br><span class="line">lsof -u1000 &#x2F;&#x2F;查看uid是100的用户的进程的文件使用情况</span><br><span class="line">lsof -utony &#x2F;&#x2F;查看用户tony的进程的文件使用情况</span><br><span class="line">lsof -u^tony &#x2F;&#x2F;查看不是用户tony的进程的文件使用情况(^是取反的意思)</span><br><span class="line">lsof -i &#x2F;&#x2F;显示所有打开的端口</span><br><span class="line">lsof -i:80 &#x2F;&#x2F;显示所有打开80端口的进程</span><br><span class="line">lsof -i -U &#x2F;&#x2F;显示所有打开的端口和UNIX domain文件</span><br><span class="line">lsof -i UDP@[url]www.akadia.com:123 &#x2F;&#x2F;显示那些进程打开了到www.akadia.com的UDP的123(ntp)端口的链接</span><br><span class="line">lsof -i tcp@ohaha.ks.edu.tw:ftp -r &#x2F;&#x2F;不断查看目前ftp连接的情况(-r，lsof会永远不断的执行，直到收到中断信号,+r，lsof会一直执行，直到没有档案被显示,缺省是15s刷新)</span><br><span class="line">lsof -i tcp@ohaha.ks.edu.tw:ftp -n &#x2F;&#x2F;lsof -n 不将IP转换为hostname，缺省是不加上-n参数</span><br></pre></td></tr></table></figure>

<h2 id="SystemPerformance-sh"><a href="#SystemPerformance-sh" class="headerlink" title="SystemPerformance.sh"></a>SystemPerformance.sh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line"># add System paramter to &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">fileDesc&#x3D;&#96;grep &quot;fs.file-max&quot; &#x2F;etc&#x2F;sysctl.conf | awk &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">if [ &quot;fs.file-max&quot; !&#x3D; &quot;$&#123;fileDesc&#125;&quot; ];then</span><br><span class="line">    echo &quot;file.max not added&quot;</span><br><span class="line">    cat &lt;&lt; EOF &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line"></span><br><span class="line">#enhance system performance ,add by ChinaEdustar</span><br><span class="line">net.ipv4.tcp_timestamps &#x3D; 0</span><br><span class="line">net.core.somaxconn &#x3D; 2048</span><br><span class="line">net.core.netdev_max_backlog &#x3D; 4096</span><br><span class="line">net.core.dev_weight &#x3D; 64</span><br><span class="line">net.ipv4.tcp_keepalive_intvl &#x3D; 15</span><br><span class="line">net.ipv4.tcp_keepalive_probes &#x3D; 5</span><br><span class="line">net.core.rmem_default &#x3D; 110592</span><br><span class="line">net.core.rmem_max &#x3D; 262141</span><br><span class="line">net.ipv4.tcp_rmem &#x3D; 4096 98304 349520</span><br><span class="line">net.core.wmem_default &#x3D; 262141</span><br><span class="line">net.core.wmem_max &#x3D; 8388608</span><br><span class="line">net.ipv4.tcp_wmem &#x3D; 4096 65535 8388608</span><br><span class="line">net.ipv4.tcp_mem &#x3D; 8388608 8388608 8388608</span><br><span class="line">net.core.optmem_max &#x3D; 20480</span><br><span class="line">fs.file-max &#x3D; 209708</span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1</span><br><span class="line">net.ipv4.tcp_tw_recycle &#x3D; 1</span><br><span class="line">kernel.panic &#x3D; 1</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line">else</span><br><span class="line">    echo &quot;added&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo 209708 &gt;&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fileDesc&#x3D;&#96;grep &quot;nofile&quot; &#x2F;etc&#x2F;security&#x2F;limits.conf | awk &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">if [ &quot;*&quot; !&#x3D; &quot;$&#123;fileDesc&#125;&quot; ];then</span><br><span class="line">    echo &quot;*                -       nofile          209708&quot; &gt;&gt; &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line">else</span><br><span class="line">    echo &quot;limits.conf has added&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -f &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;90-nproc.conf ]; then</span><br><span class="line">  sed -i &#39;s&#x2F;nproc.*1024&#x2F;nproc   209708&#x2F;g&#39; &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;90-nproc.conf</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;&#96;rpm -qa | grep crontabs&#96;&quot; &#x3D;&#x3D; &quot;&quot; ]; then</span><br><span class="line">       yum install -y crontabs</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">chkconfig crond --level 345 on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ &quot;&#96;rpm -qa | grep ntpdate&#96;&quot; &#x3D;&#x3D; &quot;&quot; ]; then</span><br><span class="line">       yum install -y ntpdate</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;&#96;grep &quot;ntpdate&quot; &#x2F;etc&#x2F;crontab&#96;&quot; &#x3D;&#x3D; &quot;&quot; ]; then</span><br><span class="line">        echo ntpdate not added</span><br><span class="line">        echo &quot;15 5 * * * root ntpdate -u time.ustc.edu.cn&quot; &gt;&gt; &#x2F;etc&#x2F;crontab</span><br><span class="line">        echo &quot;16 5 * * * root ntpdate -u 192.43.244.18 210.72.145.44  210.0.235.14  59.124.196.84&quot; &gt;&gt; &#x2F;etc&#x2F;crontab</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">yum -y install gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel wget lrzsz openssh-clients  ntpdate apr-devel  telnet</span><br></pre></td></tr></table></figure>

<h2 id="Jenkins-重启-dubbo-服务脚本"><a href="#Jenkins-重启-dubbo-服务脚本" class="headerlink" title="Jenkins 重启 dubbo 服务脚本"></a>Jenkins 重启 dubbo 服务脚本</h2><p>service-restart.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## java env</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_75</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> != 3 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"USAGE: <span class="variable">$0</span> SERVICE_DIR SERVICE_NAME_PRE DISCONF_ENV"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">" e.g.: <span class="variable">$0</span> /opt/ync-goods ync-goods rd"</span></span><br><span class="line"><span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">SERVICE_DIR=<span class="variable">$1</span></span><br><span class="line">SERVICE_NAME_PRE=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">DISCONF_ENV=<span class="variable">$3</span></span><br><span class="line">DISCONF_HOST=192.168.88.30:8080</span><br><span class="line">DISCONF_APP=cwang</span><br><span class="line">DISCONF_VERSION=1.0.0</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SERVICE_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        P_ID=`ps -ef | grep -w "$SERVICE_NAME_PRE" | grep -v "grep" | awk '&#123;print $2&#125;'`</span></span><br><span class="line">        P_ID=`jps -ml|grep <span class="string">"<span class="variable">$SERVICE_NAME_PRE</span>"</span>|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$P_ID</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"=== <span class="variable">$SERVICE_NAME</span> process not exists or stop success"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"=== begin kill <span class="variable">$SERVICE_NAME</span> process, pid is:<span class="variable">$P_ID</span>"</span></span><br><span class="line">            <span class="built_in">kill</span> -9 <span class="variable">$P_ID</span></span><br><span class="line">       <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        sleep 3</span><br><span class="line"></span><br><span class="line">        JAR_NAME=`ls -rt *.jar|grep -v <span class="string">'sources'</span>|tail -1`</span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"START JAR_NAME "</span><span class="variable">$JAR_NAME</span></span><br><span class="line">        nohup <span class="variable">$JRE_HOME</span>/bin/java -Xms256m -Xmx512m -jar   -Ddisconf.env=<span class="variable">$DISCONF_ENV</span> -Ddisconf.conf_server_host=<span class="variable">$DISCONF_HOST</span> -Ddisconf.app=<span class="variable">$DISCONF_APP</span> -Ddisconf.version=<span class="variable">$DISCONF_VERSION</span> -Ddisconf.user_define_download_dir=.classes -Ddisconf.enable.remote.conf=<span class="literal">true</span>          <span class="variable">$JAR_NAME</span> &gt;<span class="variable">$SERVICE_NAME_PRE</span>.<span class="built_in">log</span> 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">        ls *.jar|grep -v <span class="variable">$JAR_NAME</span>|xargs rm -rf</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p>service-region.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## java env</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_75</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"></span><br><span class="line"><span class="comment">## service name</span></span><br><span class="line">APP_NAME=region</span><br><span class="line">SERVICE_DIR=/opt/ync-region</span><br><span class="line"></span><br><span class="line">FILE_NAME=`ls /opt/ync-region| grep <span class="string">'.[0-9]'</span>.jar`</span><br><span class="line"></span><br><span class="line">SERVICE_NAME=<span class="variable">$FILE_NAME</span></span><br><span class="line">JAR_NAME=<span class="variable">$SERVICE_NAME</span></span><br><span class="line">PID=<span class="variable">$SERVICE_NAME</span>\.pid</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SERVICE_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">    start)</span><br><span class="line">        nohup <span class="variable">$JRE_HOME</span>/bin/java -Xms256m -Xmx512m  -Ddisconf.env=qa -Ddisconf.conf_server_host=192.168.88.30:8080 -Ddisconf.app=cwang -Ddisconf.version=1.0.0 -Ddisconf.user_define_download_dir=.classes -Ddisconf.enable.remote.conf=<span class="literal">true</span>    -jar <span class="variable">$JAR_NAME</span> &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">        <span class="built_in">echo</span> $! &gt; <span class="variable">$SERVICE_DIR</span>/<span class="variable">$PID</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"=== start <span class="variable">$SERVICE_NAME</span>"</span></span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">    stop)</span><br><span class="line">        <span class="comment">#kill `cat $SERVICE_DIR/$PID`</span></span><br><span class="line">        <span class="comment">#rm -rf $SERVICE_DIR/$PID</span></span><br><span class="line">        <span class="comment">#echo "=== stop $SERVICE_NAME"</span></span><br><span class="line"></span><br><span class="line">        sleep 5</span><br><span class="line">        P_ID=`ps -ef | grep -w <span class="string">"<span class="variable">$SERVICE_NAME</span>"</span> | grep -v <span class="string">"grep"</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$P_ID</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"=== <span class="variable">$SERVICE_NAME</span> process not exists or stop success"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"=== <span class="variable">$SERVICE_NAME</span> process pid is:<span class="variable">$P_ID</span>"</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"=== begin kill <span class="variable">$SERVICE_NAME</span> process, pid is:<span class="variable">$P_ID</span>"</span></span><br><span class="line">            <span class="comment">#kill -9 $P_ID</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">    restart)</span><br><span class="line">        <span class="variable">$0</span> stop</span><br><span class="line">        sleep 2</span><br><span class="line">        <span class="variable">$0</span> start</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"=== restart <span class="variable">$SERVICE_NAME</span>"</span></span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">    *)</span><br><span class="line">        <span class="comment">## restart</span></span><br><span class="line">        <span class="variable">$0</span> stop</span><br><span class="line">        sleep 2</span><br><span class="line">        <span class="variable">$0</span> start</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p>service-region-tag.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## java env</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_75</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"></span><br><span class="line"><span class="comment">## service name</span></span><br><span class="line">APP_NAME=region</span><br><span class="line"></span><br><span class="line"><span class="comment">#find filename</span></span><br><span class="line">FILE_NAME=`ls /opt/ync-region | grep <span class="string">'.[0-9]'</span>.jar`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"FILE_NAME=====================<span class="variable">$FILE_NAME</span>"</span></span><br><span class="line"></span><br><span class="line">SERVICE_DIR=/opt/ync-region</span><br><span class="line">SERVICE_NAME=<span class="variable">$FILE_NAME</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"SERVICE_NAME------------------:<span class="variable">$SERVICE_NAME</span>"</span></span><br><span class="line"></span><br><span class="line">JAR_NAME=<span class="variable">$SERVICE_NAME</span>\.jar</span><br><span class="line">PID=<span class="variable">$SERVICE_NAME</span>\.pid</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SERVICE_DIR</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [<span class="string">"<span class="variable">$FILE_NAME</span>"</span> == <span class="string">""</span>];<span class="keyword">then</span></span><br><span class="line">                <span class="built_in">exit</span> 0;</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        sleep 5</span><br><span class="line">        P_ID=`ps -ef | grep -w <span class="string">"<span class="variable">$SERVICE_NAME</span>"</span> | grep -v <span class="string">"grep"</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"P_ID---------------------------:<span class="variable">$P_ID</span>"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$P_ID</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"=== <span class="variable">$SERVICE_NAME</span> process not exists or stop success"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"=== <span class="variable">$SERVICE_NAME</span> process pid is:<span class="variable">$P_ID</span>"</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"=== begin kill <span class="variable">$SERVICE_NAME</span> process, pid is:<span class="variable">$P_ID</span>"</span></span><br><span class="line">            <span class="built_in">kill</span> -9 <span class="variable">$P_ID</span></span><br><span class="line">       <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">`rm -rf <span class="variable">$FILE_NAME</span>`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 硬盘操作</title>
    <url>//2016/05/24/Linux%E7%A1%AC%E7%9B%98%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<h1 id="Linux-硬盘操作"><a href="#Linux-硬盘操作" class="headerlink" title="Linux 硬盘操作"></a>Linux 硬盘操作</h1><!--
create time: 2016-05-24 17:15:49
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="nfs-文件共享"><a href="#nfs-文件共享" class="headerlink" title="nfs 文件共享"></a>nfs 文件共享</h2><p>centos6 下安装配置</p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep nfs</span><br><span class="line">rpm -qa|grep rpcbind</span><br><span class="line">yum install -y nfs-utils-* rpcbind</span><br><span class="line">vim &#x2F;etc&#x2F;exports</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;exports</span><br><span class="line">&#x2F;data *(rw,no_root_squash,no_all_squash,sync)</span><br><span class="line">exportfs -r 使配置文件生效</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service rpcbind start</span><br><span class="line">service nfs start</span><br><span class="line">chkconfig rpcbind on</span><br><span class="line">chkconfig nfs on</span><br></pre></td></tr></table></figure>

<p>showmount 命令查询 NFS 的共享状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">showmount -e　　　　&#x2F;&#x2F;默认查看自己共享的服务，前提是要DNS能解析自己，不然容易报错</span><br><span class="line">showmount -a　　　　&#x2F;&#x2F;显示已经与客户端连接上的目录信息</span><br></pre></td></tr></table></figure>

<p>关闭防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep nfs</span><br><span class="line">rpm -qa|grep rpcbind</span><br><span class="line">yum install -y nfs-utils-* rpcbind</span><br><span class="line">mkdir &#x2F;log</span><br><span class="line">showmount -e 192.168.100.51</span><br><span class="line">mount -t nfs  192.168.100.51:&#x2F;data &#x2F;log</span><br></pre></td></tr></table></figure>

<p>启动自动挂载 nfs 文件系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;fstab 添加</span><br><span class="line">192.168.100.51:&#x2F;data &#x2F;log nfs defaults 0 0</span><br></pre></td></tr></table></figure>

<p>解除挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">umount &#x2F;log</span><br><span class="line">mount</span><br></pre></td></tr></table></figure>

<h3 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h3><p><a href="https://www.cnblogs.com/mchina/archive/2013/01/03/2840040.html">https://www.cnblogs.com/mchina/archive/2013/01/03/2840040.html</a></p>
<p><a href="https://www.lvtao.net/server/centos-nfs.html">https://www.lvtao.net/server/centos-nfs.html</a></p>
<p>服务器端防火墙设置（NFS 开启防墙配置）</p>
<p>修改/etc/service,添加以下内容（端口号必须在 1024 以下,且未被占用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local services</span><br><span class="line">mountd 1011&#x2F;tcp #rpc.mountd</span><br><span class="line">mountd 1011&#x2F;udp #rpc.mountd</span><br><span class="line">rquotad 1012&#x2F;tcp #rpc.rquotad</span><br><span class="line">rquotad 1012&#x2F;udp #rpc.rquotad</span><br></pre></td></tr></table></figure>

<p>重起 Linux NFS 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service nfs restart</span><br></pre></td></tr></table></figure>

<p>此时 rpc 相关端口已经被固定,可以为 Linux NFS 添加防火墙规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 111 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 2049 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 1011 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 1012 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 32768 -j ACCEPT</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#portmap</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p tcp --dport 111 -j ACCEPT</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p udp --dport 111 -j ACCEPT</span><br><span class="line">#nfsd</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p tcp --dport 2049 -j ACCEPT</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p udp --dport 2049 -j ACCEPT</span><br><span class="line">#mountd</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p tcp --dport 1011 -j ACCEPT</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p udp --dport 1011 -j ACCEPT</span><br><span class="line">#rquotad</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p tcp --dport 1012 -j ACCEPT</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p udp --dport 1012 -j ACCEPT</span><br><span class="line">#rpc.statd</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p tcp --dport 32768 -j ACCEPT</span><br><span class="line">&#x2F;sbin&#x2F;iptables -A INPUT -s 192.168.1.0&#x2F;254 -p udp --dport 32768 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>NFS 的常用目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;exports                         NFS服务的主要配置文件</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;exportfs                   NFS服务的管理命令</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;showmount              		客户端的查看命令</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;nfs&#x2F;etab                  	记录NFS分享出来的目录的完整权限设定值</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;nfs&#x2F;xtab                   	记录曾经登录过的客户端信息</span><br></pre></td></tr></table></figure>

<p>/etc/exports 配置文件说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;exports文件内容格式：</span><br><span class="line"></span><br><span class="line">&lt;输出目录&gt; [客户端1 选项（访问权限,用户映射,其他）] [客户端2 选项（访问权限,用户映射,其他）]</span><br><span class="line">a. 输出目录：</span><br><span class="line"></span><br><span class="line">输出目录是指NFS系统中需要共享给客户机使用的目录；</span><br><span class="line"></span><br><span class="line">b. 客户端：</span><br><span class="line"></span><br><span class="line">客户端是指网络中可以访问这个NFS输出目录的计算机</span><br><span class="line"></span><br><span class="line">客户端常用的指定方式</span><br><span class="line"></span><br><span class="line">指定ip地址的主机：192.168.0.200</span><br><span class="line">指定子网中的所有主机：192.168.0.0&#x2F;24 192.168.0.0&#x2F;255.255.255.0</span><br><span class="line">指定域名的主机：david.bsmart.cn</span><br><span class="line">指定域中的所有主机：*.bsmart.cn</span><br><span class="line">所有主机：*</span><br><span class="line">c. 选项：</span><br><span class="line"></span><br><span class="line">选项用来设置输出目录的访问权限、用户映射等。</span><br><span class="line"></span><br><span class="line">NFS主要有3类选项：</span><br><span class="line"></span><br><span class="line">访问权限选项</span><br><span class="line"></span><br><span class="line">设置输出目录只读：ro</span><br><span class="line">设置输出目录读写：rw</span><br><span class="line">用户映射选项</span><br><span class="line"></span><br><span class="line">all_squash：将远程访问的所有普通用户及所属组都映射为匿名用户或用户组（nfsnobody）；</span><br><span class="line">no_all_squash：与all_squash取反（默认设置）；</span><br><span class="line">root_squash：将root用户及所属组都映射为匿名用户或用户组（默认设置）；</span><br><span class="line">no_root_squash：与rootsquash取反；</span><br><span class="line">anonuid&#x3D;xxx：将远程访问的所有用户都映射为匿名用户，并指定该用户为本地用户（UID&#x3D;xxx）；</span><br><span class="line">anongid&#x3D;xxx：将远程访问的所有用户组都映射为匿名用户组账户，并指定该匿名用户组账户为本地用户组账户（GID&#x3D;xxx）；</span><br><span class="line">其它选项</span><br><span class="line"></span><br><span class="line">secure：限制客户端只能从小于1024的tcp&#x2F;ip端口连接nfs服务器（默认设置）；</span><br><span class="line">insecure：允许客户端从大于1024的tcp&#x2F;ip端口连接服务器；</span><br><span class="line">sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性；</span><br><span class="line">async：将数据先保存在内存缓冲区中，必要时才写入磁盘；</span><br><span class="line">wdelay：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率（默认设置）；</span><br><span class="line">no_wdelay：若有写操作则立即执行，应与sync配合使用；</span><br><span class="line">subtree：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限(默认设置)；</span><br><span class="line">no_subtree：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率；</span><br></pre></td></tr></table></figure>

<p>相关命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、exportfs</span><br><span class="line"></span><br><span class="line">如果我们在启动了NFS之后又修改了&#x2F;etc&#x2F;exports，是不是还要重新启动nfs呢？这个时候我们就可以用exportfs 命令来使改动立刻生效，该命令格式如下：</span><br><span class="line"></span><br><span class="line">　　# exportfs [-aruv]</span><br><span class="line"></span><br><span class="line">　　-a 全部挂载或卸载 &#x2F;etc&#x2F;exports中的内容</span><br><span class="line">　　-r 重新读取&#x2F;etc&#x2F;exports 中的信息 ，并同步更新&#x2F;etc&#x2F;exports、&#x2F;var&#x2F;lib&#x2F;nfs&#x2F;xtab</span><br><span class="line">　　-u 卸载单一目录（和-a一起使用为卸载所有&#x2F;etc&#x2F;exports文件中的目录）</span><br><span class="line">　　-v 在export的时候，将详细的信息输出到屏幕上。</span><br><span class="line"></span><br><span class="line">具体例子：</span><br><span class="line">　　# exportfs -au 卸载所有共享目录</span><br><span class="line">　　# exportfs -rv 重新共享所有目录并输出详细信息</span><br><span class="line"></span><br><span class="line">2、nfsstat</span><br><span class="line"></span><br><span class="line">查看NFS的运行状态，对于调整NFS的运行有很大帮助。</span><br><span class="line"></span><br><span class="line">3、rpcinfo</span><br><span class="line">查看rpc执行信息，可以用于检测rpc运行情况的工具，利用rpcinfo -p 可以查看出RPC开启的端口所提供的程序有哪些。</span><br><span class="line"></span><br><span class="line">4、showmount</span><br><span class="line"></span><br><span class="line">　　-a 显示已经于客户端连接上的目录信息</span><br><span class="line">　　-e IP或者hostname 显示此IP地址分享出来的目录</span><br><span class="line"></span><br><span class="line">5、netstat</span><br><span class="line"></span><br><span class="line">可以查看出nfs服务开启的端口，其中nfs 开启的是2049，portmap 开启的是111，其余则是rpc开启的。</span><br><span class="line"></span><br><span class="line">最后注意两点，虽然通过权限设置可以让普通用户访问，但是挂载的时候默认情况下只有root可以去挂载，普通用户可以执行sudo。</span><br><span class="line"></span><br><span class="line">NFS server 关机的时候一点要确保NFS服务关闭，没有客户端处于连接状态！通过showmount -a 可以查看，如果有的话用kill killall pkill 来结束，（-9 强制结束）</span><br></pre></td></tr></table></figure>

<p>问题</p>
<p>客户端在挂载的时候遇到的一个问题如下，可能是网络不太稳定，NFS 默认是用 UDP 协议，换成 TCP 协议即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -t nfs 192.168.100.51:&#x2F;data &#x2F;log  -o proto&#x3D;tcp -o nolock</span><br></pre></td></tr></table></figure>

<p>解除挂载 umount.nfs: /log: device is busy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fuser -m -v &#x2F;log</span><br><span class="line">                     用户     进程号 权限   命令</span><br><span class="line">&#x2F;log:                root      26741 ..c.. bash</span><br><span class="line"></span><br><span class="line">kill -9 26741</span><br></pre></td></tr></table></figure>

<h2 id="fstab-文件"><a href="#fstab-文件" class="headerlink" title="fstab 文件"></a>fstab 文件</h2><p>保存文件挂载信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Wed May 18 23:29:58 2016</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under '/dev/disk'</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">/dev/mapper/VolGroup-lv_root /                       ext4    defaults        1 1</span><br><span class="line">UUID=3725aff0-9f5e-47ce-85b2-80e438dc9df8 /boot                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/VolGroup-lv_home /opt                   ext4    defaults        1 2</span><br><span class="line">/dev/mapper/VolGroup-lv_swap swap                    swap    defaults        0 0</span><br><span class="line">tmpfs                   /dev/shm                tmpfs   defaults        0 0</span><br><span class="line">devpts                  /dev/pts                devpts  gid=5,mode=620  0 0</span><br><span class="line">sysfs                   /sys                    sysfs   defaults        0 0</span><br><span class="line">proc                    /proc                   proc    defaults        0 0</span><br></pre></td></tr></table></figure>

<h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><p>查看挂载信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># mount</span></span><br><span class="line">/dev/mapper/VolGroup-lv_root on / <span class="built_in">type</span> ext4 (rw)</span><br><span class="line">proc on /proc <span class="built_in">type</span> proc (rw)</span><br><span class="line">sysfs on /sys <span class="built_in">type</span> sysfs (rw)</span><br><span class="line">devpts on /dev/pts <span class="built_in">type</span> devpts (rw,gid=5,mode=620)</span><br><span class="line">tmpfs on /dev/shm <span class="built_in">type</span> tmpfs (rw,rootcontext=<span class="string">"system_u:object_r:tmpfs_t:s0"</span>)</span><br><span class="line">/dev/sda1 on /boot <span class="built_in">type</span> ext4 (rw)</span><br><span class="line">none on /proc/sys/fs/binfmt_misc <span class="built_in">type</span> binfmt_misc (rw)</span><br><span class="line">/dev/mapper/VolGroup-lv_home on /opt <span class="built_in">type</span> ext4 (rw)</span><br><span class="line">[root@localhost opt]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>挂载分区</p>
<p>挂载/dev/mapper/VolGroup-lv_home 到/opt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/mapper/VolGroup-lv_home /opt</span><br></pre></td></tr></table></figure>

<h2 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h2><p>取消挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount /home</span><br></pre></td></tr></table></figure>

<h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p>查看当前目录使用大小</p>
<p><code>du -sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># du -sh</span></span><br><span class="line">20K	.</span><br><span class="line">[root@localhost opt]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>查看当前硬盘挂载信息及使用情况</p>
<p><code>df -h</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># df -h</span></span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/VolGroup-lv_root</span><br><span class="line">                       50G  646M   46G   2% /</span><br><span class="line">tmpfs                 1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">/dev/sda1             477M   25M  427M   6% /boot</span><br><span class="line">/dev/mapper/VolGroup-lv_home</span><br><span class="line">                      405G   71M  385G   1% /opt</span><br><span class="line">[root@localhost opt]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h2><p>查看硬盘信息</p>
<p><code>fdisk -l</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 500.1 GB, 500107862016 bytes</span><br><span class="line">255 heads, 63 sectors/track, 60801 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x54bbc984</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *           1          64      512000   83  Linux</span><br><span class="line">Partition 1 does not end on cylinder boundary.</span><br><span class="line">/dev/sda2              64       60802   487873536   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/VolGroup-lv_root: 53.7 GB, 53687091200 bytes</span><br><span class="line">255 heads, 63 sectors/track, 6527 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/VolGroup-lv_swap: 4076 MB, 4076863488 bytes</span><br><span class="line">255 heads, 63 sectors/track, 495 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/VolGroup-lv_home: 441.8 GB, 441815400448 bytes</span><br><span class="line">255 heads, 63 sectors/track, 53714 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">[root@localhost opt]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h2 id="格式化与分区"><a href="#格式化与分区" class="headerlink" title="格式化与分区"></a>格式化与分区</h2><p>fdisk -l /dev/sda 查看第一块硬盘分区情况</p>
<p>fdisk /dev/sdb 给第二块硬盘分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">command acton (m for help)：m #显示命令列表</span><br><span class="line"></span><br><span class="line">　　a-设置可引导标志;b-设置卷标; d-删除一个分区; n-新建分区</span><br><span class="line"></span><br><span class="line">　　p-显示分区信息; v-校验分区表;q-不存盘退出;w-存盘退出;t-改变分区类型</span><br><span class="line"></span><br><span class="line">　　command acton (m for help)：n 新建分区</span><br><span class="line"></span><br><span class="line">　　command action</span><br><span class="line"></span><br><span class="line">　　e extended #扩展分区</span><br><span class="line"></span><br><span class="line">　　p primary partition (1-4) #主分区</span><br><span class="line"></span><br><span class="line">　　p #创建主分区</span><br><span class="line"></span><br><span class="line">　　partition number (1-4):1 #创建第一个主分区　　first cylinder (1-522,default 1):1 #起始柱面(第一个分区始终为1)</span><br><span class="line"></span><br><span class="line">　　last cylinder or +size or +sizeM or +siezK(1-522,default 522): 10 #截止柱面(若522则整个硬盘分给了一个区)此分区大小是系统按照柱面大小自动计算出来的</span><br><span class="line"></span><br><span class="line">　　command acton (m for help)：n</span><br><span class="line"></span><br><span class="line">　　command action</span><br><span class="line"></span><br><span class="line">　　e extended</span><br><span class="line"></span><br><span class="line">　　p primary partition (1-4)</span><br><span class="line"></span><br><span class="line">　　p</span><br><span class="line">　　</span><br><span class="line">　　partition number (1-4):2 #创建第二个主分区</span><br><span class="line"></span><br><span class="line">　　first cylinder (11-522,default 11):11</span><br><span class="line"></span><br><span class="line">　　last cylinder ...(11-522,default 522): +100M #自定义分区大小</span><br><span class="line"></span><br><span class="line">　　command acton (m for help)：n</span><br><span class="line"></span><br><span class="line">　　command action</span><br><span class="line"></span><br><span class="line">　　e extended</span><br><span class="line"></span><br><span class="line">　　p primary partition (1-4)</span><br><span class="line"></span><br><span class="line">　　e #创建扩展分区，注意一个磁盘只能创建一个扩展区</span><br><span class="line"></span><br><span class="line">　　partition number (1-4):3</span><br><span class="line">　　</span><br><span class="line">　　first cylinder (28-522,default 28):28</span><br><span class="line"></span><br><span class="line">　　last cylinder ...(28-522,default 522):522 #将剩余空间全部分给扩展分区</span><br><span class="line"></span><br><span class="line">　　扩展分区是不能直接使用的，必须在其上创建逻辑分区!</span><br><span class="line"></span><br><span class="line">　　command acton (m for help)：n</span><br><span class="line"></span><br><span class="line">　　command action</span><br><span class="line"></span><br><span class="line">　　l logical (5 or over) #逻辑分区</span><br><span class="line"></span><br><span class="line">　　p primary partition (1-4)</span><br><span class="line">　　</span><br><span class="line">　　l</span><br><span class="line"></span><br><span class="line">　　first sylinder (28-255,default 28):28 #在扩展分区里建逻辑分区</span><br><span class="line"></span><br><span class="line">　　last cylinder ...(28-522,default 522):522 #柱面用尽，等于说只建一个逻辑分区</span><br><span class="line"></span><br><span class="line">　　command acton (m for help)：w #保存退出</span><br><span class="line"></span><br><span class="line">　　转换分区类型：</span><br><span class="line"></span><br><span class="line">　　command acton (m for help)：t #转换分区类型</span><br><span class="line"></span><br><span class="line">　　partition number (1-4):2 #选择第二个主分区</span><br><span class="line">　　</span><br><span class="line">　　hex code (type L to list codes):82 #按L可列出分区类型所对应的编码</span><br><span class="line"></span><br><span class="line">　　格式化与挂载: (挂载目录可以自行创建也可指定存在的空目录)</span><br><span class="line"></span><br><span class="line">　　mksf.ext3 &#x2F;dev&#x2F;sdb1 把第二块硬盘的第一个主分区格式化为ext3</span><br><span class="line"></span><br><span class="line">　　mkswap &#x2F;dev&#x2F;sdb2 初始化swap区，此区不可格式化。</span><br><span class="line"></span><br><span class="line">　　mount &#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;d #将第一个分区挂载到d这个目录</span><br><span class="line"></span><br><span class="line">　　重启后自动挂载：vi &#x2F;etc&#x2F;fstab</span><br><span class="line">　　</span><br><span class="line">　　添加：&#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;d ext3 default 0 0</span><br></pre></td></tr></table></figure>

<h2 id="添加新硬盘挂载"><a href="#添加新硬盘挂载" class="headerlink" title="添加新硬盘挂载"></a>添加新硬盘挂载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdisk -l 查看新硬盘</span><br><span class="line">mksf.ext4 &#x2F;dev&#x2F;xvdb 格式化新硬盘</span><br><span class="line">mkdir &#x2F;data 添加目录</span><br><span class="line">mount &#x2F;dev&#x2F;xvdb &#x2F;data 挂载硬盘</span><br><span class="line">vi &#x2F;etc&#x2F;fstab 修改添加下面一条记录，开机自动挂载</span><br><span class="line">	&#x2F;dev&#x2F;xvdb       &#x2F;data   ext4    defaults        0 0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 用户命令</title>
    <url>//2016/05/23/Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.html</url>
    <content><![CDATA[<h1 id="Linux-用户和用户组管理"><a href="#Linux-用户和用户组管理" class="headerlink" title="Linux 用户和用户组管理"></a>Linux 用户和用户组管理</h1><!--
create time: 2016-05-23 15:05:01
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<p>Linux 是个多用户多任务的分时操作系统，所有一个要使用系统资源的用户都必须先向系统管理员申请一个账号，然后以这个账号的身份进入系统。用户的账号一方面能帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也能帮助用户组织文件，并为用户提供安全性保护。每个用户账号都拥有一个惟一的用户名和用户口令。用户在登录时键入正确的用户名和口令后，才能进入系统和自己的主目录。<br>实现用户账号的管理，要完成的工作主要有如下几个方面：<br>a.用户账号的添加、删除和修改。<br>b.用户口令的管理。<br>c.用户组的管理。</p>
<h2 id="Linux-用户账号的管理"><a href="#Linux-用户账号的管理" class="headerlink" title="Linux 用户账号的管理"></a>Linux 用户账号的管理</h2><p>用户账号的管理主要涉及到用户账号的添加、删除和修改。</p>
<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录 Shell 等资源。刚添加的账号是被锁定的，无法使用。</p>
<ol>
<li><p><strong>useradd</strong></p>
<pre><code>    添加新的用户账号使用useradd命令，语法如下:
    useradd 选项 用户名
    其中各选项含义如下：

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-c comment 指定一段注释性描述。</span><br><span class="line">-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，能创建主目录。</span><br><span class="line">-g 用户组 指定用户所属的用户组。</span><br><span class="line">-G 用户组,用户组 指定用户所属的附加组。</span><br><span class="line">-s Shell文件 指定用户的登录Shell。</span><br><span class="line">-u 用户号 指定用户的用户号，如果同时有-o选项，则能重复使用其他用户的标识号。</span><br><span class="line">-p 这个命令是需求提供md5码的加密口令，普通数字是不行的。</span><br></pre></td></tr></table></figure>

    用户名 指定新账号的登录名。

    ex:
    例1：

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd -d &#x2F;usr&#x2F;sam -m sam</span><br></pre></td></tr></table></figure>
    此命令创建了一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录/usr/sam（/usr为默认的用户主目录所在的父目录）。
    例2：

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd -s &#x2F;bin&#x2F;sh -g group -G adm,root gem</span><br></pre></td></tr></table></figure>

    此命令新建了一个用户gem，该用户的登录Shell是/bin/sh，他属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。

    这里可能新建组：groupadd group 及 groupadd adm

    增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件，如/etc/shadow，/etc/group等。

    Linux提供了集成的系统管理工具userconf，他能用来对用户账号进行统一管理。

    注：

用户帐户本身在 /etc/passwd 中定义。Linux 系统包含一个 /etc/passwd 的同伴文件，叫做 /etc/shadow。该文件不像 /etc/passwd，只有对于 root 用户来说是可读的，并且包含加密的密码信息。我们来看一看 /etc/shadow 的一个样本行：</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1$1234567890123456789012345678901:11664:0:-1:-1:-1:-1:0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root:$6$kVbUQRog2BVAL2s5$3bTISySSa5Qi2kOnyiF4ION783UuCCk4Lj0oXuMoiwU9TkF5EcfhCB4qp3eoCAGzd.jgY6KmhqGdyNThrG8U81:16939:0:99999:7:::</span><br></pre></td></tr></table></figure>

<p>每一行给一个特别帐户定义密码信息，同样的，每个字段用 : 隔开。第一个字段定义和这个 shadow 条目相关联的特别用户帐户。第二个字段包含一个加密的密码。其余的字段在下表中描述：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字段 3 自 1&#x2F;1&#x2F;1970 起，密码被修改的天数</span><br><span class="line">字段 4 密码将被允许修改之前的天数（0 表示“可在所有时间修改”）</span><br><span class="line">字段 5 系统将强制用户修改为新密码之前的天数（1 表示“永远都不能修改”）</span><br><span class="line">字段 6 密码过期之前，用户将被警告过期的天数（-1 表示“没有警告”）</span><br><span class="line">字段 7 密码过期之后，系统自动禁用帐户的天数（-1 表示“永远不会禁用”）</span><br><span class="line">字段 8 该帐户被禁用的天数（-1 表示“该帐户被启用”） 字段9保留供将来使用</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>userdel</strong></p>
<p>删除帐号</p>
<p>如果一个用户账号不再使用，能从系统中删除。删除用户账号就是要将/etc/passwd 等系统文件中的该用户记录删除，必要时还要删除用户的主目录。删除一个已有的用户账号使用 userdel 命令，格式如下：<br>代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure>

<p>常用的选项是-r，他的作用是把用户的主目录一起删除。<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># userdel -r sam</span><br></pre></td></tr></table></figure>

<p>此命令删除用户 sam 在系统文件（主要是/etc/passwd，/etc/shadow，/etc/group 等）中的记录，同时删除用户的主目录。</p>
</li>
<li><p><strong>usermod</strong></p>
<p>修改帐号</p>
<p>修改用户账号就是根据实际情况更改用户(<code>chgrp</code>是针对文件而言)的有关属性，如用户号、主目录、用户组、登录 Shell 等。<br>修改已有用户的信息使用 usermod 命令，格式如下：<br>代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod 选项 用户名[只有终极管理员才有权限修改帐号名，如果用sudo命令来对普通帐号授权也行]</span><br></pre></td></tr></table></figure>

<p>常用的选项包括-c,-d,-m,-g,-G,-s,-u,-o 等，这些选项的意义和 useradd 命令中的相同，能为用户指定新的资源值。另外，有些系统能使用如下选项：<br>代码:<br>-l 新用户名<br>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># usermod -s &#x2F;bin&#x2F;ksh -d &#x2F;home&#x2F;z -g developer sam</span><br></pre></td></tr></table></figure>

<p>此命令将用户 sam 的登录 Shell 修改为 ksh，主目录改为/home/z，用户组改为 developer。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#usermod zte1 -g cheng</span><br></pre></td></tr></table></figure>

<p>此命令是改动用户 zte1 所属的组为 cheng 这个组</p>
</li>
<li><p><strong>id</strong></p>
<pre><code>    查看帐号属性

    格式： id user1

    显示user1的uid和gid ,缺省为当前用户的id信息
ex:

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zte@SMPS-WEB1:&#x2F;home&gt; id zte</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uid&#x3D;1011(zte) gid&#x3D;100(users) groups&#x3D;100(users),14 (uucp),16(dialout),17(audio),33(video)</span><br></pre></td></tr></table></figure></code></pre></li>
</ol>
<pre><code>groups user1 显示用户 user1 所在的组,缺省为当前用户所在的组信息</code></pre><h2 id="Linux-用户口令的管理"><a href="#Linux-用户口令的管理" class="headerlink" title="Linux 用户口令的管理"></a>Linux 用户口令的管理</h2><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，是被系统锁定的，无法使用，必须为其指定口令后才能使用，即使是空口令。<br>指定和修改用户口令的 Shell 命令是 passwd。终极用户能为自己和其他用户指定口令，普通用户只能修改自己的口令。命令的格式为：<br>代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br><span class="line">可使用的选项：</span><br><span class="line">-l 锁定口令，即禁用账号。</span><br><span class="line">-u 口令解锁。</span><br><span class="line">-d 使账号无口令。</span><br><span class="line">-f 强迫用户下次登录时修改口令。</span><br></pre></td></tr></table></figure>

<p>如果默认用户名，则修改当前用户的口令。<br>例如：假设当前用户是 sam，则下面的命令修改该用户自己的口令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ passwd</span><br><span class="line">Old password:******</span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>

<p>如果是终极用户，能用下列形式指定任意用户的口令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd sam</span><br><span class="line">New password:*******</span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>

<p>普通用户修改自己的口令时，passwd 命令会先询问原口令，验证后再需求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而终极 用户为用户指定口令时，就不必知道原口令。为了安全起见，用户应该选择比较复杂的口令，最佳使用不少于 8 位的口令，口令中包含有大写、小写字母和数字，并 且应该和姓名、生日等不相同。</p>
<p>为用户指定空口令时，执行下列形式的命令：<br>代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd -d sam</span><br></pre></td></tr></table></figure>

<p>此命令将用户 sam 的口令删除，这样用户 sam 下一次登录时，系统就不再询问口令。</p>
<p>passwd 命令还能用-l(lock)选项锁定某一用户，使其不能登录，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># passwd -l sam</span><br></pre></td></tr></table></figure>

<h2 id="Linux-用户组的管理"><a href="#Linux-用户组的管理" class="headerlink" title="Linux 用户组的管理"></a>Linux 用户组的管理</h2><p>每个用户都有一个用户组，系统能对一个用户组中的所有用户进行集中管理。不同 Linux 系统对用户组的规定有所不同，如 Linux 下的用户属于和他同名的用户组，这个用户组在创建用户时同时创建。用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就对/etc/group 文件的更新。</p>
<p>用户组（group）就是具有相同特征的用户（user）的集合体；比如有时我们要让多个用户具有相同的权限，比如查看、修改某一文件或执行某个命令，这时我们需要用户组，我们把用户都定义到同一用户组，我们通过修改文件或目录的权限，让用户组具有一定的操作权限，这样用户组下的用户对该文件或目录都具有相同的权限，这是我们通过定义组和修改文件的权限来实现的；</p>
<p>举例：<br>我们为了让一些用户有权限查看某一文件，比如是个时间表，而编写时间表的人要具有读写执行的权限，我们想让一些用户知道这个时间表的内容，而不让他们修 改，所以我们能把这些用户都划到一个组（用<code>chgrp</code>命令），然后来修改这个文件（用 chmod 命令）的权限，让用户组可读（用 chgrp 命令将此文件归 属于这个组），这样用户组下面的每个用户都是可读的，其他用户是无法访问的。</p>
<p>1、增加一个新的用户组使用 groupadd 命令。格式如下：<br>代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd 选项 用户组[用户组添加后，将用户进行组赋予用chown和chgrp指令]</span><br></pre></td></tr></table></figure>

<p>能使用的选项有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-g GID 指定新用户组的组标识号（GID）。</span><br><span class="line">-o 一般和-g选项同时使用，表示新用户组的GID能和系统已有用户组的GID相同。</span><br></pre></td></tr></table></figure>

<p>例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># groupadd group1</span><br></pre></td></tr></table></figure>

<p>此命令向系统中增加了一个新组 group1，新组的组标识号是在当前已有的最大组标识号的基础上加 1。<br>例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># groupadd -g 101 group2</span><br></pre></td></tr></table></figure>

<p>此命令向系统中增加了一个新组 group2，同时指定新组的组标识号是 101。<br>2、如果要删除一个已有的用户组，使用 groupdel 命令，格式如下：<br>代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># groupdel group1</span><br></pre></td></tr></table></figure>

<p>此命令从系统中删除组 group1。</p>
<p>3、修改用户组的属性使用 groupmod 命令。其语法如下：<br>代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure>

<p>常用的选项有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-g GID 为用户组指定新的组标识号。</span><br><span class="line">-o 和-g选项同时使用，用户组的新GID能和系统已有用户组的GID相同。</span><br><span class="line">-n 新用户组 将用户组的名字改为新名字</span><br></pre></td></tr></table></figure>

<p>例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># groupmod -g 102 group2</span><br></pre></td></tr></table></figure>

<p>此命令将组 group2 的组标识号修改为 102。<br>例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># groupmod -g 10000 -n group3 group2</span><br></pre></td></tr></table></figure>

<p>此命令将组 group2 的标识号改为 10000，组名修改为 group3。</p>
<p>4、如果一个用户同时属于多个用户组，那么用户能在用户组之间转换，以便具有其他用户组的权限。用户能在登录后，使用命令 newgrp 转换到其他用户组，这个命令的参数就是目的用户组。<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ newgrp root</span><br></pre></td></tr></table></figure>

<p>这条命令将当前用户转换到 root 用户组，前提条件是 root 用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也能通过集成的系统管理工具来完成。</p>
<h2 id="和用户账号有关的系统文件"><a href="#和用户账号有关的系统文件" class="headerlink" title="和用户账号有关的系统文件"></a>和用户账号有关的系统文件</h2><p>完成用户管理的工作有许多种方法，不过每一种方法实际上都是对有关的系统文件进行修改。和用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd，/etc/shadow，/etc/group 等。下面分别介绍这些文件的内容。</p>
<p>1、/etc/passwd 文件是用户管理工作涉及的最重要的一个文件。Linux 系统中的每个用户都在/etc/passwd 文件中有一个对应的记录行，他记录了这个用户的一些基本属性。这个文件对所有用户都是可读的。他的内容类似下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">＃ cat &#x2F;etc&#x2F;passwd</span><br><span class="line">root:x:0:0:Superuser:&#x2F;:</span><br><span class="line">daemon:x:1:1:System daemons:&#x2F;etc:</span><br><span class="line">bin:x:2:2:Owner of system commands:&#x2F;bin:</span><br><span class="line">sys:x:3:3:Owner of system files:&#x2F;usr&#x2F;sys:</span><br><span class="line">adm:x:4:4:System accounting:&#x2F;usr&#x2F;adm:</span><br><span class="line">uucp:x:5:5:UUCP administrator:&#x2F;usr&#x2F;lib&#x2F;uucp:</span><br><span class="line">auth:x:7:21:Authentication administrator:&#x2F;tcb&#x2F;files&#x2F;auth:</span><br><span class="line">cron:x:9:16:Cron daemon:&#x2F;usr&#x2F;spool&#x2F;cron:</span><br><span class="line">listen:x:37:4:Network daemon:&#x2F;usr&#x2F;net&#x2F;nls:</span><br><span class="line">sam:x:200:50:Sam san:&#x2F;usr&#x2F;sam:&#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure>

<p>从上面的例子我们能看到，/etc/passwd 中一行记录对应着一个用户，每行记录又被冒号分隔为 7 个字段，其格式和具体含义如下：<br>代码:<br>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录 Shell</p>
<p>（1）“用户名”是代表用户账号的字符串。通常长度不超过 8 个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号，因为冒号在这里是分隔符。为了兼容起见，登录名中最佳不要包含点字符“.”，并且不使用连字符“-”和加号“+”打头。<br>（2） “口令”，一些系统中存放着加密后的用户口令，虽然这个字段存放的只是用户口令的加密串，不是明文，不过由于/etc/passwd 文件对所有用户都可读，所以这仍是个安全隐患。因此，目前许多 Linux 系统都使用了 shadow 技术，把真正的加密后的用户口令字存放到/etc/shadow 文件中，而在/etc/passwd 文件的口令字段中只存放一个特别的字符，例如“x”或“*”。<br>（3）“用户标识号”是个整数，系统内部用他来标识用户。一般情况下他和用户名是一一对应的。如果几个用户名对应的用户标 识号是相同的，系统内部将把他们视为同一个用户，不过他们能有不同的口令、不同的主目录及不同的登录 Shell 等。通常用户标识号的取值范围是 0 ～ 65535。0 是终极用户 root 的标识号，1 ～ 99 由系统保留，作为管理账号，普通用户的标识号从 100 开始。在 Linux 系统中，这个界限是 500。<br>（4）“组标识号”字段记录的是用户所属的用户组。他对应着/etc/group 文件中的一条记录。<br>（5） “注释性描述”字段记录着用户的一些个人情况，例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的 Linux 系统中，这个字段的 格式并没有统一。在许多 Linux 系统中，这个字段存放的是一段任意的注释性描述文字，用做 finger 命令的输出。<br>（6）“主目录”，也就是用户的起始工作目录，他是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用 户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。<br>（7）用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程式，即 Shell。Shell 是用户和 Linux 系统之间的接口。 Linux 的 Shell 有许多种，每种都有不同的特点。常用的有 sh(Bourne Shell),csh(C Shell),ksh(Korn Shell),tcsh(TENEX/TOPS-20 type C Shell),bash(Bourne Again Shell)等。系统管理员能根据系统情况和用户习惯为用户指定某个 Shell。如果不指定 Shell，那么系统使用 sh 为默认的登录 Shell，即这个 字段的值为/bin/sh。<br>用户的登录 Shell 也能指定为某个特定的程式（此程式不是个命令解释器）。利用这一特点，我们能限制用户只能运行指定的应用程式，在该应用程式运行结束 后，用户就自动退出了系统。有些 Linux 系统需求只有那些在系统中登记了的程式才能出目前这个字段中。系统中有一类用户称为伪用户（psuedo users），这些用户在/etc/passwd 文件中也占有一条记录，不过不能登录，因为他们的登录 Shell 为空。他们的存在主要是方便系统管理，满 足相应的系统进程对文件属主的需求。常见的伪用户如下所示。<br>伪 用 户 含 义<br>bin 拥有可执行的用户命令文件<br>sys 拥有系统文件<br>adm 拥有帐户文件<br>uucp UUCP 使用<br>lp lp 或 lpd 子系统使用<br>nobody NFS 使用<br>除了上面列出的伪用户外，更有许多标准的伪用户，例如：audit,cron,mail,usenet 等，他们也都各自为相关的进程和文件所需要。由于 /etc/passwd 文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够非常容易地将他破解，因此对安全性需求较高的 Linux 系统都把加密后的口令字分离出来，独立存放在一个文件中，这个文件是/etc/shadow 文件。只有终极用户才拥有该文件读权限，这就确保了用户密码的安全性。</p>
<p>2、/etc/shadow 中的记录行和/etc/passwd 中的一一对应，他由 pwconv 命令根据/etc/passwd 中的数据自动产生。他的文件格式和/etc/passwd 类似，由若干个字段组成，字段之间用“:”隔开。这些字段是：<br>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志<br>（1）“登录名”是和/etc/passwd 文件中的登录名相一致的用户账号<br>（2）“口令”字段存放的是加密后的用户口令字，长度为 13 个字符。如果为空，则对应用户没有口令，登录时不必口令；如果含有不属于集合{ ./0-9A-Za-z }中的字符，则对应的用户不能登录。<br>（3）“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不相同。例如在 SCO Linux 中，这个时间起点是 1970 年 1 月 1 日。<br>（4）“最小时间间隔”指的是两次修改口令之间所需的最小天数。<br>（5）“最大时间间隔”指的是口令保持有效的最大天数。<br>（6）“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。<br>（7）“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。<br>（8）“失效时间”字段给出的是个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是个合法的账号，也就不能再用来登录了。<br>下面是/etc/shadow 的一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemon:*::0:0::::</span><br><span class="line">bin:*::0:0::::</span><br><span class="line">sys:*::0:0::::</span><br><span class="line">adm:*::0:0::::</span><br><span class="line">uucp:*::0:0::::</span><br><span class="line">nuucp:*::0:0::::</span><br><span class="line">auth:*::0:0::::</span><br><span class="line">cron:*::0:0::::</span><br><span class="line">listen:*::0:0::::</span><br><span class="line">lp:*::0:0::::</span><br><span class="line">sam:EkdiSECLWPdSa:9740:0:0::::</span><br></pre></td></tr></table></figure>

<p>3、用户组的所有信息都存放在/etc/group 文件中。<br>将用户分组是 Linux 系统中对用户进行管理及控制访问权限的一种手段。每个用户都属于某个用户组；一个组中能有多个用户，一个用户也能属于不同的组。当 一个用户同时是多个组中的成员时，在/etc/passwd 文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。用户要访问属 于附加组的文件时，必须首先使用 newgrp 命令使自己成为所要访问的组中的成员。用户组的所有信息都存放在/etc/group 文件中。此文件的格式也 类似于/etc/passwd 文件，由冒号隔开若干个字段，这些字段有：<br>组名:口令:组标识号:组内用户列表<br>（1）“组名”是用户组的名称，由字母或数字构成。和/etc/passwd 中的登录名相同，组名不应重复。<br>（2）“口令”字段存放的是用户组加密后的口令字。一般 Linux 系统的用户组都没有口令，即这个字段一般为空，或是*。<br>（3）“组标识号”和用户标识号类似，也是个整数，被系统内部用来标识组。<br>（4）“组内用户列表”是属于这个组的所有用户的列表，不同用户之间用逗号“,”分隔。这个用户组可能是用户的主组，也可能是附加组。<br>/etc/group 文件的一个例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;group</span><br><span class="line">root::0:root</span><br><span class="line">bin::2:root,bin</span><br><span class="line">sys::3:root,uucp</span><br><span class="line">adm::4:root,adm</span><br><span class="line">daemon::5:root,daemon</span><br><span class="line">lp::7:root,lp</span><br><span class="line">users::20:root,sam</span><br></pre></td></tr></table></figure>

<h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><p>su 命令这个命令非常重要，它可以让一个普通用户拥有超级用户或其他用户的权限，也可以让超级用户以普通用户的身份做一些事情。普通用户使用这个命令时必须有超级用户或其他用户的口令。如要离开当前用户的身份，可以键入 exit 命令，su 命令的一般形式为：<br>su – 用户名</p>
<h2 id="赋予普通用户特别权限-sudo-命令"><a href="#赋予普通用户特别权限-sudo-命令" class="headerlink" title="赋予普通用户特别权限[sudo 命令]"></a>赋予普通用户特别权限[sudo 命令]</h2><p>在 Linux 系统中，管理员往往不止一人，若每位管理员都用 root 身份进行管理工作，根本无法弄清晰谁该做什么。所以最佳的方式是：管理员创建一些普通用户，分配一部分系统管理工作给他们。<br>由于 su 对转换到终极权限用户 root 后，权限的无限制性，所以 su 并不能担任多个管理员所管理的系统。如果用 su 来转换到终极用户来管理系统，也不能明确哪些工作是由哪个管理员进行的操作。特别是对于服务器的 管理有多人参和管理时，最佳是针对每个管理员的技术特长和管理范围，并且有针对性的下放给权限，并且约定其使用哪些工具来完成和其相关的工作，这时我们就 有必要用到 sudo。通过 sudo，我们能把某些终极权限有针对性的下放，并且不必普通用户知道 root 密码，所以 sudo 相对于权限无限制性的 su 来说，还是比较安全的，所以 sudo 也能被称为受限制的 su ；另外 sudo 是需要授权许可的，所以也被称为授权许可的 su；sudo 执行命令的流程是当前用户转换到 root（或其他指定转换到的用户），然后以 root（或其他指定的转换到的用户）身份执行命令，执行完成后，直接退回到当前用户；而这些的前提是要通过 sudo 的设置文件/etc/sudoers 来进行授权；<br>我们不能使用 su 让他们直接变成 root，因为这些用户都必须知道 root 的密码，这种方法非常不安全，而且也不符合我们的分工需求。一般的做法是利用权限的设置，依工作性质分类，让特别身份的用户成为同一个工作组，并设置工作组权限。例如：要 wwwadm 这位用户负责管理网站数据，一般 Apache Web Server 的进程 httpd 的所有者是 www，你能设置用户 wwwadm 和 www 为同一工作组，并设置 Apache 默认存放网页录 /usr/local/httpd/htdocs 的工作组权限为可读、可写、可执行，这样属于此工作组的每位用户就能进行网页的管理了。<br>但这并不是最佳的解决办法，例如管理员想授予一个普通用户关机的权限，这时使用上述的办法就不是非常最佳。这时你也许会想，我只让这个用户能以 root 身份执行 shutdown 命令就行了。完全没错，可惜在通常的 Linux 系统中无法实现这一功能，不过已有了工具能实现这样的功能 sudo。<br>sudo 通过维护一个特权到用户名映射的数据库将特权分配给不同的用户，这些特权可由数据库中所列的一些不同的命令来识别。为了获得某一特权项，有资格的用户只需简单地在命令行输入 sudo 和命令名之后，按照提示再次输入口令。例如，sudo 允许普通用户格式化磁盘，不过却没有赋予其他的 root 用户特权。<br>注：<br>sudo 的初衷是：为了让一个普通用户执行 root 的命令。当第一次使用 sudo 的时候会提示输入密码。<br>这个密码是用户自己的密码。<br>不过在 suse 9 和 10 中，使用 sudo 发现输入密码的时候必须输入 root 用户的密码。<br>经过查实发目前 sudo 的设置文件中存在 Defaults targetpw 表示的是 sudo 将提示输入由 sudo 的-u 选项指定的用户(默认为 root)的口令而不是执行 sudo 的用户的口令，如果将其注释掉，那么输入的密码是当前执行用户的。suse 里默认需求输入的是 root 的密码。<br>能这样去理解：你的服务器不允许使用 root 直接 ssh 到服务器或不允许直接使用 root 在 tty 中登录。添加一个用户让他能够 ssh 不过不让他使用 su 命令。这样能使用此方法来让他从事 root 的其中一条命令。<br>sudo 的公式；<br>授权用户 主机=[(转换到哪些用户或用户组)][是否需要密码验证] 命令 1,[(转换到哪些用户或用户组)][是否需要密码验证] [命令 2],[(转换到哪些用户或用户组)][是否需要密码验证] [命令 3]……<br>注：<br>凡是[ ]中的内容，是能省略；命令和命令之间用,号分隔；通过本文的例子，能对照着看哪些是省略了，哪些地方需要有空格；在[(转换到哪些用户或用户组)] ，如果省略，则默认为 root 用户；如果是 ALL ，则代表能转换到所有用户；注意要转换到的目的用户必须用()号括起来，比如(ALL)、(beinan)</p>
<p>1、sudo 工具由文件/etc/sudoers 进行设置，该文件包含所有能访问 sudo 工具的用户列表并定义了他们的特权。一个典型的/etc/sudoers 条目如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zte ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure>

<p>这个条目使得用户 zte 作为终极用户访问所有应用程式，如用户 zte 需要作为终极用户运行命令，他只需简单地在命令前加上前缀 sudo。因此，要以 root 用户的身份执行命令 ifconfig，zte 能输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zte@SMPS-WEB1:&#x2F;home&gt;# sudo &#x2F;usr&#x2F;sbin&#x2F;ifconfig</span><br></pre></td></tr></table></figure>

<p>注意： 执行的 ifconfig 命令要写绝对路径/usr/sbin/ifconfig，/usr/sbin 默认不在普通用户的搜索路径中，或加入此路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATH&#x3D;$PATH:&#x2F;usr&#x2F;sbin;export PATH</span><br></pre></td></tr></table></figure>

<p>另外，不同系统命令的路径不尽相同。能使用命令“whereis 命令名”来查找其路径。<br>ex :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zte@SMPS-WEB1:&#x2F;home&gt; whereis usermod</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod: &#x2F;usr&#x2F;sbin&#x2F;usermod  &#x2F;usr&#x2F;share&#x2F;man&#x2F;man8&#x2F;usermod.8.gz</span><br></pre></td></tr></table></figure>

<p>这里搜索到 2 个路径，取第一个. 表示在 zte 用户登录下查看 usermod 命令的具体路径<br>这时会显示下面的输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">We trust you have received the usual lecture from the local System</span><br><span class="line">Administrator. It usually boils down to these two things:</span><br><span class="line">#1) Respect the privacy of others.</span><br><span class="line">#2) Think before you type.</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure>

<p>如果 zte 正确地输入了他的口令，命令 ifconfig 将会以 root 用户身份执行。<br>注意：设置文件/etc/sudoers 必须使用命令 Visudo 来编辑。<br>只要把相应的用户名、主机名和许可的命令列表以标准的格式加入到文件/etc/sudoers，并保存就能生效，再看一个例子。</p>
<p>2、例子：<br>[1]管理员需要允许 gem 用户在主机 sun 上执行 reboot 和 shutdown 命令，在<code>/etc/sudoers</code>中加入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem sun&#x3D;&#x2F;usr&#x2F;sbin&#x2F;reboot，&#x2F;usr&#x2F;sbin&#x2F;shutdown</span><br></pre></td></tr></table></figure>

<p>注意：命令一定要使用绝对路径，以避免其他目录的同名命令被执行，从而造成安全隐患。<br>然后保存退出，gem 用户想执行 reboot 命令时，只要在提示符下运行下列命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo &#x2F;usr&#x2F;sbin&#x2F;reboot</span><br></pre></td></tr></table></figure>

<p>输入正确的密码，就能重启服务器了。<br>[2]<code>beinan ALL=(root) /bin/chown, /bin/chmod</code><br>表示的是 beinan 能在所有可能出现的主机名的主机中，能转换到 root 下执行 /bin/chown ，能转换到所有用户招执行/bin/chmod 命令，通过 sudo -l 来查看 beinan 在这台主机上允许和禁止运行的命令；<br>[3]<code>beinan ALL=(root) NOPASSWD: /bin/chown,/bin/chmod</code><br>表示的是 beinan 能在所有可能出现的主机名的主机中，能转换到 root 下执行 /bin/chown ，不必输入 beinan 用户的密码；并且能转换到所有用户下执行/bin/chmod 命令，但执行 chmod 时需要 beinan 输入自己的密码；通过 sudo -l 来查看 beinan 在这台主机上允许和禁止运行的命令；<br>关于一个命令动作是不是需要密码，我们能发目前系统在默认的情况下是需要用户密码的，除非特加指出不必用户需要输入自己密码，所以要在执行动作之前加入 NOPASSWD: 参数；<br>[4]取消程式某类程式的执行，要在命令动作前面加上!号； 在本例中也出现了通配符的<code>*</code>的用法；<br><code>beinan ALL=/usr/sbin/*,/sbin/*,!/usr/sbin/fdisk</code>注：把这行规则加入到/etc/sudoers 中；但你得有 beinan 这个用户组，并且 beinan 也是这个组中的才行；本规则表示 beinan 用户在 所有可能存在的主机名的主机上运行/usr/sbin 和/sbin 下所有的程式，但 fdisk 程式除外；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[beinan@localhost ~]$ sudo -l</span><br><span class="line">Password: 注：在这里输入beinan用户的密码；</span><br><span class="line">User beinan may run the following commands on this host:</span><br><span class="line">(root) &#x2F;usr&#x2F;sbin&#x2F;*</span><br><span class="line">(root) &#x2F;sbin&#x2F;*</span><br><span class="line">(root) !&#x2F;sbin&#x2F;fdisk</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[beinan@localhost ~]$ sudo &#x2F;sbin&#x2F;fdisk -l</span><br><span class="line">Sorry, user beinan is not allowed to execute ’&#x2F;sbin&#x2F;fdisk -l’ as root on localhost.</span><br></pre></td></tr></table></figure>

<p>注：不能转换到 root 用户下运行 fdisk 程式；<br>[5]如果你想对一组用户进行定义，能在组名前加上<code>%</code>，对其进行设置，如：<br><code>%cuug ALL=(ALL) ALL</code><br>那么属于 cuug 这个组的所有成员都能 sudo 来执行特定的任务</p>
<p>3、另外，还能利用别名来简化设置文件。别名类似组的概念，有用户别名、主机别名和命令别名。多个用户能首先用一个别名来定义，然后在规定他们能执行什么 命令的时候使用别名就能了，这个设置对所有用户都生效。主机别名和命令别名也是如此。注意使用前先要在<code>/etc/sudoers</code>中定义： <code>User_Alias</code>, <code>Host_Alias</code>,<code>Cmnd_Alias</code>项，在其后面加入相应的名称，也以逗号分隔开就能了，举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host_Alias SERVER&#x3D;no1</span><br><span class="line">User_Alias ADMINS&#x3D;liming，gem</span><br><span class="line">Cmnd_Alias</span><br><span class="line">SHUTDOWN&#x3D;&#x2F;usr&#x2F;sbin&#x2F;halt，&#x2F;usr&#x2F;sbin&#x2F;shutdown，&#x2F;usr&#x2F;sbin&#x2F;reboot</span><br><span class="line">ADMINS SERVER&#x3D;SHUTDOWN</span><br></pre></td></tr></table></figure>

<p>4、sudo 命令还能加上一些参数，完成一些辅助的功能，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo -l</span><br></pre></td></tr></table></figure>

<p>会显示出类似这样的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User liming may run the following commands on this host:</span><br><span class="line">(root) &#x2F;usr&#x2F;sbin&#x2F;reboot</span><br></pre></td></tr></table></figure>

<p>说明 root 允许用户 liming 执行/usr/sbin/reboot 命令。这个参数能使用户查看自己目前能在 sudo 中执行哪些命令。</p>
<p>5、在命令提示符下键入 sudo 命令会列出所有参数，其他一些参数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-V 显示版本编号。</span><br><span class="line">-h 显示sudo命令的使用参数。</span><br><span class="line">-v 因为sudo在第一次执行时或是在N分钟内没有执行（N预设为5）会询问密码。这个参数是重新做一次确认，如果超过N分钟，也会问密码。</span><br><span class="line">-k 将会强迫使用者在下一次执行sudo时询问密码（不论有没有超过N分钟）。</span><br><span class="line">-b 将要执行的命令放在背景执行。</span><br><span class="line">-p prompt 能更改问密码的提示语，其中%u会替换为使用者的账号名称，%h会显示主机名称。</span><br><span class="line">-u username&#x2F;#uid 不加此参数，代表要以root的身份执行命令，而加了此参数，能以username的身份执行命令（#uid为该username的UID）。</span><br><span class="line">-s 执行环境变量中的SHELL所指定的Shell，或是&#x2F;etc&#x2F;passwd里所指定的Shell。</span><br><span class="line">-H 将环境变量中的HOME（宿主目录）指定为要变更身份的使用者的宿主目录。（如不加-u参数就是系统管理者root。）</span><br><span class="line">要以系统管理者身份（或以-u更改为其他人）执行的命令。</span><br></pre></td></tr></table></figure>

<h2 id="用户和用户组应用实例"><a href="#用户和用户组应用实例" class="headerlink" title="用户和用户组应用实例"></a>用户和用户组应用实例</h2><p>建三个用户<code>zte_a</code>,<code>zte_b</code>,<code>zte_c</code> 都所属于 users 组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x   7 zte_a  users  4096 2007-11-22 09:58 zte_a</span><br><span class="line">drwxr-xr-x   7 zte_b  users  4096 2007-11-22 09:14 zte_b</span><br><span class="line">drwxr-xr-x   7 zte_c  users  4096 2007-11-22 09:14 zte_c</span><br></pre></td></tr></table></figure>

<p>创建 time 目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x   2 root   root 4096 2007-11-22 09:26 time</span><br></pre></td></tr></table></figure>

<p>创建 time 目录下的 time 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-rw-r--r--   1 root root  27 2007-11-22 09:26 time.txt</span><br></pre></td></tr></table></figure>

<p>需求:让 root 用户能 wrx 目录 time 下的 time.txt,同时，而只允许属于 users 用户组的用户读 time.txt 文件</p>
<p>步骤:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod o-r-x time 设置目录权限</span><br><span class="line">drwxr-x---   2 root   root 4096 2007-11-22 09:26 time</span><br><span class="line">chmod o-r time.txt设置文件权限</span><br><span class="line">-rw-r-----   1 root root  27 2007-11-22 09:26 time.txt</span><br><span class="line">chgrp user time 设置目录所属组</span><br><span class="line">drwxr-x---   2 root users 4096 2007-11-22 09:26 time</span><br><span class="line">chgrp user time.txt设置文件所属组</span><br><span class="line">-rw-r-----   1 root users 27 2007-11-22 09:26 time.txt</span><br></pre></td></tr></table></figure>

<p>注: 以后要为 user 组新扩此类用户时，只需 useradd -m new，再 usermod -g user new 将 new 用户归属于 user 组即可</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>gitLab 安装 使用</title>
    <url>//2016/05/19/gitLab.html</url>
    <content><![CDATA[<h1 id="gitLab"><a href="#gitLab" class="headerlink" title="gitLab"></a>gitLab</h1><!--
create time: 2016-05-19 16:53:40
Author: <TODO: 请写上你的名字>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="CentOS-6-6-下安装"><a href="#CentOS-6-6-下安装" class="headerlink" title="CentOS 6.6 下安装"></a>CentOS 6.6 下安装</h2><p>Download rpm</p>
<p><a href="https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms">https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install curl openssh-server openssh-clients postfix cronie</span><br><span class="line">sudo service postfix start</span><br><span class="line">sudo chkconfig postfix on</span><br><span class="line">sudo lokkit -s http -s ssh</span><br><span class="line"></span><br><span class="line">rpm -ivh gitlab-ce-XXX.rpm</span><br></pre></td></tr></table></figure>

<p>启动（或修改/etc/gitlab/gitlab.rb 配置文件后重启生效）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<p>会自动添加这些用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-www:x:498:498::&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx:&#x2F;bin&#x2F;false</span><br><span class="line">git:x:497:497::&#x2F;var&#x2F;opt&#x2F;gitlab:&#x2F;bin&#x2F;sh</span><br><span class="line">gitlab-redis:x:496:496::&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;redis:&#x2F;bin&#x2F;nologin</span><br><span class="line">gitlab-psql:x:495:495::&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;postgresql:&#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure>

<h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><p><a href="https://docs.gitlab.com/ce/raketasks/backup_restore.html">https://docs.gitlab.com/ce/raketasks/backup_restore.html</a></p>
<p>需要手工备份<br>/etc/gitlab/gitlab-secrets.json (for omnibus packages) or /home/git/gitlab/.secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>

<p>默认文件备份在/var/opt/gitlab/backups</p>
<h2 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h2><p>拷贝文件到 /var/opt/gitlab/backups</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp *_gitlab_backup.tar /var/opt/gitlab/backups</span><br></pre></td></tr></table></figure>

<p>修改备份文件权限 0644</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 0644 *_gitlab_backup.tar</span><br></pre></td></tr></table></figure>

<p>停止服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl stop unicorn</span><br><span class="line">sudo gitlab-ctl stop sidekiq</span><br><span class="line"><span class="comment"># Verify</span></span><br><span class="line">sudo gitlab-ctl status</span><br></pre></td></tr></table></figure>

<p>恢复文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This command will overwrite the contents of your GitLab database!</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=1393513186</span><br></pre></td></tr></table></figure>

<p>重启服务并检查 一般会出现警告，根据提示修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br><span class="line">sudo gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><ol>
<li><p>备份恢复时<br>打开项目主页出现 500 错误 其他正常<a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/16999">https://gitlab.com/gitlab-org/gitlab-ce/issues/16999</a><br><code>I looked a little closer at this. The error only occurs on the project main page: https://donmainame.com/namespace/project Does not work. https://donmainame.com/namespace/project/activity https://donmainame.com/namespace/project/issues https://donmainame.com/namespace/project/wiki And others do work.</code></p>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/gitlab/gitlab-rails/production.log</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    Started GET &quot;&#x2F;NAMESPACE&#x2F;PROJECT&quot; for 127.0.0.1 at 2016-04-28 08:18:42 -0700</span><br><span class="line"></span><br><span class="line">Processing by ProjectsController#show as HTML</span><br><span class="line">Parameters: &#123;&quot;namespace_id&quot;&#x3D;&gt;&quot;NAMESPACE&quot;, &quot;id&quot;&#x3D;&gt;&quot;PROJECT&quot;&#125;</span><br><span class="line">Completed 500 Internal Server Error in 35ms (ActiveRecord: 3.7ms)</span><br><span class="line">OpenSSL::Cipher::CipherError (bad decrypt):</span><br><span class="line">app&#x2F;models&#x2F;project.rb:419:in &#96;import_url&#39; app&#x2F;models&#x2F;project.rb:449:in&#96;external_import?&#39;</span><br><span class="line">app&#x2F;models&#x2F;project.rb:441:in &#96;import?&#39; app&#x2F;models&#x2F;project.rb:457:in&#96;import_in_progress?&#39;</span><br><span class="line">app&#x2F;controllers&#x2F;projects_controller.rb:93:in &#96;show&#39; lib&#x2F;gitlab&#x2F;middleware&#x2F;go.rb:16:in&#96;call&#39;</span><br></pre></td></tr></table></figure></code></pre><p>原因是没有复制/etc/gitlab/gitlab-secrets.json，复制该文件后解决</p>
</li>
</ol>
<h2 id="连接数据库操作"><a href="#连接数据库操作" class="headerlink" title="连接数据库操作"></a>连接数据库操作</h2><p><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/database.md">https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/database.md</a></p>
<p>连接数据命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-rails dbconsole</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u gitlab-psql /opt/gitlab/embedded/bin/psql -h /var/opt/gitlab/postgresql -d gitlabhq_production</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlabhq_production&#x3D;# help</span><br><span class="line">You are using psql, the command-line interface to PostgreSQL.</span><br><span class="line">Type:  \copyright for distribution terms</span><br><span class="line">       \h for help with SQL commands</span><br><span class="line">       \? for help with psql commands</span><br><span class="line">       \g or terminate with semicolon to execute query</span><br><span class="line">       \q to quit</span><br><span class="line">gitlabhq_production&#x3D;#</span><br></pre></td></tr></table></figure>

<p>\l 列出数据库 \d 列出表 \q 退出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlabhq_production&#x3D;# \?</span><br><span class="line">General</span><br><span class="line">  \copyright             show PostgreSQL usage and distribution terms</span><br><span class="line">  \g [FILE] or ;         execute query (and send results to file or |pipe)</span><br><span class="line">  \h [NAME]              help on syntax of SQL commands, * for all commands</span><br><span class="line">  \q                     quit psql</span><br><span class="line"></span><br><span class="line">Query Buffer</span><br><span class="line">  \e [FILE] [LINE]       edit the query buffer (or file) with external editor</span><br><span class="line">  \ef [FUNCNAME [LINE]]  edit function definition with external editor</span><br><span class="line">  \p                     show the contents of the query buffer</span><br><span class="line">  \r                     reset (clear) the query buffer</span><br><span class="line">  \s [FILE]              display history or save it to file</span><br><span class="line">  \w FILE                write query buffer to file</span><br><span class="line"></span><br><span class="line">Input&#x2F;Output</span><br><span class="line">  \copy ...              perform SQL COPY with data stream to the client host</span><br><span class="line">  \echo [STRING]         write string to standard output</span><br><span class="line">  \i FILE                execute commands from file</span><br><span class="line">  \ir FILE               as \i, but relative to location of current script</span><br><span class="line">  \o [FILE]              send all query results to file or |pipe</span><br><span class="line">  \qecho [STRING]        write string to query output stream (see \o)</span><br><span class="line"></span><br><span class="line">Informational</span><br><span class="line">  (options: S &#x3D; show system objects, + &#x3D; additional detail)</span><br><span class="line">  \d[S+]                 list tables, views, and sequences</span><br><span class="line">  \d[S+]  NAME           describe table, view, sequence, or index</span><br><span class="line">  \da[S]  [PATTERN]      list aggregates</span><br><span class="line">  \db[+]  [PATTERN]      list tablespaces</span><br><span class="line">  \dc[S+] [PATTERN]      list conversions</span><br><span class="line">  \dC[+]  [PATTERN]      list casts</span><br><span class="line">  \dd[S]  [PATTERN]      show object descriptions not displayed elsewhere</span><br><span class="line">  \ddp    [PATTERN]      list default privileges</span><br><span class="line">  \dD[S+] [PATTERN]      list domains</span><br><span class="line">  \det[+] [PATTERN]      list foreign tables</span><br><span class="line">  \des[+] [PATTERN]      list foreign servers</span><br><span class="line">  \deu[+] [PATTERN]      list user mappings</span><br><span class="line">  \dew[+] [PATTERN]      list foreign-data wrappers</span><br><span class="line">  \df[antw][S+] [PATRN]  list [only agg&#x2F;normal&#x2F;trigger&#x2F;window] functions</span><br><span class="line">  \dF[+]  [PATTERN]      list text search configurations</span><br><span class="line">  \dFd[+] [PATTERN]      list text search dictionaries</span><br><span class="line">  \dFp[+] [PATTERN]      list text search parsers</span><br><span class="line">  \dFt[+] [PATTERN]      list text search templates</span><br><span class="line">  \dg[+]  [PATTERN]      list roles</span><br><span class="line">  \di[S+] [PATTERN]      list indexes</span><br><span class="line">  \dl                    list large objects, same as \lo_list</span><br><span class="line">  \dL[S+] [PATTERN]      list procedural languages</span><br><span class="line">  \dn[S+] [PATTERN]      list schemas</span><br><span class="line">  \do[S]  [PATTERN]      list operators</span><br><span class="line">  \dO[S+] [PATTERN]      list collations</span><br><span class="line">  \dp     [PATTERN]      list table, view, and sequence access privileges</span><br><span class="line">  \drds [PATRN1 [PATRN2]] list per-database role settings</span><br><span class="line">  \ds[S+] [PATTERN]      list sequences</span><br><span class="line">  \dt[S+] [PATTERN]      list tables</span><br><span class="line">  \dT[S+] [PATTERN]      list data types</span><br><span class="line">  \du[+]  [PATTERN]      list roles</span><br><span class="line">  \dv[S+] [PATTERN]      list views</span><br><span class="line">  \dE[S+] [PATTERN]      list foreign tables</span><br><span class="line">  \dx[+]  [PATTERN]      list extensions</span><br><span class="line">  \l[+]                  list all databases</span><br><span class="line">  \sf[+] FUNCNAME        show a function&#39;s definition</span><br><span class="line">  \z      [PATTERN]      same as \dp</span><br><span class="line"></span><br><span class="line">Formatting</span><br><span class="line">  \a                     toggle between unaligned and aligned output mode</span><br><span class="line">  \C [STRING]            set table title, or unset if none</span><br><span class="line">  \f [STRING]            show or set field separator for unaligned query output</span><br><span class="line">  \H                     toggle HTML output mode (currently off)</span><br><span class="line">  \pset NAME [VALUE]     set table output option</span><br><span class="line">                         (NAME :&#x3D; &#123;format|border|expanded|fieldsep|fieldsep_zero|footer|null|</span><br><span class="line">                         numericlocale|recordsep|recordsep_zero|tuples_only|title|tableattr|pager&#125;)</span><br><span class="line">  \t [on|off]            show only rows (currently off)</span><br><span class="line">  \T [STRING]            set HTML &lt;table&gt; tag attributes, or unset if none</span><br><span class="line">  \x [on|off|auto]       toggle expanded output (currently off)</span><br><span class="line"></span><br><span class="line">Connection</span><br><span class="line">  \c[onnect] &#123;[DBNAME|- USER|- HOST|- PORT|-] | conninfo&#125;</span><br><span class="line">                         connect to new database (currently &quot;gitlabhq_production&quot;)</span><br><span class="line">  \encoding [ENCODING]   show or set client encoding</span><br><span class="line">  \password [USERNAME]   securely change the password for a user</span><br><span class="line">  \conninfo              display information about current connection</span><br><span class="line"></span><br><span class="line">Operating System</span><br><span class="line">  \cd [DIR]              change the current working directory</span><br><span class="line">  \setenv NAME [VALUE]   set or unset environment variable</span><br><span class="line">  \timing [on|off]       toggle timing of commands (currently off)</span><br><span class="line">  \! [COMMAND]           execute command in shell or start interactive shell</span><br><span class="line"></span><br><span class="line">Variables</span><br><span class="line">  \prompt [TEXT] NAME    prompt user to set internal variable</span><br><span class="line">  \set [NAME [VALUE]]    set internal variable, or list all if no parameters</span><br><span class="line">  \unset NAME            unset (delete) internal variable</span><br><span class="line"></span><br><span class="line">Large Objects</span><br><span class="line">  \lo_export LOBOID FILE</span><br><span class="line">  \lo_import FILE [COMMENT]</span><br><span class="line">  \lo_list</span><br><span class="line">  \lo_unlink LOBOID      large object operations</span><br><span class="line">gitlabhq_production&#x3D;#</span><br></pre></td></tr></table></figure>

<h2 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br></pre></td></tr></table></figure>

<h2 id="gitlab-ctrl"><a href="#gitlab-ctrl" class="headerlink" title="gitlab-ctrl"></a>gitlab-ctrl</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-ctrl reconfigure</span><br><span class="line">gitlab-ctrl status</span><br><span class="line">gitlab-ctrl start</span><br><span class="line">gitlab-ctrl restart</span><br><span class="line">gitlab-ctrl stop</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>gitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>gitflow 使用 流程</title>
    <url>//2016/05/13/gitflow.html</url>
    <content><![CDATA[<h1 id="gitflow"><a href="#gitflow" class="headerlink" title="gitflow"></a>gitflow</h1><!--
create time: 2016-05-13 14:57:25
Author: <TODO: 请写上你的名字>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<p>原文链接 <a href="https://www.ituring.com.cn/article/56870">https://www.ituring.com.cn/article/56870</a></p>
<h2 id="Git-Flow-是什么"><a href="#Git-Flow-是什么" class="headerlink" title="Git Flow 是什么"></a>Git Flow 是什么</h2><p>Git Flow 是构建在 Git 之上的一个组织软件开发活动的模型，是在 Git 之上构建的一项软件开发最佳实践。Git Flow 是一套使用 Git 进行源代码管理时的一套行为规范和简化部分 Git 操作的工具。</p>
<p>2010 年 5 月，在一篇名为“<a href="https://nvie.com/posts/a-successful-git-branching-model/">一种成功的 Git 分支模型</a>”的博文中，@nvie 介绍了一种在 Git 之上的软件开发模型。通过利用 Git 创建和管理分支的能力，为每个分支设定具有特定的含义名称，并将软件生命周期中的各类活动归并到不同的分支上。实现了软件开发过程不同操作的相互隔离。这种软件开发的活动模型被 nwie 称为“Git Flow”。</p>
<p>一般而言，软件开发模型有常见的瀑布模型、迭代开发模型、以及最近出现的敏捷开发模型等不同的模型。每种模型有各自应用场景。Git Flow 重点解决的是由于源代码在开发过程中的各种冲突导致开发活动混乱的问题。因此，Git flow 可以很好的于各种现有开发模型相结合使用。</p>
<p>在开始研究 Git Flow 的具体内容前，下面这张图可以看到模型的全貌（引自 nvie 的<a href="https://nvie.com/posts/a-successful-git-branching-model/">博文</a>)：</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/gitflow.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/gitflow.png"></p>
<h2 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h2><ol>
<li><p>项目中必备分支</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/gitflow1.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/gitflow1.png"></p>
<ul>
<li><p><strong>主干分支</strong></p>
<pre><code>Master ：随时可供在生产环境中部署的代码，建议伴有标签（TAG）

Develop：每天需要提交和合并的代码，功能逐渐完成的代码开发分支</code></pre></li>
</ul>
</li>
</ol>
<pre><code>* **辅助分支**

    Feature：新功能分支，辅助develop分支。主要用于实验性且效果不好的代码变更。或者用于项目组新成员接手开发新功能等。分支可以合并到develop分支，或者直接丢弃。

    命名规范：`feature-*`

    Release：当基本版本完成，准备提交时到APP Store的等待时间，本分支可以做小BUG的修复。成功通过APP Store审核后，必须合并到Master分支，并记录标签（Tag），如果有BUGfix，则还需合并到Develop分支。此版本的作用是项目二期可以继续在develop分支开始开发。

    命名规范：`release-*`

    Hotfix: 对于线上版本（Master分支）的BUG修改的辅助分支，必须合并回master分支和develop分支。

    命名惯例：`hotfix-*`</code></pre><ol start="2">
<li><p>工作流程</p>
<ol>
<li><p>创建项目</p>
</li>
<li><p>创建 Master 分支、develop 分支</p>
</li>
<li><p>在 develop 分支不断开发和迭代版本 0.1 功能，如果有需要创建 feature 开发，则创建并最终选择是否合并到 develop 分支</p>
</li>
<li><p>Develop 分支的 0.1 版本开发完成，创建 release-0.1 分支，打包发布给测试人员测试，并进行在 develop 分支上继续开发 0.2 版本。</p>
</li>
<li><p>测试人员发现 release-0.1 版本 bug，相关开发人员直接在该分支上修改，并打包给测试人员继续测试。其他人员继续在 develop 分支开发新功能。</p>
</li>
<li><p>V0.1 测试完成，发给用户查看，打包 release-0.1 给用户。用户如果有需要修改的需求或者 BUG，项目经理把需求和 BUG 分开。需求问题需要告知客户要等下一个小版本。比较小的 BUG 问题，选择性的修改或者放到下一版本。如果用户要求一定要看到修改，则一定要合并到 develop 分支。</p>
</li>
<li><p>同上一步骤，发布 release-0.2 版本，此时可以删除 release-0.1 分支。直到最后发布 release-1.0 版本后。</p>
</li>
<li><p>Develop 理论上可以继续开发二期功能。Release-1.0 版本跟进回归测试的 bug，最终确定发布，并通过 APP Store 审核以后，把 release-1.0 合并到 develop 分支和 Master 分支，并添加一个标签 Tag（V1.0）</p>
</li>
<li><p>如果有 1.0 版本上线以后，发现了一下 BUG，则需要通过 Tag1.0 创建一个分支 hotfix-issue001 进行修复，知道提交审核通过，把分支合并到 Master 分支和 develop 分支，并给 Master 添加标签（V 实际版本号）</p>
</li>
</ol>
</li>
</ol>
<h2 id="Git-Flow-中的分支"><a href="#Git-Flow-中的分支" class="headerlink" title="Git Flow 中的分支"></a>Git Flow 中的分支</h2><p>Git Flow 模型中定义了主分支和辅助分支两类分支。其中主分支用于组织与软件开发、部署相关的活动；辅助分支组织为了解决特定的问题而进行的各种开发活动。</p>
<h3 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h3><p>主分支是所有开发活动的核心分支。所有的开发活动产生的输出物最终都会反映到主分支的代码中。主分支分为 master 分支和 development 分支。</p>
<h4 id="master-分支"><a href="#master-分支" class="headerlink" title="master 分支"></a>master 分支</h4><p>master 分支上存放的应该是随时可供在生产环境中部署的代码（Production Ready state）。当开发活动告一段落，产生了一份新的可供部署的代码时，master 分支上的代码会被更新。同时，每一次更新，最好添加对应的版本号标签（TAG）。</p>
<h4 id="develop-分支"><a href="#develop-分支" class="headerlink" title="develop 分支"></a>develop 分支</h4><p>develop 分支是保存当前最新开发成果的分支。通常这个分支上的代码也是可进行每日夜间发布的代码（Nightly build）。因此这个分支有时也可以被称作“integration branch”。</p>
<p>当 develop 分支上的代码已实现了软件需求说明书中所有的功能，通过了所有的测试后，并且代码已经足够稳定时，就可以将所有的开发成果合并回 master 分支了。对于 master 分支上的新提交的代码建议都打上一个新的版本号标签（TAG），供后续代码跟踪使用。</p>
<p>因此，每次将 develop 分支上的代码合并回 master 分支时，我们都可以认为一个新的可供在生产环境中部署的版本就产生了。通常而言，“仅在发布新的可供部署的代码时才更新 master 分支上的代码”是推荐所有人都遵守的行为准则。基于此，理论上说，每当有代码提交到 master 分支时，我们可以使用 Git Hook 触发软件自动测试以及生产环境代码的自动更新工作。这些自动化操作将有利于减少新代码发布之后的一些事务性工作。</p>
<h3 id="辅助分支"><a href="#辅助分支" class="headerlink" title="辅助分支"></a>辅助分支</h3><p>辅助分支是用于组织解决特定问题的各种软件开发活动的分支。辅助分支主要用于组织软件新功能的并行开发、简化新功能开发代码的跟踪、辅助完成版本发布工作以及对生产代码的缺陷进行紧急修复工作。这些分支与主分支不同，通常只会在有限的时间范围内存在。</p>
<p>辅助分支包括：</p>
<ul>
<li>用于开发新功能时所使用的 feature 分支；</li>
<li>用于辅助版本发布的 release 分支；</li>
<li>用于修正生产代码中的缺陷的 hotfix 分支。</li>
</ul>
<p>以上这些分支都有固定的使用目的和分支操作限制。从单纯技术的角度说，这些分支与 Git 其他分支并没有什么区别，但通过命名，我们定义了使用这些分支的方法。</p>
<h4 id="feature-分支"><a href="#feature-分支" class="headerlink" title="feature 分支"></a>feature 分支</h4><p>使用规范：</p>
<ul>
<li>可以从 develop 分支发起 feature 分支</li>
<li>代码必须合并回 develop 分支</li>
<li>feature 分支的命名可以使用除<code>master</code>，<code>develop</code>，<code>release-*</code>，<code>hotfix-*</code>之外的任何名称</li>
</ul>
<p>feature 分支（有时也可以被叫做“topic 分支”）通常是在开发一项新的软件功能的时候使用，这个分支上的代码变更最终合并回 develop 分支或者干脆被抛弃掉（例如实验性且效果不好的代码变更）。</p>
<p>一般而言，feature 分支代码可以保存在开发者自己的代码库中而不强制提交到主代码库里。</p>
<h4 id="release-分支"><a href="#release-分支" class="headerlink" title="release 分支"></a>release 分支</h4><p>使用规范：</p>
<ul>
<li>可以从 develop 分支派生</li>
<li>必须合并回 develop 分支和 master 分支</li>
<li>分支命名惯例：<code>release-*</code></li>
</ul>
<p>release 分支是为发布新的产品版本而设计的。在这个分支上的代码允许做小的缺陷修正、准备发布版本所需的各项说明信息（版本号、发布时间、编译时间等等）。通过在 release 分支上进行这些工作可以让 develop 分支空闲出来以接受新的 feature 分支上的代码提交，进入新的软件开发迭代周期。</p>
<p>当 develop 分支上的代码已经包含了所有即将发布的版本中所计划包含的软件功能，并且已通过所有测试时，我们就可以考虑准备创建 release 分支了。而所有在当前即将发布的版本之外的业务需求一定要确保不能混到 release 分支之内（避免由此引入一些不可控的系统缺陷）。</p>
<p>成功的派生了 release 分支，并被赋予版本号之后，develop 分支就可以为“下一个版本”服务了。所谓的“下一个版本”是在当前即将发布的版本之后发布的版本。版本号的命名可以依据项目定义的版本号命名规则进行。</p>
<h4 id="hotfix-分支"><a href="#hotfix-分支" class="headerlink" title="hotfix 分支"></a>hotfix 分支</h4><p>使用规范：</p>
<ul>
<li>可以从 master 分支派生</li>
<li>必须合并回 master 分支和 develop 分支</li>
<li>分支命名惯例：<code>hotfix-*</code></li>
</ul>
<p>除了是计划外创建的以外，hotfix 分支与 release 分支十分相似：都可以产生一个新的可供在生产环境部署的软件版本。</p>
<p>当生产环境中的软件遇到了异常情况或者发现了严重到必须立即修复的软件缺陷的时候，就需要从 master 分支上指定的 TAG 版本派生 hotfix 分支来组织代码的紧急修复工作。</p>
<p>这样做的显而易见的好处是不会打断正在进行的 develop 分支的开发工作，能够让团队中负责新功能开发的人与负责代码紧急修复的人并行的开展工作。</p>
<h2 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h2><p>Git Flow 开发模型从源代码管理角度对通常意义上的软件开发活动进行了约束。应该说，为我们的软件开发提供了一个可供参考的管理模型。Git Flow 开发模型让 nvie 的开发代码仓库保持整洁，让小组各个成员之间的开发相互隔离，能够有效避免处于开发状态中的代码相互影响而导致的效率低下和混乱。</p>
<p>所谓模型，在不同的开发团队，不同的文化，不同的项目背景情况下都有可能需要进行适当的裁剪或扩充。祝各位好运！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitflow</tag>
      </tags>
  </entry>
  <entry>
    <title>lts分布式任务文档</title>
    <url>//2016/05/09/LTS%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%96%87%E6%A1%A3.html</url>
    <content><![CDATA[<h1 id="LTS-分布式任务调度文档"><a href="#LTS-分布式任务调度文档" class="headerlink" title="LTS 分布式任务调度文档"></a>LTS 分布式任务调度文档</h1><h2 id="LTS-介绍"><a href="#LTS-介绍" class="headerlink" title="LTS 介绍"></a>LTS 介绍</h2><blockquote>
<p>LTS(light-task-scheduler)主要用于解决分布式任务调度问题，支持实时任务，定时任务，Cron 任务，Repeat 任务。有较好的伸缩性，扩展性，健壮稳定性而被多家公司使用，同时也希望开源爱好者一起贡献。</p>
</blockquote>
<h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><ul>
<li><ol>
<li>支持分布式，解决多点故障，支持动态扩容，容错重试等</li>
</ol>
</li>
<li><ol start="2">
<li>Spring 扩展支持，SpringBoot 支持，Spring Quartz Cron 任务的无缝接入支持</li>
</ol>
</li>
<li><ol start="3">
<li>节点监控支持，任务执行监控支持，JVM 监控支持</li>
</ol>
</li>
<li><ol start="4">
<li>后台运维操作支持, 可以动态提交，更改，停止 任务</li>
</ol>
</li>
</ul>
<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><ul>
<li>github 地址:<a href="https://github.com/ltsopensource/light-task-scheduler">https://github.com/ltsopensource/light-task-scheduler</a></li>
<li>oschina 地址:<a href="https://git.oschina.net/hugui/light-task-scheduler">https://git.oschina.net/hugui/light-task-scheduler</a></li>
<li>例子: <a href="https://github.com/ltsopensource/lts-examples">https://github.com/ltsopensource/lts-examples</a></li>
<li>文档地址(正在更新中): <a href="https://www.gitbook.com/book/qq254963746/lts/details">https://www.gitbook.com/book/qq254963746/lts/details</a></li>
</ul>
<h2 id="LTS-技术架构"><a href="#LTS-技术架构" class="headerlink" title="LTS 技术架构"></a>LTS 技术架构</h2><blockquote>
<p>LTS 着力于解决分布式任务调度问题，将任务的提交者和执行者解耦，解决任务执行的单点故障，支持动态扩容，出错重试等机制。代码程序设计上，参考了优秀开源项目 Dubbo，Hadoop 的部分思想。</p>
</blockquote>
<h4 id="LTS-目前支持四种任务"><a href="#LTS-目前支持四种任务" class="headerlink" title="LTS 目前支持四种任务"></a>LTS 目前支持四种任务</h4><ul>
<li>实时任务：提交了之后立即就要执行的任务。</li>
<li>定时任务：在指定时间点执行的任务，譬如 今天 3 点执行（单次）。</li>
<li>Cron 任务：CronExpression，和 quartz 类似（但是不是使用 quartz 实现的）譬如 0 0/1 * ?</li>
<li>Repeat 任务：譬如每隔 5 分钟执行一次，重复 50 次就停止。</li>
</ul>
<h4 id="架构设计上，LTS-框架中包含以下五种类型的节点"><a href="#架构设计上，LTS-框架中包含以下五种类型的节点" class="headerlink" title="架构设计上，LTS 框架中包含以下五种类型的节点"></a>架构设计上，LTS 框架中包含以下五种类型的节点</h4><ul>
<li>JobClient :主要负责提交任务, 并接收任务执行反馈结果。</li>
<li>JobTracker :负责任务调度，接收并分配任务。</li>
<li>TaskTracker :负责执行任务，执行完反馈给 JobTracker。</li>
<li>LTS-Monitor :主要负责收集各个节点的监控信息，包括任务监控信息，节点 JVM 监控信息</li>
<li>LTS-Admin :管理后台）主要负责节点管理，任务队列管理，监控管理等。</li>
</ul>
<h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><p><img src="https://git.oschina.net/hugui/light-task-scheduler/raw/master/docs/LTS_architecture.png?dir=0&filepath=docs%2FLTS_architecture.png&oid=262a5234534e2d9fa8862f3e632c5551ebd95e21&sha=d01be5d59e8d768f49bbdc66c8334c37af8f7af5" alt></p>
<ul>
<li><strong>Registry:</strong> 注册中心，LTS 提供多种实现，目前支持 zookeeper（推荐）和 redis, 主要用于 LTS 的节点信息暴露和 master 节点选举。</li>
<li><strong>FailStore：</strong> 失败存储，主要用于在部分场景远程 RPC 调用失败的情况，采取现存储本地 KV 文件系统，待远程通信恢复的时候再进行数据补偿。目前 FailStore 场景，主要有 RetryJobClient 提交**任务失败的时候，存储 FailStore；TaskTracker 返回任务执行结果给 JobTracker 的失败 时候，FailStore；TaskTracker 提交 BizLogger 的失败的时候，存储 FailStore. 目前 FailStore 有四种实现：leveldb，rocksdb，berkeleydb，mapdb（当然用户也可以实现扩展接口实现自己的 FailStore）</li>
<li><strong>QueueManager：</strong> 任务队列，目前提供 mysql（推荐）和 mongodb 两种实现（同样的用户可以自己扩容展示其他的，譬如 oracle 等），主要存储任务数据和任务执行日志等。</li>
<li><strong>RPC：</strong> 远程 RPC 通信框架，目前也支持多种实现，LTS 自带有 netty 和 mina，用户可以自行选择，或者自己 SPI 扩展实现其他的。</li>
<li><strong>NodeGroup：</strong> 节点组，同一个节点组中的任何节点都是对等的，等效的，对外提供相同的服务。譬如 TaskTracker 中有 10 个 nodeGroup 都是 send_msg 的节点组，专门执行发送短信的任务。每个节点组中都有一个 master 节点，这个 master 节点是由 LTS 动态选出来的，当一个 master 节点挂掉之后，LTS 会立马选出另外一个 master 节点，框架提供 API 监听接口给用户。</li>
<li><strong>ClusterName：</strong> LTS 集群，就如上图所示，整个图就是一个集群，包含 LTS 的五种节点。</li>
</ul>
<h4 id="节点图"><a href="#节点图" class="headerlink" title="节点图"></a>节点图</h4><p><img src="https://img1.tuicool.com/mInIZj.png!web" alt></p>
<ul>
<li><ol>
<li>一个节点组等同于一个集群，同一个节点组中的各个节点是对等的，外界无论连接节点组中的任务一个节点都是可以的。</li>
</ol>
</li>
<li><ol start="2">
<li>每个节点组中都有一个 master 节点，采用 zookeeper 进行 master 选举(master 宕机，会自动选举出新的 master 节点)，框架会提供接口 API 来监听 master 节点的变化，用户可以自己使用 master 节点做自己想做的事情。</li>
</ol>
</li>
<li><ol start="3">
<li>JobClient 和 TaskTracker 都可以存在多个节点组。譬如 JobClient 可以存在多个节点组。 譬如：JobClient 节点组为 ‘lts_WEB’ 中的一个节点提交提交一个 只有节点组为’lts_TRADE’的 TaskTracker 才能执行的任务。</li>
</ol>
</li>
<li><ol start="4">
<li>(每个集群中)JobTacker 只有一个节点组。</li>
</ol>
</li>
<li><ol start="5">
<li>多个 JobClient 节点组和多个 TaskTracker 节点组再加上一个 JobTacker 节点组, 组成一个大的集群。</li>
</ol>
</li>
</ul>
<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ul>
<li><ol>
<li>JobClient 提交一个 任务 给 JobTracker, 这里我提供了两种客户端 API, 一种是如果 JobTracker 不存在或者提交失败，直接返回提交失败。另一种客户端是重试客户端, 如果提交失败，先存储到本地 leveldb(可以使用 NFS 来达到同个节点组共享 leveldb 文件的目的,多线程访问，做了文件锁处理)，返回给客户端提交成功的信息，待 JobTracker 可用的时候，再将任务提交。</li>
</ol>
</li>
<li><ol start="2">
<li>JobTracker 收到 JobClient 提交来的任务，先生成一个唯一的 JobID。然后将任务储存在 Mongo 集群中。JobTracker 发现有（任务执行的）可用的 TaskTracker 节点(组) 之后，将优先级最大，最先提交的任务分发给 TaskTracker。这里 JobTracker 会优先分配给比较空闲的 TaskTracker 节点，达到负载均衡。</li>
</ol>
</li>
<li><ol start="3">
<li>TaskTracker 收到 JobTracker 分发来的任务之后，执行。执行完毕之后，再反馈任务执行结果给 JobTracker（成功 or 失败[失败有失败错误信息]），如果发现 JobTacker 不可用，那么存储本地 leveldb，等待 TaskTracker 可用的时候再反馈。反馈结果的同时，询问 JobTacker 有没有新的任务要执行。</li>
</ol>
</li>
<li><ol start="4">
<li>JobTacker 收到 TaskTracker 节点的任务结果信息，生成并插入(mongo)任务执行日志。根据任务信息决定要不要反馈给客户端。不需要反馈的直接删除, 需要反馈的（同样 JobClient 不可用存储文件，等待可用重发）。</li>
</ol>
</li>
<li><ol start="5">
<li>JobClient 收到任务执行结果，进行自己想要的逻辑处理。</li>
</ol>
</li>
</ul>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li><h6 id="Spring-Spring-Boot-支持"><a href="#Spring-Spring-Boot-支持" class="headerlink" title="Spring/Spring Boot 支持"></a>Spring/Spring Boot 支持</h6></li>
</ul>
<blockquote>
<p>LTS 可以完全不用 Spring 框架，但是考虑到很用用户项目中都是用了 Spring 框架，所以 LTS 也提供了对 Spring 的支持，包括 Xml 和注解，引入 lts-spring.jar 即可。</p>
</blockquote>
<ul>
<li><h6 id="业务日志记录器"><a href="#业务日志记录器" class="headerlink" title="业务日志记录器"></a>业务日志记录器</h6></li>
</ul>
<blockquote>
<p>在 TaskTracker 端提供了业务日志记录器，供应用程序使用，通过这个业务日志器，可以将业务日志提交到 JobTracker，这些业务日志可以通过任务 ID 串联起来，可以在 LTS-Admin 中实时查看任务的执行进度。</p>
</blockquote>
<ul>
<li><h6 id="SPI-扩展支持"><a href="#SPI-扩展支持" class="headerlink" title="SPI 扩展支持"></a>SPI 扩展支持</h6></li>
</ul>
<blockquote>
<p>SPI 扩展可以达到零侵入，只需要实现相应的接口，并实现即可被 LTS 使用，目前开放出来的扩展接口有<br>对任务队列的扩展，用户可以不选择使用 mysql 或者 mongo 作为队列存储，也可以自己实现。<br>对业务日志记录器的扩展，目前主要支持 console，mysql，mongo，用户也可以通过扩展选择往其他地方输送日志。</p>
</blockquote>
<ul>
<li><h6 id="节点监控"><a href="#节点监控" class="headerlink" title="节点监控"></a>节点监控</h6></li>
</ul>
<blockquote>
<p>可以对 JobTracker，TaskTracker 节点进行资源监控，任务监控等，可以实时的在 LTS-Admin 管理后台查看，进而进行合理的资源调配。</p>
</blockquote>
<ul>
<li><h6 id="多样化任务执行结果支持"><a href="#多样化任务执行结果支持" class="headerlink" title="多样化任务执行结果支持"></a>多样化任务执行结果支持</h6></li>
</ul>
<blockquote>
<p>LTS 框架提供四种执行结果支持，EXECUTE_SUCCESS，EXECUTE_FAILED，EXECUTE_LATER，EXECUTE_EXCEPTION，并对每种结果采取相应的处理机制，譬如重试。<br>EXECUTE_SUCCESS: 执行成功,这种情况，直接反馈客户端（如果任务被设置了要反馈给客户端）。<br>EXECUTE_FAILED：执行失败，这种情况，直接反馈给客户端，不进行重试。<br>EXECUTE_LATER：稍后执行（需要重试），这种情况，不反馈客户端，重试策略采用 30s 的策略，默认最大重试次数为 10 次，用户可以通过参数设置修改这些参数。<br>EXECUTE_EXCEPTION：执行异常, 这中情况也会重试(重试策略，同上)</p>
</blockquote>
<ul>
<li><h6 id="FailStore-容错"><a href="#FailStore-容错" class="headerlink" title="FailStore 容错"></a>FailStore 容错</h6></li>
</ul>
<blockquote>
<p>采用 FailStore 机制来进行节点容错，Fail And Store，不会因为远程通信的不稳定性而影响当前应用的运行。</p>
</blockquote>
<ul>
<li><h6 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h6><blockquote>
<p>JobClient 和 TaskTracker 会随机连接 JobTracker 节点组中的一个节点，实现 JobTracker 负载均衡。当连接上后，将一直保持连接这个节点,保持连接通道，知道这个节点不可用，减少每次都重新连接一个节点带来的性能开销。<br>JobTracker 分发任务时，是优先分配给最空闲的一个 TaskTracker 节点，实现 TaskTracker 节点的负载均衡。</p>
</blockquote>
</li>
<li><h6 id="健壮性-故障转移"><a href="#健壮性-故障转移" class="headerlink" title="健壮性(故障转移)"></a>健壮性(故障转移)</h6><blockquote>
<p>当节点组中的一个节点当机之后，自动转到其他节点工作。当整个节点组当机之后，将会采用存储文件的方式，待节点组可用的时候进行重发。<br>当执行任务的 TaskTracker 节点当机之后，JobTracker 会将这个 TaskTracker 上的未完成的任务(死任务)，重新分配给节点组中其他节点执行。</p>
</blockquote>
</li>
</ul>
<ul>
<li><h6 id="动态扩容"><a href="#动态扩容" class="headerlink" title="动态扩容"></a>动态扩容</h6></li>
</ul>
<blockquote>
<p>因为 LTS 各个节点都是无状态的，所以支持动态增加删除节点，达到负载均衡的目的</p>
</blockquote>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li><p><strong>1. Java JDK</strong></p>
<blockquote>
<p>因为 LTS 是使用 Java 语言编写的，所以必须要有个 Java 编译运行环境，目前 LTS 支持 JDK1.6 及以上版本。</p>
</blockquote>
</li>
<li><p><strong>2. Maven</strong></p>
</li>
</ul>
<blockquote>
<p>LTS 项目是基于 Maven 做项目依赖管理的，所以用户机器上需要配置 Maven 环境</p>
</blockquote>
<ul>
<li><strong>3. Zookeeper/Redis</strong></li>
</ul>
<blockquote>
<p>因 LTS 目前支持 Zookeeper 和 Redis 作为注册中心，主要用于节点信息暴露、监听、master 节点选举。用于选择其一即可，建议 zookeeper。</p>
</blockquote>
<ul>
<li><strong>4. Mysql/Mongodb</strong></li>
</ul>
<blockquote>
<p>LTS 目前支持 Mysql 和 mongodb 作为任务队列的存储引擎。用户同样的选择其中一个即可。</p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote>
<p><strong>部署建议</strong></p>
</blockquote>
<blockquote>
<ol>
<li>Admin 后台: 建议 Admin 后台单独部署，默认会嵌入一个 Monitor</li>
<li>Monitor：默认在 Admin 后台进程中有一个，如果一个不够，也可以单独启动多个</li>
<li>JobTracker: 建议单独部署</li>
<li>JobClient:,这个是提交任务的工程,一般是和业务相关的,所以会放在业 务工程中, 当然也要看业务场景</li>
<li>TaskTracker,这个因为是跑任务的,具体看业务场景, 一般情况下也可以是独立部署</li>
</ol>
</blockquote>
<h4 id="1-JobTracker-和-LTS-Admin-部署"><a href="#1-JobTracker-和-LTS-Admin-部署" class="headerlink" title="1. JobTracker 和 LTS-Admin 部署"></a>1. JobTracker 和 LTS-Admin 部署</h4><blockquote>
<p>提供(cmd)windows 和(shell)linux 两种版本脚本来进行编译和部署:</p>
</blockquote>
<blockquote>
<ol>
<li>运行根目录下的 sh build.sh 或 build.cmd 脚本，会在 dist 目录下生成 lts-{version}-bin 文件夹</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>下面是其目录结构，其中 bin 目录主要是 JobTracker 和 LTS-Admin 的启动脚本。jobtracker 中是 JobTracker 的配置文件和需要使用到的 jar 包，lts-admin 是 LTS-Admin 相关的 war 包和配置文件。 lts-{version}-bin 的文件结构</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- lts-$&#123;version&#125;-bin</span><br><span class="line">    |-- bin</span><br><span class="line">    |   |-- jobtracker.cmd</span><br><span class="line">    |   |-- jobtracker.sh</span><br><span class="line">    |   |-- lts-admin.cmd</span><br><span class="line">    |   |-- lts-admin.sh</span><br><span class="line">    |   |-- lts-monitor.cmd</span><br><span class="line">    |   |-- lts-monitor.sh</span><br><span class="line">    |   |-- tasktracker.sh</span><br><span class="line">    |-- conf</span><br><span class="line">    |   |-- log4j.properties</span><br><span class="line">    |   |-- lts-admin.cfg</span><br><span class="line">    |   |-- lts-monitor.cfg</span><br><span class="line">    |   |-- readme.txt</span><br><span class="line">    |   |-- tasktracker.cfg</span><br><span class="line">    |   |-- zoo</span><br><span class="line">    |       |-- jobtracker.cfg</span><br><span class="line">    |       |-- log4j.properties</span><br><span class="line">    |       |-- lts-monitor.cfg</span><br><span class="line">    |-- lib</span><br><span class="line">    |   |-- *.jar</span><br><span class="line">    |-- war</span><br><span class="line">        |-- jetty</span><br><span class="line">        |   |-- lib</span><br><span class="line">        |       |-- *.jar</span><br><span class="line">        |-- lts-admin.war</span><br></pre></td></tr></table></figure>

<p><strong>JobTracker 启动</strong></p>
<blockquote>
<p>如果你想启动一个节点，直接修改下 conf/zoo 下的配置文件，然后运行 sh jobtracker.sh zoo start 即可，如果你想启动两个 JobTracker 节点，那么你需要拷贝一份 zoo,譬如命名为 zoo2,修改下 zoo2 下的配置文件，然后运行 sh jobtracker.sh zoo2 start 即可。logs 文件夹下生成 jobtracker-zoo.out 日志。</p>
</blockquote>
<p><strong>LTS-Admin 启动</strong></p>
<blockquote>
<p>修改 conf/lts-monitor.cfg 和 conf/lts-admin.cfg 下的配置，然后运行 bin 下的 sh lts-admin.sh 或 lts-admin.cmd 脚本即可。logs 文件夹下会生成 lts-admin.out 日志，启动成功在日志中会打印出访问地址，用户可以通过这个访问地址访问了。</p>
</blockquote>
<p><img src="https://git.oschina.net/hugui/light-task-scheduler/raw/master/docs/LTS-Admin/LTS-Admin-cron-job-queue.png?dir=0&filepath=docs%2FLTS-Admin%2FLTS-Admin-cron-job-queue.png&oid=aecaf01bca5270a53b144891baaa3d7e56d47706&sha=9a38205065553f6e02fb27a01cb06eeb0e643486" alt></p>
<h4 id="2-JobClient（部署）使用"><a href="#2-JobClient（部署）使用" class="headerlink" title="2. JobClient（部署）使用"></a>2. JobClient（部署）使用</h4><blockquote>
<p>需要引入 lts 的 jar 包有 lts-jobclient-{version}.jar，lts-core-{version}.jar 及其它第三方依赖 jar。</p>
</blockquote>
<p><strong>API 方式启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JobClient jobClient &#x3D; new RetryJobClient();</span><br><span class="line">jobClient.setNodeGroup(&quot;test_jobClient&quot;);</span><br><span class="line">jobClient.setClusterName(&quot;test_cluster&quot;);</span><br><span class="line">jobClient.setRegistryAddress(&quot;zookeeper:&#x2F;&#x2F;127.0.0.1:2181&quot;);</span><br><span class="line">jobClient.start();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 提交任务</span><br><span class="line">Job job &#x3D; new Job();</span><br><span class="line">job.setTaskId(&quot;3213213123&quot;);</span><br><span class="line">job.setParam(&quot;shopId&quot;, &quot;11111&quot;);</span><br><span class="line">job.setTaskTrackerNodeGroup(&quot;test_trade_TaskTracker&quot;);</span><br><span class="line">&#x2F;&#x2F; job.setCronExpression(&quot;0 0&#x2F;1 * * * ?&quot;);  &#x2F;&#x2F; 支持 cronExpression表达式</span><br><span class="line">&#x2F;&#x2F; job.setTriggerTime(new Date()); &#x2F;&#x2F; 支持指定时间执行</span><br><span class="line">Response response &#x3D; jobClient.submitJob(job);</span><br></pre></td></tr></table></figure>

<p><strong>Spring XML 方式启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;jobClient&quot; class&#x3D;&quot;com.github.ltsopensource.spring.JobClientFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;clusterName&quot; value&#x3D;&quot;test_cluster&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;registryAddress&quot; value&#x3D;&quot;zookeeper:&#x2F;&#x2F;127.0.0.1:2181&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;nodeGroup&quot; value&#x3D;&quot;test_jobClient&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;masterChangeListeners&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;bean class&#x3D;&quot;com.github.ltsopensource.example.support.MasterChangeListenerImpl&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;list&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;jobFinishedHandler&quot;&gt;</span><br><span class="line">        &lt;bean class&#x3D;&quot;com.github.ltsopensource.example.support.JobFinishedHandlerImpl&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;configs&quot;&gt;</span><br><span class="line">        &lt;props&gt;</span><br><span class="line">            &lt;!-- 参数 --&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;job.fail.store&quot;&gt;leveldb&lt;&#x2F;prop&gt;</span><br><span class="line">        &lt;&#x2F;props&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Spring 全注解方式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class LTSSpringConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;jobClient&quot;)</span><br><span class="line">    public JobClient getJobClient() throws Exception &#123;</span><br><span class="line">        JobClientFactoryBean factoryBean &#x3D; new JobClientFactoryBean();</span><br><span class="line">        factoryBean.setClusterName(&quot;test_cluster&quot;);</span><br><span class="line">        factoryBean.setRegistryAddress(&quot;zookeeper:&#x2F;&#x2F;127.0.0.1:2181&quot;);</span><br><span class="line">        factoryBean.setNodeGroup(&quot;test_jobClient&quot;);</span><br><span class="line">        factoryBean.setMasterChangeListeners(new MasterChangeListener[]&#123;</span><br><span class="line">                new MasterChangeListenerImpl()</span><br><span class="line">        &#125;);</span><br><span class="line">        Properties configs &#x3D; new Properties();</span><br><span class="line">        configs.setProperty(&quot;job.fail.store&quot;, &quot;leveldb&quot;);</span><br><span class="line">        factoryBean.setConfigs(configs);</span><br><span class="line">        factoryBean.afterPropertiesSet();</span><br><span class="line">        return factoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-TaskTracker-部署使用"><a href="#3-TaskTracker-部署使用" class="headerlink" title="3. TaskTracker(部署使用)"></a>3. TaskTracker(部署使用)</h4><blockquote>
<p>需要引入 lts 的 jar 包有 lts-tasktracker-{version}.jar，lts-core-{version}.jar 及其它第三方依赖 jar。</p>
</blockquote>
<p><strong>定义自己的任务执行类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobRunner</span> <span class="keyword">implements</span> <span class="title">JobRunner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> BizLogger bizLogger = LtsLoggerFactory.getBizLogger();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">run</span><span class="params">(Job job)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// TODO 业务逻辑</span></span><br><span class="line">            <span class="comment">// 会发送到 LTS (JobTracker上)</span></span><br><span class="line">            bizLogger.info(<span class="string">"测试，业务日志啊啊啊啊啊"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(Action.EXECUTE_FAILED, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(Action.EXECUTE_SUCCESS, <span class="string">"执行成功了，哈哈"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>API 方式启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TaskTracker taskTracker = <span class="keyword">new</span> TaskTracker();</span><br><span class="line">taskTracker.setJobRunnerClass(MyJobRunner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">taskTracker.setRegistryAddress(<span class="string">"zookeeper://127.0.0.1:2181"</span>);</span><br><span class="line">taskTracker.setNodeGroup(<span class="string">"test_trade_TaskTracker"</span>);</span><br><span class="line">taskTracker.setClusterName(<span class="string">"test_cluster"</span>);</span><br><span class="line">taskTracker.setWorkThreads(<span class="number">20</span>);</span><br><span class="line">taskTracker.start();</span><br></pre></td></tr></table></figure>

<p><strong>Spring XML 方式启动</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"taskTracker"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.github.ltsopensource.spring.TaskTrackerAnnotationFactoryBean"</span> init-method=<span class="string">"start"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"jobRunnerClass"</span> value=<span class="string">"com.github.ltsopensource.example.support.MyJobRunner"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"bizLoggerLevel"</span> value=<span class="string">"INFO"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"clusterName"</span> value=<span class="string">"test_cluster"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"registryAddress"</span> value=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"nodeGroup"</span> value=<span class="string">"test_trade_TaskTracker"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"workThreads"</span> value=<span class="string">"20"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"masterChangeListeners"</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.github.ltsopensource.example.support.MasterChangeListenerImpl"</span>/&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"configs"</span>&gt;</span><br><span class="line">        &lt;props&gt;</span><br><span class="line">            &lt;prop key="job.fail.store"&gt;leveldb&lt;/prop&gt;</span><br><span class="line">        &lt;/props&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Spring 注解方式启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LTSSpringConfig</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"taskTracker"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskTracker <span class="title">getTaskTracker</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TaskTrackerAnnotationFactoryBean factoryBean = <span class="keyword">new</span> TaskTrackerAnnotationFactoryBean();</span><br><span class="line">        factoryBean.setApplicationContext(applicationContext);</span><br><span class="line">        factoryBean.setClusterName(<span class="string">"test_cluster"</span>);</span><br><span class="line">        factoryBean.setJobRunnerClass(MyJobRunner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        factoryBean.setNodeGroup(<span class="string">"test_trade_TaskTracker"</span>);</span><br><span class="line">        factoryBean.setBizLoggerLevel(<span class="string">"INFO"</span>);</span><br><span class="line">        factoryBean.setRegistryAddress(<span class="string">"zookeeper://127.0.0.1:2181"</span>);</span><br><span class="line">        factoryBean.setMasterChangeListeners(<span class="keyword">new</span> MasterChangeListener[]&#123;</span><br><span class="line">                <span class="keyword">new</span> MasterChangeListenerImpl()</span><br><span class="line">        &#125;);</span><br><span class="line">        factoryBean.setWorkThreads(<span class="number">20</span>);</span><br><span class="line">        Properties configs = <span class="keyword">new</span> Properties();</span><br><span class="line">        configs.setProperty(<span class="string">"job.fail.store"</span>, <span class="string">"leveldb"</span>);</span><br><span class="line">        factoryBean.setConfigs(configs);</span><br><span class="line"></span><br><span class="line">        factoryBean.afterPropertiesSet();</span><br><span class="line"><span class="comment">//        factoryBean.start();</span></span><br><span class="line">        <span class="keyword">return</span> factoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="包引入说明"><a href="#包引入说明" class="headerlink" title="包引入说明"></a>包引入说明</h2><h3 id="1-JobTracker-JobClient-TaskTracker-都需要引入的包"><a href="#1-JobTracker-JobClient-TaskTracker-都需要引入的包" class="headerlink" title="1. JobTracker,JobClient,TaskTracker 都需要引入的包"></a>1. JobTracker,JobClient,TaskTracker 都需要引入的包</h3><h5 id="1-1-lts-core"><a href="#1-1-lts-core" class="headerlink" title="1.1 lts-core"></a>1.1 lts-core</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ltsopensource<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lts-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lts版本号&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-zk-客户端包"><a href="#1-2-zk-客户端包" class="headerlink" title="1.2 zk 客户端包"></a>1.2 zk 客户端包</h5><blockquote>
<p>二选一, 通过 addConfig(“zk.client”, “可选值: curator, zkclient, lts”) 设置, 如果用 lts,可以不用引入包</p>
</blockquote>
<p>zkclient</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.sgroschupf&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zkclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>curator</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>zookeeper 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;zk.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.jboss.netty&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;netty&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">    &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-通讯包"><a href="#1-3-通讯包" class="headerlink" title="1.3 通讯包"></a>1.3 通讯包</h5><blockquote>
<p>netty 或者 mina, 二选一, 通过 addConfig(“lts.remoting”, “可选值: netty, mina”) 设置</p>
</blockquote>
<p>netty</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.netty&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;netty-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.20.Final&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>mina</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.mina&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mina-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.9&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="1-4-json-包"><a href="#1-4-json-包" class="headerlink" title="1.4 json 包"></a>1.4 json 包</h5><blockquote>
<p>fastjson 或者 jackson, 二选一, 通过 addConfig(“lts.json”, “可选值: fastjson, jackson”) 设置</p>
</blockquote>
<p>fastjson</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.7&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>jackson</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.3&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.3&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="1-5-日志包"><a href="#1-5-日志包" class="headerlink" title="1.5 日志包"></a>1.5 日志包</h5><blockquote>
<p>可以选用 slf4j, jcl, log4j, 或者使用 jdk 原生 logger<br>LoggerFactory.setLoggerAdapter(“可选值: slf4j, jcl, log4j, jdk”), 不手动设置, 默认按这个顺序加载</p>
</blockquote>
<p>log4j</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.16&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>slf4j</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.7.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>jcl</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-logging-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h5><blockquote>
<p>如果需要 spring 的话,需要引入 lts-spring 及 spring 的相关包</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ltsopensource&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lts-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;lts版本号&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-对于-JobTracker-端"><a href="#2-对于-JobTracker-端" class="headerlink" title="2. 对于 JobTracker 端"></a>2. 对于 JobTracker 端</h3><h5 id="2-1-必须引入的包"><a href="#2-1-必须引入的包" class="headerlink" title="2.1 必须引入的包:"></a>2.1 必须引入的包:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ltsopensource&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lts-jobtracker&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;lts版本号&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-除了基础包之外还需要引入任务队列的包-可以是-mongo-或者-mysql"><a href="#2-2-除了基础包之外还需要引入任务队列的包-可以是-mongo-或者-mysql" class="headerlink" title="2.2 除了基础包之外还需要引入任务队列的包(可以是 mongo 或者 mysql)"></a>2.2 除了基础包之外还需要引入任务队列的包(可以是 mongo 或者 mysql)</h5><p>mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.26&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.14&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>mongo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mongodb.morphia&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;morphia&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-rc1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mongodb&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mongo-java-driver&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-JobClient-需要引入的包"><a href="#3-JobClient-需要引入的包" class="headerlink" title="3. JobClient 需要引入的包"></a>3. JobClient 需要引入的包</h3><h5 id="必须引入的包"><a href="#必须引入的包" class="headerlink" title="必须引入的包"></a>必须引入的包</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ltsopensource&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lts-jobclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;project.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="FailStore-存储包-四选一"><a href="#FailStore-存储包-四选一" class="headerlink" title="FailStore 存储包(四选一)"></a>FailStore 存储包(四选一)</h4><blockquote>
<p>通过 jobClient.addConfig(“job.fail.store”, “可选值: leveldb, mapdb, berkeleydb, rocksdb”) 设置</p>
</blockquote>
<p>mapdb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mapdb&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mapdb&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0-beta10&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>leveldb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.fusesource.leveldbjni&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;leveldbjni-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.7&lt;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>berkeleydb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.sleepycat&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;je&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.0.73&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>rocksdb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.rocksdb&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;rocksdbjni&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.10.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-TaskTracker-需要引入的包"><a href="#3-TaskTracker-需要引入的包" class="headerlink" title="3. TaskTracker 需要引入的包"></a>3. TaskTracker 需要引入的包</h3><h5 id="必须引入的包-1"><a href="#必须引入的包-1" class="headerlink" title="必须引入的包"></a>必须引入的包</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ltsopensource&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lts-tasktracker&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;project.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="FailStore-存储包-四选一-1"><a href="#FailStore-存储包-四选一-1" class="headerlink" title="FailStore 存储包(四选一)"></a>FailStore 存储包(四选一)</h5><blockquote>
<p>通过 taskTracker.addConfig(“job.fail.store”, “可选值: leveldb, mapdb, berkeleydb, rocksdb”) 设置</p>
</blockquote>
<p>mapdb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mapdb&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mapdb&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0-beta10&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>leveldb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.fusesource.leveldbjni&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;leveldbjni-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.7&lt;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>berkeleydb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.sleepycat&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;je&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.0.73&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>rocksdb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.rocksdb&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;rocksdbjni&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.10.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>lts</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 使用 命令</title>
    <url>//2016/05/09/git.html</url>
    <content><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><!--
create time: 2016-05-09 11:45:44
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="Git-简介"><a href="#Git-简介" class="headerlink" title="Git 简介"></a>Git 简介</h2><p>原文链接<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git 教程</a></p>
<p>Git 是什么？</p>
<p>Git 是目前世界上最先进的分布式版本控制系统（没有之一）。</p>
<p>Git 有什么特点？简单来说就是：高端大气上档次！</p>
<p>那什么是版本控制系统？</p>
<p>如果你用 Microsoft Word 写过长篇大论，那你一定有这样的经历：</p>
<p>想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的 Word 文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的 Word 文档变成了这样：</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/1.jpg" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/1.jpg"></p>
<p>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。</p>
<p>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。</p>
<p>更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件 Copy 到 U 盘里给她（也可能通过 Email 发送一份给她），然后，你继续修改 Word 文件。一天后，同事再把 Word 文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。</p>
<p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p>
<p>这个软件用起来就应该像这个样子，能记录每次文件的改动：</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>用户</th>
<th>说明</th>
<th>日期</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>删除了软件服务条款 5</td>
<td>7/12 10:38</td>
</tr>
<tr>
<td>2</td>
<td>张三</td>
<td>增加了 License 人数限制</td>
<td>7/12 18:09</td>
</tr>
<tr>
<td>3</td>
<td>李四</td>
<td>财务部门调整了合同金额</td>
<td>7/13 9:51</td>
</tr>
<tr>
<td>4</td>
<td>张三</td>
<td>延长了免费升级周期</td>
<td>7/14 15:17</td>
</tr>
</tbody></table>
<p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的 20 世纪。</p>
<h3 id="Git-的诞生"><a href="#Git-的诞生" class="headerlink" title="Git 的诞生"></a>Git 的诞生</h3><p>很多人都知道，Linus 在 1991 年创建了开源的 Linux，从此，Linux 系统不断发展，已经成为最大的服务器系统软件了。</p>
<p>Linus 虽然创建了 Linux，但 Linux 的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为 Linux 编写代码，那 Linux 的代码是如何管理的呢？</p>
<p>事实是，在 2002 年以前，世界各地的志愿者把源代码文件通过 diff 的方式发给 Linus，然后由 Linus 本人通过手工方式合并代码！</p>
<p>你也许会想，为什么 Linus 不把 Linux 代码放到版本控制系统里呢？不是有 CVS、SVN 这些免费的版本控制系统吗？因为 Linus 坚定地反对 CVS 和 SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比 CVS、SVN 好用，但那是付费的，和 Linux 的开源精神不符。</p>
<p>不过，到了 2002 年，Linux 系统已经发展了十年了，代码库之大让 Linus 很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是 Linus 选择了一个商业的版本控制系统 BitKeeper，BitKeeper 的东家 BitMover 公司出于人道主义精神，授权 Linux 社区免费使用这个版本控制系统。</p>
<p>安定团结的大好局面在 2005 年就被打破了，原因是 Linux 社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发 Samba 的 Andrew 试图破解 BitKeeper 的协议（这么干的其实也不只他一个），被 BitMover 公司发现了（监控工作做得不错！），于是 BitMover 公司怒了，要收回 Linux 社区的免费使用权。</p>
<p>Linus 可以向 BitMover 公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>
<p>Linus 花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git！一个月之内，Linux 系统的源码已经由 Git 管理了！牛是怎么定义的呢？大家可以体会一下。</p>
<p>Git 迅速成为最流行的分布式版本控制系统，尤其是 2008 年，GitHub 网站上线了，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub，包括 jQuery，PHP，Ruby 等等。</p>
<p>历史就是这么偶然，如果不是当年 BitMover 公司威胁 Linux 社区，可能现在我们就没有免费而超级好用的 Git 了。</p>
<h3 id="集中式-vs-分布式"><a href="#集中式-vs-分布式" class="headerlink" title="集中式 vs 分布式"></a>集中式 vs 分布式</h3><p>Linus 一直痛恨的 CVS 及 SVN 都是集中式的版本控制系统，而 Git 是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p>
<p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/2.jpg" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/2.jpg"></p>
<p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个 10M 的文件就需要 5 分钟，这还不得把人给憋死啊。</p>
<p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件 A，你的同事也在他的电脑上改了文件 A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p>
<p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/3.jpg" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/3.jpg"></p>
<p>当然，Git 的优势不单是不必联网这么简单，后面我们还会看到 Git 极其强大的分支管理，把 SVN 等远远抛在了后面。</p>
<p>CVS 作为最早的开源而且免费的集中式版本控制系统，直到现在还有不少人在用。由于 CVS 自身设计的问题，会造成提交文件不完整，版本库莫名其妙损坏的情况。同样是开源而且免费的 SVN 修正了 CVS 的一些稳定性问题，是目前用得最多的集中式版本库控制系统。</p>
<p>除了免费的外，还有收费的集中式版本控制系统，比如 IBM 的 ClearCase（以前是 Rational 公司的，被 IBM 收购了），特点是安装比 Windows 还大，运行比蜗牛还慢，能用 ClearCase 的一般是世界 500 强，他们有个共同的特点是财大气粗，或者人傻钱多。</p>
<p>微软自己也有一个集中式版本控制系统叫 VSS，集成在 Visual Studio 中。由于其反人类的设计，连微软自己都不好意思用了。</p>
<p>分布式版本控制系统除了 Git 以及促使 Git 诞生的 BitKeeper 外，还有类似 Git 的 Mercurial 和 Bazaar 等。这些分布式版本控制系统各有特点，但最快、最简单也最流行的依然是 Git！</p>
<h2 id="工作区和暂存区-非常重要"><a href="#工作区和暂存区-非常重要" class="headerlink" title="工作区和暂存区(非常重要)"></a>工作区和暂存区(非常重要)</h2><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000</a></p>
<p>Git 和其他版本控制系统如 SVN 的一个不同之处就是有暂存区的概念。</p>
<p>先来看名词解释。</p>
<p><strong>工作区（Working Directory）</strong></p>
<p>就是你在电脑里能看到的目录，比如我的<code>learngit</code>文件夹就是一个工作区：</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/4.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/4.png)"></p>
<p><strong>版本库（Repository）</strong></p>
<p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是 Git 的版本库。</p>
<p>Git 的版本库里存了很多东西，其中最重要的就是称为 stage（或者叫 index）的暂存区，还有 Git 为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/5.jpg" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/5.jpg"></p>
<p>分支和<code>HEAD</code>的概念我们以后再讲。</p>
<p>前面讲了我们把文件往 Git 版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p>因为我们创建 Git 版本库时，Git 自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p>
<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<p>俗话说，实践出真知。现在，我们再练习一遍，先对<code>readme.txt</code>做个修改，比如加上一行内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br></pre></td></tr></table></figure>

<p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p>
<p>先用<code>git status</code>查看一下状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes not staged for commit:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">#</span><br><span class="line">#       modified:   readme.txt</span><br><span class="line">#</span><br><span class="line"># Untracked files:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">#</span><br><span class="line">#       LICENSE</span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<p>Git 非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p>
<p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">#</span><br><span class="line">#       new file:   LICENSE</span><br><span class="line">#       modified:   readme.txt</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<p>现在，暂存区的状态就变成这样了：</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/6.jpg" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/6.jpg"></p>
<p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;understand how stage works&quot;</span><br><span class="line">[master 27c9860] understand how stage works</span><br><span class="line"> 2 files changed, 675 insertions(+)</span><br><span class="line"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure>

<p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure>

<p>现在版本库变成了这样，暂存区就没有任何内容了：</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/7.jpg" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/7.jpg"></p>
<h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p><a href="https://stackoverflow.com/questions/2304087/what-is-head-in-git">https://stackoverflow.com/questions/2304087/what-is-head-in-git</a></p>
<p>你可以认为 HEAD(大写)是”current branch”(当下的分支)。当你用 git checkout 切换分支的时候，HEAD 修订版本重新指向新的分支。有的时候 HEAD 会指向一个没有分支名字的修订版本，这种情况叫”<a href="https://git-scm.com/docs/git-checkout#_detached_head">detached HEAD</a>“</p>
<p>head(小写)是 commit 对象的引用，每个 head 都有一个名字（分支名字或者标签名字等等），但是默认情况下，每个叫 master 的 repository 都会有一个 head, 一个 repository 可以包含任意数量的 head。在任何时候，只要这个 head 被选择成为”current head“，那么这个 head 就成了 HEAD,总是大写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat .git&#x2F;HEAD</span><br><span class="line">ref: refs&#x2F;heads&#x2F;master</span><br></pre></td></tr></table></figure>

<p>在版本回退里，你已经知道，每次提交，Git 都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在 Git 里，这个分支叫主分支，即 master 分支。HEAD 严格来说不是指向提交，而是指向 master，master 才是指向提交的，所以，HEAD 指向的就是当前分支。</p>
<p>一开始的时候，master 分支是一条线，Git 用 master 指向最新的提交，再用 HEAD 指向 master，就能确定当前分支，以及当前分支的提交点：</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/8.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/8. png)"></p>
<p>当我们创建新的分支，例如 dev 时，Git 新建了一个指针叫 dev，指向 master 相同的提交，再把 HEAD 指向 dev，就表示当前分支在 dev 上：</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/9.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/9. png"></p>
<p>你看，Git 创建一个分支很快，因为除了增加一个 dev 指针，改改 HEAD 的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对 dev 分支了，比如新提交一次后，dev 指针往前移动一步，而 master 指针不变：</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/10.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/10. png"></p>
<p>假如我们在 dev 上的工作完成了，就可以把 dev 合并到 master 上。Git 怎么合并呢？最简单的方法，就是直接把 master 指向 dev 的当前提交，就完成了合并</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/11.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/11.png"></p>
<p>所以 Git 合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除 dev 分支。删除 dev 分支就是把 dev 指针给删掉，删掉后，我们就剩下了一条 master 分支：</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/12.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/12.png"></p>
<p><strong>关于 Git HEAD^与 HEAD~的关系</strong></p>
<p><a href="https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git">https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G   H   I   J</span><br><span class="line"> \ &#x2F;     \ &#x2F;</span><br><span class="line">  D   E   F</span><br><span class="line">   \  |  &#x2F; \</span><br><span class="line">    \ | &#x2F;   |</span><br><span class="line">     \|&#x2F;    |</span><br><span class="line">      B     C</span><br><span class="line">       \   &#x2F;</span><br><span class="line">        \ &#x2F;</span><br><span class="line">         A</span><br><span class="line">A &#x3D;      &#x3D; A^0</span><br><span class="line">B &#x3D; A^   &#x3D; A^1     &#x3D; A~1</span><br><span class="line">C &#x3D; A^2  &#x3D; A^2</span><br><span class="line">D &#x3D; A^^  &#x3D; A^1^1   &#x3D; A~2</span><br><span class="line">E &#x3D; B^2  &#x3D; A^^2</span><br><span class="line">F &#x3D; B^3  &#x3D; A^^3</span><br><span class="line">G &#x3D; A^^^ &#x3D; A^1^1^1 &#x3D; A~3</span><br><span class="line">H &#x3D; D^2  &#x3D; B^^2    &#x3D; A^^^2  &#x3D; A~2^2</span><br><span class="line">I &#x3D; F^   &#x3D; B^3^    &#x3D; A^^3^</span><br><span class="line">J &#x3D; F^2  &#x3D; B^3^2   &#x3D; A^^3^2</span><br></pre></td></tr></table></figure>

<p>G-D-B-A 可以认为是主干，其他都是 merge 进来的其他分支节点。</p>
<h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config</span><br><span class="line">usage: git config [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line">Config file location</span><br><span class="line">    --global              use global config file</span><br><span class="line">    --system              use system config file</span><br><span class="line">    --local               use repository config file</span><br><span class="line">    -f, --file &lt;file&gt;     use given config file</span><br><span class="line">    --blob &lt;blob-id&gt;      read config from given blob object</span><br><span class="line"></span><br><span class="line">Action</span><br><span class="line">    --get                 get value: name [value-regex]</span><br><span class="line">    --get-all             get all values: key [value-regex]</span><br><span class="line">    --get-regexp          get values for regexp: name-regex [value-regex]</span><br><span class="line">    --get-urlmatch        get value specific for the URL: section[.var] URL</span><br><span class="line">    --replace-all         replace all matching variables: name value [value_regex]</span><br><span class="line">    --add                 add a new variable: name value</span><br><span class="line">    --unset               remove a variable: name [value-regex]</span><br><span class="line">    --unset-all           remove all matches: name [value-regex]</span><br><span class="line">    --rename-section      rename section: old-name new-name</span><br><span class="line">    --remove-section      remove a section: name</span><br><span class="line">    -l, --list            list all</span><br><span class="line">    -e, --edit            open an editor</span><br><span class="line">    --get-color           find the color configured: slot [default]</span><br><span class="line">    --get-colorbool       find the color setting: slot [stdout-is-tty]</span><br><span class="line"></span><br><span class="line">Type</span><br><span class="line">    --bool                value is &quot;true&quot; or &quot;false&quot;</span><br><span class="line">    --int                 value is decimal number</span><br><span class="line">    --bool-or-int         value is --bool or --int</span><br><span class="line">    --path                value is a path (file or directory name)</span><br><span class="line"></span><br><span class="line">Other</span><br><span class="line">    -z, --null            terminate values with NUL byte</span><br><span class="line">    --name-only           show variable names only</span><br><span class="line">    --includes            respect include directives on lookup</span><br></pre></td></tr></table></figure>

<p>查看所有配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>

<p>查看仓库级配置(文件默认位置在.git/config）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> -l</span><br></pre></td></tr></table></figure>

<p>查看用户级配置(文件默认在~/.gitconfig)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure>

<p>查看系统级配置(文件默认在”git 所在目录/etc/gitconfig”，本机为/usr/local/homebrew/etc/gitconfig)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --system -l</span><br></pre></td></tr></table></figure>

<p>编辑配置文件(默认编辑仓库级文件)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -e</span><br></pre></td></tr></table></figure>

<p>编辑用户级文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global -e</span><br></pre></td></tr></table></figure>

<p>编辑系统级文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --system -e</span><br></pre></td></tr></table></figure>

<p>设置用户级用户名 邮箱(建议操作)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"duanzhaoqian"</span></span><br><span class="line">git config --global user.email <span class="string">"duanzhaoqian@outlook.com"</span></span><br></pre></td></tr></table></figure>

<p>查看详细帮助文档及 config 文件参数大全</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> config</span><br></pre></td></tr></table></figure>

<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init --help</span><br><span class="line">NAME</span><br><span class="line">       git-init - Create an empty Git repository or reinitialize an existing one</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git init [-q | --quiet] [--bare] [--template&#x3D;&lt;template_directory&gt;]</span><br><span class="line">                 [--separate-git-dir &lt;git dir&gt;]</span><br><span class="line">                 [--shared[&#x3D;&lt;permissions&gt;]] [directory]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line"> This command creates an empty Git repository - basically a .git directory with subdirectories for objects, refs&#x2F;heads, refs&#x2F;tags, and template files. An</span><br><span class="line">       initial HEAD file that references the HEAD of the master branch is also created.</span><br><span class="line"></span><br><span class="line">       If the $GIT_DIR environment variable is set then it specifies a path to use instead of .&#x2F;.git for the base of the repository.</span><br><span class="line"></span><br><span class="line">       If the object storage directory is specified via the $GIT_OBJECT_DIRECTORY environment variable then the sha1 directories are created underneath -</span><br><span class="line">       otherwise the default $GIT_DIR&#x2F;objects directory is used.</span><br><span class="line"></span><br><span class="line">       Running git init in an existing repository is safe. It will not overwrite things that are already there. The primary reason for rerunning git init is to</span><br><span class="line">       pick up newly added templates (or to move the repository to another place if --separate-git-dir is given).</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">       -q, --quiet</span><br><span class="line">           Only print error and warning messages; all other output will be suppressed.</span><br><span class="line"></span><br><span class="line">       --bare</span><br><span class="line">           Create a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.</span><br><span class="line"></span><br><span class="line">       --template&#x3D;&lt;template_directory&gt;</span><br><span class="line">           Specify the directory from which templates will be used. (See the &quot;TEMPLATE DIRECTORY&quot; section below.)</span><br><span class="line"></span><br><span class="line">       --separate-git-dir&#x3D;&lt;git dir&gt;</span><br><span class="line">           Instead of initializing the repository as a directory to either $GIT_DIR or .&#x2F;.git&#x2F;, create a text file there containing the path to the actual</span><br><span class="line">           repository. This file acts as filesystem-agnostic Git symbolic link to the repository.</span><br><span class="line"></span><br><span class="line">           If this is reinitialization, the repository will be moved to the specified path.</span><br><span class="line"></span><br><span class="line">       --shared[&#x3D;(false|true|umask|group|all|world|everybody|0xxx)]</span><br><span class="line">           Specify that the Git repository is to be shared amongst several users. This allows users belonging to the same group to push into that repository.</span><br><span class="line">           When specified, the config variable &quot;core.sharedRepository&quot; is set so that files and directories under $GIT_DIR are created with the requested</span><br><span class="line">           permissions. When not specified, Git will use permissions reported by umask(2).</span><br><span class="line"></span><br><span class="line">           The option can have the following values, defaulting to group if no value is given:</span><br><span class="line"></span><br><span class="line">           umask (or false)</span><br><span class="line">               Use permissions reported by umask(2). The default, when --shared is not specified.</span><br><span class="line"></span><br><span class="line">           group (or true)</span><br><span class="line">               Make the repository group-writable, (and g+sx, since the git group may be not the primary group of all users). This is used to loosen the</span><br><span class="line">               permissions of an otherwise safe umask(2) value. Note that the umask still applies to the other permission bits (e.g. if umask is 0022, using</span><br><span class="line">               group will not remove read privileges from other (non-group) users). See 0xxx for how to exactly specify the repository permissions.</span><br><span class="line"></span><br><span class="line">           all (or world or everybody)</span><br><span class="line">               Same as group, but make the repository readable by all users.</span><br><span class="line"></span><br><span class="line">           0xxx</span><br><span class="line">               0xxx is an octal number and each file will have mode 0xxx.  0xxx will override users&#39; umask(2) value (and not only loosen permissions as group and</span><br><span class="line">               all does).  0640 will create a repository which is group-readable, but not group-writable or accessible to others.  0660 will create a repo that</span><br><span class="line">               is readable and writable to the current user and group, but inaccessible to others.</span><br><span class="line"></span><br><span class="line">       By default, the configuration flag receive.denyNonFastForwards is enabled in shared repositories, so that you cannot force a non fast-forwarding push into</span><br><span class="line">       it.</span><br><span class="line"></span><br><span class="line">       If you provide a directory, the command is run inside it. If this directory does not exist, it will be created.</span><br><span class="line">TEMPLATE DIRECTORY</span><br><span class="line">       The template directory contains files and directories that will be copied to the $GIT_DIR after it is created.</span><br><span class="line"></span><br><span class="line">       The template directory will be one of the following (in order):</span><br><span class="line"></span><br><span class="line">       o   the argument given with the --template option;</span><br><span class="line"></span><br><span class="line">       o   the contents of the $GIT_TEMPLATE_DIR environment variable;</span><br><span class="line"></span><br><span class="line">       o   the init.templateDir configuration variable; or</span><br><span class="line"></span><br><span class="line">       o   the default template directory: &#x2F;usr&#x2F;share&#x2F;git-core&#x2F;templates.</span><br><span class="line"></span><br><span class="line">       The default template directory includes some directory structure, suggested &quot;exclude patterns&quot; (see gitignore(5)), and sample hook files (see</span><br><span class="line">       githooks(5)).</span><br><span class="line"></span><br><span class="line">EXAMPLES</span><br><span class="line">       Start a new Git repository for an existing code base</span><br><span class="line"></span><br><span class="line">               $ cd &#x2F;path&#x2F;to&#x2F;my&#x2F;codebase</span><br><span class="line">               $ git init      (1)</span><br><span class="line">               $ git add .     (2)</span><br><span class="line">               $ git commit    (3)</span><br><span class="line"></span><br><span class="line">           1. Create a &#x2F;path&#x2F;to&#x2F;my&#x2F;codebase&#x2F;.git directory.</span><br><span class="line">           2. Add all existing files to the index.</span><br><span class="line">           3. Record the pristine state as the first commit in the history.</span><br><span class="line"></span><br><span class="line">GIT</span><br><span class="line">       Part of the git(1) suite</span><br><span class="line"></span><br><span class="line">Git 2.6.4                                                                   12&#x2F;08&#x2F;2015                                                                GIT-INIT(1)</span><br></pre></td></tr></table></figure>

<p><strong>bare 参数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init --bare 创建一个无本地分支的库 当需要一个公用的中央仓库时，适合建为bare库</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init abc 创建abc目录并且abc目录下生成.git 文件夹</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init --bare abd （bare 空的） 创建abd目录并且abd目录下无.git文件夹，只有原来.git目录中的文件</span><br></pre></td></tr></table></figure>

<p>使用–bare 创建的仓库执行 git status 等操作出现 fatal: This operation must be run in a work tree</p>
<p>更改默认.git 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GIT_DIR=aa</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GIT_DIR</span></span><br></pre></td></tr></table></figure>

<h2 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h2><p>查看详细文档</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> ignore</span><br></pre></td></tr></table></figure>

<p>三个 ignore 路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$HOME</span>/.config/git/ignore, <span class="variable">$GIT_DIR</span>/info/exclude, .gitignore</span><br></pre></td></tr></table></figure>

<p>.gitignore 提交到 git，大家都使用的 ignore</p>
<p>$HOME/.config/git/ignore 用户级 ignore(所有仓库都忽略)</p>
<p>$GIT_DIR/info/exclude 只有当前仓库忽略（且只有自己使用），因为.git目录往往不提交到git，$GIT_DIR 默认为.git 目录</p>
<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add somefile.txt 添加单个文件</span><br><span class="line"></span><br><span class="line">git add *.txt 添加所有txt文件</span><br><span class="line"></span><br><span class="line">git add *&#x2F;*.txt 子目录的txt文件（不递归）</span><br><span class="line"></span><br><span class="line">git add **&#x2F;*.txt 效果同 *&#x2F;*.txt</span><br><span class="line"></span><br><span class="line">git add . 添加所有文件 不包括空目录</span><br><span class="line"></span><br><span class="line">git add -u 只添加修改的文件 不添加新增的文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">       git-add - Add file contents to the index</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]</span><br><span class="line">                 [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]</span><br><span class="line">                 [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]</span><br><span class="line">                 [--] [&lt;pathspec&gt;...]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds</span><br><span class="line">       the current content of existing paths as a whole, but with some options it can also be used to add content with only part of the changes made to the</span><br><span class="line">       working tree files applied, or remove paths that do not exist in the working tree anymore.</span><br><span class="line"></span><br><span class="line">       The &quot;index&quot; holds a snapshot of the content of the working tree, and it is this snapshot that is taken as the contents of the next commit. Thus after</span><br><span class="line">       making any changes to the working directory, and before running the commit command, you must use the add command to add any new or modified files to the</span><br><span class="line">       index.</span><br><span class="line"></span><br><span class="line">       This command can be performed multiple times before a commit. It only adds the content of the specified file(s) at the time the add command is run; if you</span><br><span class="line">       want subsequent changes included in the next commit, then you must run git add again to add the new content to the index.</span><br><span class="line"></span><br><span class="line">       The git status command can be used to obtain a summary of which files have changes that are staged for the next commit.</span><br><span class="line"></span><br><span class="line">       The git add command will not add ignored files by default. If any ignored files were explicitly specified on the command line, git add will fail with a</span><br><span class="line">       list of ignored files. Ignored files reached by directory recursion or filename globbing performed by Git (quote your globs before the shell) will be</span><br><span class="line">       silently ignored. The git add command can be used to add ignored files with the -f (force) option.</span><br><span class="line"></span><br><span class="line">       Please see git-commit(1) for alternative ways to add content to a commit.</span><br></pre></td></tr></table></figure>

<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &#39;提交信息&#39; 提交变化</span><br><span class="line"></span><br><span class="line">git commit -m &quot;&quot; -a 提交所有变化</span><br><span class="line"></span><br><span class="line">git commit -m &quot;&quot; a.txt 提交单个文件</span><br><span class="line"></span><br><span class="line">git commit -m &quot;&quot; *.txt 提交txt所有文件</span><br><span class="line"></span><br><span class="line">git commit -m &quot;&quot; *&#x2F;*.txt 子目录txt文件（不递归）</span><br><span class="line"></span><br><span class="line">git commit -C head -a --amend 增补提交 产生新提交id，覆盖上次提交，使用head message，提交时间不变化</span><br><span class="line"></span><br><span class="line">git commit --amend 修改上次提交信息 ，不是基于上次提交id做修改，而是产生新的提交id，提交时间不变化</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT-COMMIT(1)                                                               Git Manual                                                              GIT-COMMIT(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-commit - Record changes to the repository</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git commit [-a | --interactive | --patch] [-s] [-v] [-u&lt;mode&gt;] [--amend]</span><br><span class="line">                  [--dry-run] [(-c | -C | --fixup | --squash) &lt;commit&gt;]</span><br><span class="line">                  [-F &lt;file&gt; | -m &lt;msg&gt;] [--reset-author] [--allow-empty]</span><br><span class="line">                  [--allow-empty-message] [--no-verify] [-e] [--author&#x3D;&lt;author&gt;]</span><br><span class="line">                  [--date&#x3D;&lt;date&gt;] [--cleanup&#x3D;&lt;mode&gt;] [--[no-]status]</span><br><span class="line">                  [-i | -o] [-S[&lt;keyid&gt;]] [--] [&lt;file&gt;...]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Stores the current contents of the index in a new commit along with a log message from the user describing the changes.</span><br><span class="line"></span><br><span class="line">       The content to be added can be specified in several ways:</span><br><span class="line"></span><br><span class="line">        1. by using git add to incrementally &quot;add&quot; changes to the index before using the commit command (Note: even modified files must be &quot;added&quot;);</span><br><span class="line"></span><br><span class="line">        2. by using git rm to remove files from the working tree and the index, again before using the commit command;</span><br><span class="line"></span><br><span class="line">        3. by listing files as arguments to the commit command, in which case the commit will ignore changes staged in the index, and instead record the current</span><br><span class="line">           content of the listed files (which must already be known to Git);</span><br><span class="line"></span><br><span class="line">        4. by using the -a switch with the commit command to automatically &quot;add&quot; changes from all known files (i.e. all files that are already listed in the</span><br><span class="line">           index) and to automatically &quot;rm&quot; files in the index that have been removed from the working tree, and then perform the actual commit;</span><br><span class="line"></span><br><span class="line">        5. by using the --interactive or --patch switches with the commit command to decide one by one which files or hunks should be part of the commit, before</span><br><span class="line">           finalizing the operation. See the &quot;Interactive Mode&quot; section of git-add(1) to learn how to operate these modes.</span><br><span class="line"></span><br><span class="line">       The --dry-run option can be used to obtain a summary of what is included by any of the above for the next commit by giving the same set of parameters</span><br><span class="line">       (options and paths).</span><br><span class="line"></span><br><span class="line">       If you make a commit and then find a mistake immediately after that, you can recover from it with git reset.</span><br></pre></td></tr></table></figure>

<h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><p>git mv 重命名文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相当于</span><br><span class="line">mv 3.txt 4.txt</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT-MV(1)                                                                   Git Manual                                                                  GIT-MV(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-mv - Move or rename a file, a directory, or a symlink</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git mv &lt;options&gt;... &lt;args&gt;...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Move or rename a file, directory or symlink.</span><br><span class="line"></span><br><span class="line">           git mv [-v] [-f] [-n] [-k] &lt;source&gt; &lt;destination&gt;</span><br><span class="line">           git mv [-v] [-f] [-n] [-k] &lt;source&gt; ... &lt;destination directory&gt;</span><br><span class="line"></span><br><span class="line">       In the first form, it renames &lt;source&gt;, which must exist and be either a file, symlink or directory, to &lt;destination&gt;. In the second form, the last</span><br><span class="line">       argument has to be an existing directory; the given sources will be moved into this directory.</span><br><span class="line"></span><br><span class="line">       The index is updated after successful completion, but the change must still be committed.</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">       -f, --force</span><br><span class="line">           Force renaming or moving of a file even if the target exists</span><br><span class="line"></span><br><span class="line">       -k</span><br><span class="line">           Skip move or rename actions which would lead to an error condition. An error happens when a source is neither existing nor controlled by Git, or when</span><br><span class="line">           it would overwrite an existing file unless -f is given.</span><br><span class="line"></span><br><span class="line">       -n, --dry-run</span><br><span class="line">           Do nothing; only show what would happen</span><br><span class="line"></span><br><span class="line">       -v, --verbose</span><br><span class="line">           Report the names of files as they are moved.</span><br></pre></td></tr></table></figure>

<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>git rm 删除文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相当于</span><br><span class="line">rm</span><br><span class="line">git add .</span><br><span class="line">一起操作</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT-RM(1)                                                                   Git Manual                                                                  GIT-RM(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-rm - Remove files from the working tree and from the index</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--] &lt;file&gt;...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Remove files from the index, or from the working tree and the index. git rm will not remove a file from just your working directory. (There is no option</span><br><span class="line">       to remove a file only from the working tree and yet keep it in the index; use &#x2F;bin&#x2F;rm if you want to do that.) The files being removed have to be</span><br><span class="line">       identical to the tip of the branch, and no updates to their contents can be staged in the index, though that default behavior can be overridden with the</span><br><span class="line">       -f option. When --cached is given, the staged content has to match either the tip of the branch or the file on disk, allowing the file to be removed from</span><br><span class="line">       just the index.</span><br></pre></td></tr></table></figure>

<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>git checkout 两个功能</p>
<ol>
<li><p>撤消工作区的修改（不在暂存区的文件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- 1.txt 撤消指定文件修改</span><br><span class="line">git checkout head 1.txt 撤消指定文件修改</span><br><span class="line">git checkout 1.txt 撤消指定文件修改</span><br><span class="line">git checkout [head] *.txt 撤消所有txt文件修改</span><br><span class="line">git checkout [head] . 撤消所有文件修改</span><br></pre></td></tr></table></figure>
</li>
<li><p>分支操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout &lt;name&gt;	切换分支</span><br><span class="line">git checkout &lt;tagName&gt; 检出标签</span><br><span class="line">git checkout -b &lt;name&gt;	创建+切换分支</span><br><span class="line">git checkout -b &lt;branchName&gt; &lt;tagName&gt; 由标签创建分支</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>反转提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git revert --no-commit head 反转提交但不提交，相当于最近一次提交的反操作（文件处于暂存区中）</span><br><span class="line">git revert --abort 终止revert（终止暂存区中的revert）</span><br><span class="line">git revert --continue 继续revert提交（继续暂存区中的revert）</span><br><span class="line"></span><br><span class="line">git revert head 直接反转并提交</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT-REVERT(1)                                                               Git Manual                                                              GIT-REVERT(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-revert - Revert some existing commits</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git revert [--[no-]edit] [-n] [-m parent-number] [-s] [-S[&lt;keyid&gt;]] &lt;commit&gt;...</span><br><span class="line">       git revert --continue</span><br><span class="line">       git revert --quit</span><br><span class="line">       git revert --abort</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Given one or more existing commits, revert the changes that the related patches introduce, and record some new commits that record them. This requires</span><br><span class="line">       your working tree to be clean (no modifications from the HEAD commit).</span><br><span class="line"></span><br><span class="line">       Note: git revert is used to record some new commits to reverse the effect of some earlier commits (often only a faulty one). If you want to throw away all</span><br><span class="line">       uncommitted changes in your working directory, you should see git-reset(1), particularly the --hard option. If you want to extract specific files as they</span><br><span class="line">       were in another commit, you should see git-checkout(1), specifically the git checkout &lt;commit&gt; -- &lt;filename&gt; syntax. Take care with these alternatives as</span><br><span class="line">       both will discard uncommitted changes in your working directory.</span><br></pre></td></tr></table></figure>

<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset head &lt;fileName&gt; 取消暂存区中的文件,保留本地已经存在的文件修改</span><br><span class="line">git reset --hard &lt;id&gt; 重置到指定提交id （不会在版本库留下痕迹）注意 会完全丢失当前分支变更的文件</span><br><span class="line">git reset --hard head^ 重置到上一版本 （不建议使用）</span><br><span class="line">git reset --hard head^^  重置到上一上一版本</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT-RESET(1)                                                                Git Manual                                                               GIT-RESET(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-reset - Reset current HEAD to the specified state</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git reset [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;...</span><br><span class="line">       git reset (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;...]</span><br><span class="line">       git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       In the first and second form, copy entries from &lt;tree-ish&gt; to the index. In the third form, set the current branch head (HEAD) to &lt;commit&gt;, optionally</span><br><span class="line">       modifying index and working tree to match. The &lt;tree-ish&gt;&#x2F;&lt;commit&gt; defaults to HEAD in all forms.</span><br><span class="line"></span><br><span class="line">       git reset [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;...</span><br><span class="line">           This form resets the index entries for all &lt;paths&gt; to their state at &lt;tree-ish&gt;. (It does not affect the working tree or the current branch.)</span><br><span class="line"></span><br><span class="line">           This means that git reset &lt;paths&gt; is the opposite of git add &lt;paths&gt;.</span><br><span class="line"></span><br><span class="line">           After running git reset &lt;paths&gt; to update the index entry, you can use git-checkout(1) to check the contents out of the index to the working tree.</span><br><span class="line">           Alternatively, using git-checkout(1) and specifying a commit, you can copy the contents of a path out of a commit to the index and to the working tree</span><br><span class="line">           in one go.</span><br><span class="line"></span><br><span class="line">       git reset (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;...]</span><br><span class="line">           Interactively select hunks in the difference between the index and &lt;tree-ish&gt; (defaults to HEAD). The chosen hunks are applied in reverse to the</span><br><span class="line">           index.</span><br><span class="line"></span><br><span class="line">           This means that git reset -p is the opposite of git add -p, i.e. you can use it to selectively reset hunks. See the &quot;Interactive Mode&quot; section of git-</span><br><span class="line">           add(1) to learn how to operate the --patch mode.</span><br><span class="line"></span><br><span class="line">       git reset [&lt;mode&gt;] [&lt;commit&gt;]</span><br><span class="line">           This form resets the current branch head to &lt;commit&gt; and possibly updates the index (resetting it to the tree of &lt;commit&gt;) and the working tree</span><br><span class="line">           depending on &lt;mode&gt;. If &lt;mode&gt; is omitted, defaults to &quot;--mixed&quot;. The &lt;mode&gt; must be one of the following:</span><br><span class="line"></span><br><span class="line">           --soft</span><br><span class="line">               Does not touch the index file or the working tree at all (but resets the head to &lt;commit&gt;, just like all modes do). This leaves all your changed</span><br><span class="line">               files &quot;Changes to be committed&quot;, as git status would put it.</span><br><span class="line"></span><br><span class="line">           --mixed</span><br><span class="line">               Resets the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated.</span><br><span class="line">               This is the default action.</span><br><span class="line"></span><br><span class="line">               If -N is specified, removed paths are marked as intent-to-add (see git-add(1)).</span><br><span class="line"></span><br><span class="line">           --hard</span><br><span class="line">               Resets the index and working tree. Any changes to tracked files in the working tree since &lt;commit&gt; are discarded.</span><br><span class="line"></span><br><span class="line">           --merge</span><br><span class="line">               Resets the index and updates the files in the working tree that are different between &lt;commit&gt; and HEAD, but keeps those which are different</span><br><span class="line">               between the index and working tree (i.e. which have changes which have not been added). If a file that is different between &lt;commit&gt; and the index</span><br><span class="line">               has unstaged changes, reset is aborted.</span><br><span class="line"></span><br><span class="line">               In other words, --merge does something like a git read-tree -u -m &lt;commit&gt;, but carries forward unmerged index entries.</span><br><span class="line"></span><br><span class="line">           --keep</span><br><span class="line">               Resets index entries and updates files in the working tree that are different between &lt;commit&gt; and HEAD. If a file that is different between</span><br><span class="line">               &lt;commit&gt; and HEAD has local changes, reset is aborted.</span><br><span class="line"></span><br><span class="line">       If you want to undo a commit other than the latest on a branch, git-revert(1) is your friend.</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">       -q, --quiet</span><br><span class="line">           Be quiet, only report errors.</span><br></pre></td></tr></table></figure>

<h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch 列出本地分支</span><br><span class="line">git branch -a 列出所有分支</span><br><span class="line">git branch -r 列出远程分支</span><br><span class="line">git branch &lt;branchName&gt; 基于当前分支的末支(HEAD ?)创建新分支</span><br><span class="line">git branch &lt;branchName&gt; &lt;commitId|tagId|branchName&gt; 基本其次提交|标签|分支创建分支</span><br><span class="line">git branch -m &lt;branchName&gt; &lt;newName&gt; 重命名分支 不会覆盖已存在的同名分支</span><br><span class="line">git branch -M &lt;branchName&gt; &lt;newName&gt; 会覆盖已存在的同名分支</span><br><span class="line">git branch -d &lt;branchName&gt; 如果分支没有合并会删除失败</span><br><span class="line">git branch -D &lt;branchName&gt; 即使没有被合并也能删除</span><br><span class="line">git branch -v 查看每个分支最后提交</span><br><span class="line">git branch -u &lt;remote branchName&gt; &lt;local branchName&gt; 追踪本地分支到远程分支</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -u origin&#x2F;master master</span><br><span class="line">Branch master set up to track remote branch master from origin.</span><br><span class="line"></span><br><span class="line">config file</span><br><span class="line">[remote &quot;origin&quot;] (添加远程仓库多出此节点)</span><br><span class="line">	url &#x3D; git@192.168.88.28:ync&#x2F;pic.git</span><br><span class="line">	fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class="line">[branch &quot;master&quot;] (添加track信息时设置此节点)</span><br><span class="line">	remote &#x3D; origin</span><br><span class="line">	merge &#x3D; refs&#x2F;heads&#x2F;master</span><br></pre></td></tr></table></figure>

<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge &lt;branchName&gt;合并分支(merge tool diffmerge filemerge）</span><br><span class="line">git merge --no-commit</span><br><span class="line">git merge --squash &lt;branchName&gt; 压合合并</span><br><span class="line">git merge --abort 终止合并</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--squash 选项的含义是：本地文件内容与不使用该选项的合并结果相同，但是不提交、不移动HEAD，因此需要一条额外的commit命令。其效果相当于将another分支上的多个commit合并成一个，放在当前分支上，原来的commit历史则没有拿过来。</span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">判断是否使用--squash选项最根本的标准是，待合并分支上的历史是否有意义。</span><br><span class="line"></span><br><span class="line">实测效果 就是将所有文件变更获取到当前分支下 而不获取分支提交信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT-MERGE(1)                                                                Git Manual                                                               GIT-MERGE(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-merge - Join two or more development histories together</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]</span><br><span class="line">               [-s &lt;strategy&gt;] [-X &lt;strategy-option&gt;] [-S[&lt;keyid&gt;]]</span><br><span class="line">               [--[no-]rerere-autoupdate] [-m &lt;msg&gt;] [&lt;commit&gt;...]</span><br><span class="line">       git merge &lt;msg&gt; HEAD &lt;commit&gt;...</span><br><span class="line">       git merge --abort</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Incorporates changes from the named commits (since the time their histories diverged from the current branch) into the current branch. This command is</span><br><span class="line">       used by git pull to incorporate changes from another repository and can be used by hand to merge changes from one branch into another.</span><br><span class="line"></span><br><span class="line">       Assume the following history exists and the current branch is &quot;master&quot;:</span><br><span class="line"></span><br><span class="line">                     A---B---C topic</span><br><span class="line">                    &#x2F;</span><br><span class="line">               D---E---F---G master</span><br><span class="line"></span><br><span class="line">       Then &quot;git merge topic&quot; will replay the changes made on the topic branch since it diverged from master (i.e., E) until its current commit (C) on top of</span><br><span class="line">       master, and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</span><br><span class="line"></span><br><span class="line">                     A---B---C topic</span><br><span class="line">                    &#x2F;         \</span><br><span class="line">               D---E---F---G---H master</span><br><span class="line"></span><br><span class="line">       The second syntax (&lt;msg&gt; HEAD &lt;commit&gt;...) is supported for historical reasons. Do not use it from the command line or in new scripts. It is the same as</span><br><span class="line">       git merge -m &lt;msg&gt; &lt;commit&gt;....</span><br><span class="line"></span><br><span class="line">       The third syntax (&quot;git merge --abort&quot;) can only be run after the merge has resulted in conflicts. git merge --abort will abort the merge process and try</span><br><span class="line">       to reconstruct the pre-merge state. However, if there were uncommitted changes when the merge started (and especially if those changes were further</span><br><span class="line">       modified after the merge was started), git merge --abort will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:</span><br><span class="line"></span><br><span class="line">       Warning: Running git merge with non-trivial uncommitted changes is discouraged: while possible, it may leave you in a state that is hard to back out of in</span><br><span class="line">       the case of a conflict.</span><br></pre></td></tr></table></figure>

<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;commitId&gt; 挑选其次提交合并</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT-CHERRY-PICK(1)                                                          Git Manual                                                         GIT-CHERRY-PICK(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-cherry-pick - Apply the changes introduced by some existing commits</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]</span><br><span class="line">                         [-S[&lt;keyid&gt;]] &lt;commit&gt;...</span><br><span class="line">       git cherry-pick --continue</span><br><span class="line">       git cherry-pick --quit</span><br><span class="line">       git cherry-pick --abort</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Given one or more existing commits, apply the change each one introduces, recording a new commit for each. This requires your working tree to be clean (no</span><br><span class="line">       modifications from the HEAD commit).</span><br><span class="line"></span><br><span class="line">       When it is not obvious how to apply a change, the following happens:</span><br><span class="line"></span><br><span class="line">        1. The current branch and HEAD pointer stay at the last commit successfully made.</span><br><span class="line"></span><br><span class="line">        2. The CHERRY_PICK_HEAD ref is set to point at the commit that introduced the change that is difficult to apply.</span><br><span class="line"></span><br><span class="line">        3. Paths in which the change applied cleanly are updated both in the index file and in your working tree.</span><br><span class="line"></span><br><span class="line">        4. For conflicting paths, the index file records up to three versions, as described in the &quot;TRUE MERGE&quot; section of git-merge(1). The working tree files</span><br><span class="line">           will include a description of the conflict bracketed by the usual conflict markers &lt;&lt;&lt;&lt;&lt;&lt;&lt; and &gt;&gt;&gt;&gt;&gt;&gt;&gt;.</span><br><span class="line"></span><br><span class="line">        5. No other modifications are made.</span><br><span class="line"></span><br><span class="line">       See git-merge(1) for some hints on resolving such conflicts.</span><br></pre></td></tr></table></figure>

<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>将两个分支并为一个分支（不建议使用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT-REBASE(1)                                                               Git Manual                                                              GIT-REBASE(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-rebase - Forward-port local commits to the updated upstream head</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git rebase [-i | --interactive] [options] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;]</span><br><span class="line">               [&lt;upstream&gt; [&lt;branch&gt;]]</span><br><span class="line">       git rebase [-i | --interactive] [options] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;]</span><br><span class="line">               --root [&lt;branch&gt;]</span><br><span class="line">       git rebase --continue | --skip | --abort | --edit-todo</span><br></pre></td></tr></table></figure>

<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag 显示标签列表</span><br><span class="line">git tag 1.0 创建标签，注意标签不能生命令</span><br><span class="line">git tag -d 1.0 删除标签</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIT-TAG(1)                                                                  Git Manual                                                                 GIT-TAG(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-tag - Create, list, delete or verify a tag object signed with GPG</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git tag [-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;]</span><br><span class="line">               &lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;]</span><br><span class="line">       git tag -d &lt;tagname&gt;...</span><br><span class="line">       git tag [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;] [--points-at &lt;object&gt;]</span><br><span class="line">               [--column[&#x3D;&lt;options&gt;] | --no-column] [--create-reflog] [&lt;pattern&gt;...]</span><br><span class="line">       git tag -v &lt;tagname&gt;...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Add a tag reference in refs&#x2F;tags&#x2F;, unless -d&#x2F;-l&#x2F;-v is given to delete, list or verify tags.</span><br><span class="line"></span><br><span class="line">       Unless -f is given, the named tag must not yet exist.</span><br><span class="line"></span><br><span class="line">       If one of -a, -s, or -u &lt;keyid&gt; is passed, the command creates a tag object, and requires a tag message. Unless -m &lt;msg&gt; or -F &lt;file&gt; is given, an editor</span><br><span class="line">       is started for the user to type in the tag message.</span><br><span class="line"></span><br><span class="line">       If -m &lt;msg&gt; or -F &lt;file&gt; is given and -a, -s, and -u &lt;keyid&gt; are absent, -a is implied.</span><br><span class="line"></span><br><span class="line">       Otherwise just a tag reference for the SHA-1 object name of the commit object is created (i.e. a lightweight tag).</span><br><span class="line"></span><br><span class="line">       A GnuPG signed tag object will be created when -s or -u &lt;keyid&gt; is used. When -u &lt;keyid&gt; is not used, the committer identity for the current user is used</span><br><span class="line">       to find the GnuPG key for signing. The configuration variable gpg.program is used to specify custom GnuPG binary.</span><br><span class="line"></span><br><span class="line">       Tag objects (created with -a, -s, or -u) are called &quot;annotated&quot; tags; they contain a creation date, the tagger name and e-mail, a tagging message, and an</span><br><span class="line">       optional GnuPG signature. Whereas a &quot;lightweight&quot; tag is simply a name for an object (usually a commit object).</span><br><span class="line"></span><br><span class="line">       Annotated tags are meant for release while lightweight tags are meant for private or temporary object labels. For this reason, some git commands for</span><br><span class="line">       naming objects (like git describe) will ignore lightweight tags by default.</span><br></pre></td></tr></table></figure>

<h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status 当前状态</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git help status</span><br><span class="line">GIT-STATUS(1)                                                               Git Manual                                                              GIT-STATUS(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-status - Show the working tree status</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git status [&lt;options&gt;...] [--] [&lt;pathspec&gt;...]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Displays paths that have differences between the index file and the current HEAD commit, paths that have differences between the working tree and the</span><br><span class="line">       index file, and paths in the working tree that are not tracked by Git (and are not ignored by gitignore(5)). The first are what you would commit by</span><br><span class="line">       running git commit; the second and third are what you could commit by running git add before running git commit.</span><br></pre></td></tr></table></figure>

<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>穿梭历史，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log 查看历史记录</span><br><span class="line">git log --graph 查看分支合并图</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">commit 5a06716997a4cb904e789d864f87372bd8fd7bb9</span><br><span class="line">Author: duanchaoqian &lt;duanzhaoqian@outlook.com&gt;</span><br><span class="line">Date:   Thu May 12 15:03:57 2016 +0800</span><br><span class="line"></span><br><span class="line">    add 1.txt 2.txt</span><br><span class="line"></span><br><span class="line">commit 3706383b2edadedbc59a758a05d083978bf8ec28</span><br><span class="line">Author: duanchaoqian &lt;duanzhaoqian@outlook.com&gt;</span><br><span class="line">Date:   Tue May 10 14:51:23 2016 +0800</span><br><span class="line"></span><br><span class="line">    c</span><br><span class="line"></span><br><span class="line">commit 1e1c9ddf7db6ca7f9a48841e7511d6768351ae8f</span><br><span class="line">Author: duanchaoqian &lt;duanzhaoqian@outlook.com&gt;</span><br><span class="line">Date:   Tue May 10 14:48:09 2016 +0800</span><br><span class="line"></span><br><span class="line">    b</span><br></pre></td></tr></table></figure>

<h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><p>reset –hard <strong>后悔药</strong></p>
<p>重返未来 <code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog</span><br><span class="line">5a06716 HEAD@&#123;0&#125;: reset: moving to 5a06716</span><br><span class="line">3706383 HEAD@&#123;1&#125;: reset: moving to head^</span><br><span class="line">5a06716 HEAD@&#123;2&#125;: reset: moving to head^</span><br><span class="line">737fef4 HEAD@&#123;3&#125;: reset: moving to head^^</span><br><span class="line">2b7c98d HEAD@&#123;4&#125;: reset: moving to head^</span><br><span class="line">4843adf HEAD@&#123;5&#125;: revert: Revert &quot;Revert &quot;Revert &quot;Revert &quot;add 1.txt 2.txt&quot;&quot;&quot;&quot;</span><br><span class="line">2b7c98d HEAD@&#123;6&#125;: revert: Revert &quot;Revert &quot;Revert &quot;add 1.txt 2.txt&quot;&quot;&quot;</span><br><span class="line">9303932 HEAD@&#123;7&#125;: revert: Revert &quot;Revert &quot;add 1.txt 2.txt&quot;&quot;</span><br><span class="line">737fef4 HEAD@&#123;8&#125;: revert: Revert &quot;add 1.txt 2.txt&quot;</span><br><span class="line">5a06716 HEAD@&#123;9&#125;: commit: add 1.txt 2.txt</span><br><span class="line">3706383 HEAD@&#123;10&#125;: reset: moving to head^^</span><br><span class="line">bb8fd2e HEAD@&#123;11&#125;: reset: moving to head^</span><br><span class="line">02c0481 HEAD@&#123;12&#125;: checkout: moving from b to master</span><br><span class="line">02c0481 HEAD@&#123;13&#125;: checkout: moving from master to b</span><br><span class="line">02c0481 HEAD@&#123;14&#125;: checkout: moving from a to master</span><br><span class="line">02c0481 HEAD@&#123;15&#125;: checkout: moving from master to a</span><br><span class="line">02c0481 HEAD@&#123;16&#125;: commit: 1.txt 2.txt</span><br><span class="line">bb8fd2e HEAD@&#123;17&#125;: reset: moving to bb8fd2ecb9e4b3acde01c60fd20df87738e17123</span><br><span class="line">25c7e08 HEAD@&#123;18&#125;: commit: a1&#x2F;1.txt</span><br><span class="line">bb8fd2e HEAD@&#123;19&#125;: reset: moving to bb8fd2ecb9e4b3acde01c60fd20df87738e17123</span><br><span class="line">0f6de7e HEAD@&#123;20&#125;: commit: **&#x2F;*.txt</span><br><span class="line">33af901 HEAD@&#123;21&#125;: commit: *.txt</span><br><span class="line">882f783 HEAD@&#123;22&#125;: commit: *.txt</span><br><span class="line">bb8fd2e HEAD@&#123;23&#125;: commit (amend): a</span><br><span class="line">58c6c08 HEAD@&#123;24&#125;: commit: a</span><br><span class="line">86c8278 HEAD@&#123;25&#125;: commit: del c</span><br><span class="line">3706383 HEAD@&#123;26&#125;: commit: c</span><br><span class="line">1e1c9dd HEAD@&#123;27&#125;: commit (initial): b</span><br></pre></td></tr></table></figure>

<h2 id="gitk"><a href="#gitk" class="headerlink" title="gitk"></a>gitk</h2><p>显示 form 窗体，非控制台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitk 查看当前分支历史记录</span><br><span class="line">gitk &lt;branchName&gt; 查看某分支记录</span><br><span class="line">gitk --all 查看所有分支记录</span><br></pre></td></tr></table></figure>

<h2 id="git-archive"><a href="#git-archive" class="headerlink" title="git archive"></a>git archive</h2><p>导出版本库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git archive --format&#x3D;tar.gz head&gt;t1.tar.gz （只有文件，没有.git目录）</span><br><span class="line">git archive --format&#x3D;tar.gz --prefix&#x3D;ync&#x2F; head&gt;t1.tar.gz 压缩文件里多一层目录ync</span><br></pre></td></tr></table></figure>

<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &lt;url&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote 查看远程分支</span><br><span class="line">git remote add &lt;别名&gt; &lt;远程仓库url&gt; 添加远程仓库</span><br><span class="line">git remote rm &lt;别名&gt; 删除远程仓库</span><br></pre></td></tr></table></figure>

<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch &lt;远程仓库别名|仓库地址&gt; 获取但不合并</span><br></pre></td></tr></table></figure>

<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull 获取并合并分支</span><br><span class="line">git pull origin  获取并合并分支指定仓库名</span><br><span class="line">git pull &lt;远程仓库&gt; &lt;Local branchName&gt; &lt;remote branchName&gt; 获取并合并远程指定分支</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果当前分支没有追踪track信息执行 git pull</span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to&#x3D;origin&#x2F;&lt;branch&gt; master</span><br></pre></td></tr></table></figure>

<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push &lt;远程库别名&gt; &lt;local branchName&gt;:&lt;remote branchName&gt; 推送到远程仓库，指定分支</span><br><span class="line">git push -v --set-upstream origin refs&#x2F;heads&#x2F;develop:refs&#x2F;heads&#x2F;develop  推送到远程仓库，指定分支，并添加追踪信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">追踪信息配置track</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url &#x3D; git@192.168.88.28:ync&#x2F;pic.git</span><br><span class="line">	fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">	remote &#x3D; origin</span><br><span class="line">	merge &#x3D; refs&#x2F;heads&#x2F;master</span><br><span class="line">[branch &quot;develop&quot;]</span><br><span class="line">	remote &#x3D; origin</span><br><span class="line">	merge &#x3D; refs&#x2F;heads&#x2F;develop</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git help push</span><br><span class="line">GIT-PUSH(1)                                                                 Git Manual                                                                GIT-PUSH(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       git-push - Update remote refs along with associated objects</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack&#x3D;&lt;git-receive-pack&gt;]</span><br><span class="line">                  [--repo&#x3D;&lt;repository&gt;] [-f | --force] [--prune] [-v | --verbose]</span><br><span class="line">                  [-u | --set-upstream]</span><br><span class="line">                  [--[no-]signed|--sign&#x3D;(true|false|if-asked)]</span><br><span class="line">                  [--force-with-lease[&#x3D;&lt;refname&gt;[:&lt;expect&gt;]]]</span><br><span class="line">                  [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;...]]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Updates remote refs using local refs, while sending objects necessary to complete the given refs.</span><br><span class="line"></span><br><span class="line">       You can make interesting things happen to a repository every time you push into it, by setting up hooks there. See documentation for git-receive-pack(1).</span><br><span class="line"></span><br><span class="line">       When the command line does not specify where to push with the &lt;repository&gt; argument, branch.*.remote configuration for the current branch is consulted to</span><br><span class="line">       determine where to push. If the configuration is missing, it defaults to origin.</span><br><span class="line"></span><br><span class="line">       When the command line does not specify what to push with &lt;refspec&gt;... arguments or --all, --mirror, --tags options, the command finds the default</span><br><span class="line">       &lt;refspec&gt; by consulting remote.*.push configuration, and if it is not found, honors push.default configuration to decide what to push (See git-config(1)</span><br><span class="line">       for the meaning of push.default).</span><br></pre></td></tr></table></figure>

<h2 id="git-help"><a href="#git-help" class="headerlink" title="git help"></a>git help</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git help</span><br><span class="line">git help &lt;command&gt; git help push  git help add</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git help</span><br><span class="line">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name&#x3D;value]</span><br><span class="line">           [--exec-path[&#x3D;&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir&#x3D;&lt;path&gt;] [--work-tree&#x3D;&lt;path&gt;] [--namespace&#x3D;&lt;name&gt;]</span><br><span class="line">           &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">These are common Git commands used in various situations:</span><br><span class="line"></span><br><span class="line">start a working area (see also: git help tutorial)</span><br><span class="line">   clone      Clone a repository into a new directory</span><br><span class="line">   init       Create an empty Git repository or reinitialize an existing one</span><br><span class="line"></span><br><span class="line">work on the current change (see also: git help everyday)</span><br><span class="line">   add        Add file contents to the index</span><br><span class="line">   mv         Move or rename a file, a directory, or a symlink</span><br><span class="line">   reset      Reset current HEAD to the specified state</span><br><span class="line">   rm         Remove files from the working tree and from the index</span><br><span class="line"></span><br><span class="line">examine the history and state (see also: git help revisions)</span><br><span class="line">   bisect     Use binary search to find the commit that introduced a bug</span><br><span class="line">   grep       Print lines matching a pattern</span><br><span class="line">   log        Show commit logs</span><br><span class="line">   show       Show various types of objects</span><br><span class="line">   status     Show the working tree status</span><br><span class="line"></span><br><span class="line">grow, mark and tweak your common history</span><br><span class="line">   branch     List, create, or delete branches</span><br><span class="line">   checkout   Switch branches or restore working tree files</span><br><span class="line">   commit     Record changes to the repository</span><br><span class="line">   diff       Show changes between commits, commit and working tree, etc</span><br><span class="line">   merge      Join two or more development histories together</span><br><span class="line">   rebase     Forward-port local commits to the updated upstream head</span><br><span class="line">   tag        Create, list, delete or verify a tag object signed with GPG</span><br><span class="line"></span><br><span class="line">collaborate (see also: git help workflows)</span><br><span class="line">   fetch      Download objects and refs from another repository</span><br><span class="line">   pull       Fetch from and integrate with another repository or a local branch</span><br><span class="line">   push       Update remote refs along with associated objects</span><br><span class="line"></span><br><span class="line">&#39;git help -a&#39; and &#39;git help -g&#39; list available subcommands and some</span><br><span class="line">concept guides. See &#39;git help &lt;command&gt;&#39; or &#39;git help &lt;concept&gt;&#39;</span><br><span class="line">to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>

<h2 id="一张图总结-git"><a href="#一张图总结-git" class="headerlink" title="一张图总结 git"></a>一张图总结 git</h2><p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/git.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/git/git.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop2.7.1编译安装</title>
    <url>//2016/05/07/hadoop%202.7.1.html</url>
    <content><![CDATA[<h1 id="hadoop-2-7-1"><a href="#hadoop-2-7-1" class="headerlink" title="hadoop 2.7.1"></a>hadoop 2.7.1</h1><!--
create time: 2016-05-07 10:00:09
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><h2 id="编译安装-hadoop-2-7-1"><a href="#编译安装-hadoop-2-7-1" class="headerlink" title="编译安装 hadoop 2.7.1"></a>编译安装 hadoop 2.7.1</h2><ol>
<li><p>下载文件<br>jdk-7u80-linux-x64.tar.gz<br>hadoop-2.7.1-src.tar.gz<br>protobuf-2.5.0.tar.gz<br>apache-ant-1.9.6-bin.tar.gz<br>cmake-3.4.2-Linux-x86_64.tar.gz<br>apache-maven-3.3.9-bin.tar.gz<br>findbugs-noUpdateChecks-3.0.1.tar.gz<br><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h0.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h0.png"></p>
</li>
<li><p>yum 安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install  lzo-devel  zlib-devel  gcc autoconf automake libtool glibc-headers gcc-c++ openssl-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译 protobuf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> protobuf-2.5.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压文件，设置环境变量</p>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf *</span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/root/soft/apache-maven-3.3.9</span><br><span class="line"><span class="built_in">export</span> CMAKE_HOME=/root/soft/cmake-3.4.2-Linux-x86_64</span><br><span class="line"><span class="built_in">export</span> FINDBUGS_HOME=/root/soft/findbugs-3.0.1</span><br><span class="line"><span class="built_in">export</span> ANT_HOME=/root/soft/apache-ant-1.9.6</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$CMAKE_HOME</span>/bin:<span class="variable">$FINDBUGS_HOME</span>/	bin:<span class="variable">$ANT_HOME</span>/bin</span><br></pre></td></tr></table></figure></code></pre><p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h1.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h1.png"></p>
</li>
<li><p>使环境变量生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入 hadoop 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hadoop-2.7.1-src</span><br></pre></td></tr></table></figure>
</li>
<li><p>mvn 编译代码（自动下载 maven 依赖，消耗时间过长）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package -DskipTests -Pdist,native,docs -Dtar</span><br></pre></td></tr></table></figure>

<p><strong><em>注意：编译完成需要消耗 6.5G 硬盘</em></strong><br><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h2.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h2.png"></p>
</li>
</ol>
<h2 id="启动-Hadoop"><a href="#启动-Hadoop" class="headerlink" title="启动 Hadoop"></a>启动 Hadoop</h2><p>方案：<br>准备 hd201 hd202 hd205 hd206 hd207 hd208 hd209 hd210 8 台机器<br>分别配置各自 hostname，hosts 文件<br>配置 ssh 免密码登录<br>hd201 hd202 运行 NameNode ResourceManager<br>hd205 hd206 hd207 运行 DataNode NodeManager<br>hd208 hd209 hd210 运行 zookeeper JournalNode</p>
<h3 id="ssh-免密码登录"><a href="#ssh-免密码登录" class="headerlink" title="ssh 免密码登录"></a>ssh 免密码登录</h3><p>生成公私钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h3.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h3.png"></p>
<p>默认使用 rsa，可以加参数 -t dsa</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h4.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h4.png"><br>复制 id_rsa.pub 里的内容到 ~/.ssh/authorized_keys</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>修改 authorized_keys 权限为 644</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 644 authorized_keys</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h5.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h5.png"><br>复制斜公钥到其它机器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i hd202</span><br><span class="line">ssh-copy-id -i hd205</span><br><span class="line">ssh-copy-id -i hd206</span><br><span class="line">ssh-copy-id -i hd207</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="配置各机器-hostname"><a href="#配置各机器-hostname" class="headerlink" title="配置各机器 hostname"></a>配置各机器 hostname</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h6.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h6.png"></p>
<h3 id="配置-etc-hosts"><a href="#配置-etc-hosts" class="headerlink" title="配置/etc/hosts"></a>配置/etc/hosts</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.1.201 hd201</span><br><span class="line">192.168.1.202 hd202</span><br><span class="line">192.168.1.203 hd203</span><br><span class="line">192.168.1.204 hd204</span><br><span class="line">192.168.1.205 hd205</span><br><span class="line">192.168.1.206 hd206</span><br><span class="line">192.168.1.207 hd207</span><br><span class="line">192.168.1.208 hd208</span><br><span class="line">192.168.1.209 hd209</span><br><span class="line">192.168.1.210 hd210</span><br></pre></td></tr></table></figure>

<h3 id="配置-hadoop-env-sh"><a href="#配置-hadoop-env-sh" class="headerlink" title="配置 hadoop-env.sh"></a>配置 hadoop-env.sh</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h7.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h7.png"></p>
<h3 id="配置-core-site-xml"><a href="#配置-core-site-xml" class="headerlink" title="配置 core-site.xml"></a>配置 core-site.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>hd210:2181,hd209:2181,hd208:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h8.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h8.png"></p>
<h3 id="配置-hdfs-site-xml"><a href="#配置-hdfs-site-xml" class="headerlink" title="配置 hdfs-site.xml"></a>配置 hdfs-site.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定hdfs的nameservice为mycluster，需要和core-site.xml中的保持一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mycluster下面有两个NameNode，分别是nn1，nn2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn1的RPC通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hd201:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn2的RPC通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hd202:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn1的http通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hd201:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hd202:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hd210:8485;hd209:8485;hd208:8485/mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置隔离机制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用隔离机制时需要ssh免登陆，注意id_rsa位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoop/journal/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启NameNode失败自动切换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>取消文件权限控制(在 hdfs-site.xml 中添加)，可以不加，使用-DHADOOP_USER_NAME=root 启动应用程序</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">       If "true", enable permission checking in HDFS.</span><br><span class="line">       If "false", permission checking is turned off,</span><br><span class="line">       but all other behavior is unchanged.</span><br><span class="line">       Switching from one parameter value to the other does not change the mode,</span><br><span class="line">       owner or group of files or directories.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-datanode-的配置文件-slaves"><a href="#配置-datanode-的配置文件-slaves" class="headerlink" title="配置 datanode 的配置文件 slaves"></a>配置 datanode 的配置文件 slaves</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim slaves</span><br><span class="line">hd205</span><br><span class="line">hd206</span><br><span class="line">hd207</span><br></pre></td></tr></table></figure>

<h3 id="配置-mapreduce-文件-mapred-site-xml"><a href="#配置-mapreduce-文件-mapred-site-xml" class="headerlink" title="配置 mapreduce 文件 mapred-site.xml"></a>配置 mapreduce 文件 mapred-site.xml</h3><p>默认是没有 mapred-site.xml 文件的，里面有一个 mapred-site.xml.example,重命名为 mapred-site.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv mapred-site.xml.example mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>配置内容如下，这里就是指明 mapreduce 是用在 YARN 之上来执行的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Execution framework set to Hadoop YARN.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h9.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h9.png"></p>
<h3 id="配置-yarn-site-xml"><a href="#配置-yarn-site-xml" class="headerlink" title="配置 yarn-site.xml"></a>配置 yarn-site.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启RM高可用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定RM的cluster id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>duanzq<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定RM的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分别指定RM的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>hd201<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>hd202<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定zk集群地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>hd210:2181,hd209:2181,hd208:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h10.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h10.png"></p>
<h3 id="将-hadoop-复制到其它节点"><a href="#将-hadoop-复制到其它节点" class="headerlink" title="将 hadoop 复制到其它节点"></a>将 hadoop 复制到其它节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /hadoop hd202:/</span><br><span class="line">scp -r /hadoop hd203:/</span><br><span class="line">scp -r /hadoop hd206:/</span><br><span class="line">scp -r /hadoop hd207:/</span><br><span class="line">scp -r /hadoop hd208:/</span><br><span class="line">scp -r /hadoop hd209:/</span><br><span class="line">scp -r /hadoop hd210:/</span><br></pre></td></tr></table></figure>

<h3 id="启动-zookeeper"><a href="#启动-zookeeper" class="headerlink" title="启动 zookeeper"></a>启动 zookeeper</h3><p>启动 hd208，hd209，hd210 三台机器上的 zookeeper</p>
<h3 id="在-hd201-上启动-journalnode"><a href="#在-hd201-上启动-journalnode" class="headerlink" title="在 hd201 上启动 journalnode"></a>在 hd201 上启动 journalnode</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbin/hadoop-daemons.sh start journalnode</span><br></pre></td></tr></table></figure>

<p>在 hd208，hd209，hd210 上会启动 journalnode 节点<br><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h11.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h11.png"><br>QuorumPeerMain 是 zookeeper</p>
<h3 id="在-hd201-上格式化-hadoop"><a href="#在-hd201-上格式化-hadoop" class="headerlink" title="在 hd201 上格式化 hadoop"></a>在 hd201 上格式化 hadoop</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure>

<p>格式化后会在根据 core-site.xml 中的 hadoop.tmp.dir 配置生成个文件，在 hd201 中会出现一个 tmp 文件夹，/hadoop/tmp，现在规划的是 hadoop01 和 hadoop02 是 NameNode，然后将/soft/hadoop-2.7.1/tmp 拷贝到 hadoop02:/soft/hadoop-2.7.1/下，这样 hd202 就不用格式化了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /hadoop/tmp hd202: /hadoop/</span><br></pre></td></tr></table></figure>

<h3 id="在-hd201-上格式化-ZK"><a href="#在-hd201-上格式化-ZK" class="headerlink" title="在 hd201 上格式化 ZK"></a>在 hd201 上格式化 ZK</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure>

<h3 id="在-hd201-上启动-HDFS"><a href="#在-hd201-上启动-HDFS" class="headerlink" title="在 hd201 上启动 HDFS"></a>在 hd201 上启动 HDFS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>

<h3 id="在-hd201-上启动-YARN"><a href="#在-hd201-上启动-YARN" class="headerlink" title="在 hd201 上启动 YARN"></a>在 hd201 上启动 YARN</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>

<h3 id="单独启动-NameNode"><a href="#单独启动-NameNode" class="headerlink" title="单独启动 NameNode"></a>单独启动 NameNode</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbin/hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure>

<h3 id="单独启动-ResourceManager"><a href="#单独启动-ResourceManager" class="headerlink" title="单独启动 ResourceManager"></a>单独启动 ResourceManager</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbin/yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure>

<h2 id="访问-url"><a href="#访问-url" class="headerlink" title="访问 url"></a>访问 url</h2><p><a href="http://192.168.1.201:50070/">http://192.168.1.201:50070/</a><br><a href="http://192.168.1.201:8088/">http://192.168.1.201:8088/</a><br>启动 historyserver</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbin/mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.1.201:19888/">http://192.168.1.201:19888/</a><br><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h12.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/hadoop/h12.png"></p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/ClusterSetup.html">https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/ClusterSetup.html</a></p>
<h1 id="各端口说明"><a href="#各端口说明" class="headerlink" title="各端口说明"></a>各端口说明</h1><p>Hadoop 集群的各部分一般都会使用到多个端口，有些是 daemon 之间进行交互之用，有些是用于 RPC 访问以及 HTTP 访问。而随着 Hadoop 周边组件的增多，完全记不住哪个端口对应哪个应用，特收集记录如此，以便查询。<br>这里包含我们使用到的组件：HDFS, YARN, HBase, Hive, ZooKeeper:</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>节点</th>
<th>默认端口</th>
<th>配置</th>
<th>用途说明</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>DataNode</td>
<td>50010</td>
<td>dfs.datanode.address</td>
<td>datanode 服务端口，用于数据传输</td>
</tr>
<tr>
<td>HDFS</td>
<td>DataNode</td>
<td>50075</td>
<td>dfs.datanode.http.address</td>
<td>http 服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>DataNode</td>
<td>50475</td>
<td>dfs.datanode.https.address</td>
<td>https 服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>DataNode</td>
<td>50020</td>
<td>dfs.datanode.ipc.address</td>
<td>ipc 服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>NameNode</td>
<td>50070</td>
<td>dfs.namenode.http-address</td>
<td>http 服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>NameNode</td>
<td>50470</td>
<td>dfs.namenode.https-address</td>
<td>https 服务的端口</td>
</tr>
<tr>
<td>HDFS</td>
<td>NameNode</td>
<td>8020</td>
<td>fs.defaultFS</td>
<td>接收 Client 连接的 RPC 端口，用于获取文件系统 metadata 信息。</td>
</tr>
<tr>
<td>HDFS</td>
<td>journalnode</td>
<td>8485</td>
<td>dfs.journalnode.rpc-address</td>
<td>RPC 服务</td>
</tr>
<tr>
<td>HDFS</td>
<td>journalnode</td>
<td>8480</td>
<td>dfs.journalnode.http-address</td>
<td>HTTP 服务</td>
</tr>
<tr>
<td>HDFS</td>
<td>ZKFC</td>
<td>8019</td>
<td>dfs.ha.zkfc.port</td>
<td>ZooKeeper FailoverController，用于 NN HA</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManager</td>
<td>8032</td>
<td>yarn.resourcemanager.address</td>
<td>RM 的 applications manager(ASM)端口</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManager</td>
<td>8030</td>
<td>yarn.resourcemanager.scheduler.address</td>
<td>scheduler 组件的 IPC 端口</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManager</td>
<td>8031</td>
<td>yarn.resourcemanager.resource-tracker.address</td>
<td>IPC</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManager</td>
<td>8033</td>
<td>yarn.resourcemanager.admin.address</td>
<td>IPC</td>
</tr>
<tr>
<td>YARN</td>
<td>ResourceManager</td>
<td>8088</td>
<td>yarn.resourcemanager.webapp.address</td>
<td>http 服务端口</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>8040</td>
<td>yarn.nodemanager.localizer.address</td>
<td>localizer IPC</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>8042</td>
<td>yarn.nodemanager.webapp.address</td>
<td>http 服务端口</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>8041</td>
<td>yarn.nodemanager.address</td>
<td>NM 中 container manager 的端口</td>
</tr>
<tr>
<td>YARN</td>
<td>JobHistory Server</td>
<td>10020</td>
<td>mapreduce.jobhistory.address</td>
<td>IPC</td>
</tr>
<tr>
<td>YARN</td>
<td>JobHistory Server</td>
<td>19888</td>
<td>mapreduce.jobhistory.webapp.address</td>
<td>http 服务端口</td>
</tr>
<tr>
<td>HBase</td>
<td>Master</td>
<td>60000</td>
<td>hbase.master.port</td>
<td>IPC</td>
</tr>
<tr>
<td>HBase</td>
<td>Master</td>
<td>60010</td>
<td>hbase.master.info.port</td>
<td>http 服务端口</td>
</tr>
<tr>
<td>HBase</td>
<td>RegionServer</td>
<td>60020</td>
<td>hbase.regionserver.port</td>
<td>IPC</td>
</tr>
<tr>
<td>HBase</td>
<td>RegionServer</td>
<td>60030</td>
<td>hbase.regionserver.info.port</td>
<td>http 服务端口</td>
</tr>
<tr>
<td>HBase</td>
<td>HQuorumPeer</td>
<td>2181</td>
<td>hbase.zookeeper.property.clientPort</td>
<td>HBase-managed ZK mode，使用独立的 ZooKeeper 集群则不会启用该端口。</td>
</tr>
<tr>
<td>HBase</td>
<td>HQuorumPeer</td>
<td>2888</td>
<td>hbase.zookeeper.peerport</td>
<td>HBase-managed ZK mode，使用独立的 ZooKeeper 集群则不会启用该端口。</td>
</tr>
<tr>
<td>HBase</td>
<td>HQuorumPeer</td>
<td>3888</td>
<td>hbase.zookeeper.leaderport</td>
<td>HBase-managed ZK mode，使用独立的 ZooKeeper 集群则不会启用该端口。</td>
</tr>
<tr>
<td>Hive</td>
<td>Metastore</td>
<td>9083</td>
<td>/etc/default/hive-metastore 中 export PORT=<port>来更新默认端口</port></td>
<td></td>
</tr>
<tr>
<td>Hive</td>
<td>HiveServer</td>
<td>10000</td>
<td>/etc/hive/conf/hive-env.sh 中 export HIVE_SERVER2_THRIFT_PORT=<port>来更新默认端口</port></td>
<td></td>
</tr>
<tr>
<td>ZooKeeper</td>
<td>Server</td>
<td>2181</td>
<td>/etc/zookeeper/conf/zoo.cfg 中 clientPort=<port></port></td>
<td>对客户端提供服务的端口</td>
</tr>
<tr>
<td>ZooKeeper</td>
<td>Server</td>
<td>2888</td>
<td>/etc/zookeeper/conf/zoo.cfg 中 server.x=[hostname]:nnnnn[:nnnnn]，标蓝部分</td>
<td>follower 用来连接到 leader，只在 leader 上监听该端口。</td>
</tr>
<tr>
<td>ZooKeeper</td>
<td>Server</td>
<td>3888</td>
<td>/etc/zookeeper/conf/zoo.cfg 中 server.x=[hostname]:nnnnn[:nnnnn]，标蓝部分</td>
<td>用于 leader 选举的。只在 electionAlg 是 1,2 或 3(默认)时需要。</td>
</tr>
</tbody></table>
<p>所有端口协议均基于 TCP。<br>对于存在 Web UI（HTTP 服务）的所有 hadoop daemon，有如下 url：<br>/logs<br>日志文件列表，用于下载和查看<br>/logLevel<br>允许你设定 log4j 的日志记录级别，类似于 hadoop daemonlog<br>/stacks<br>所有线程的 stack trace，对于 debug 很有帮助<br>/jmx<br>服务端的 Metrics，以 JSON 格式输出。<br>/jmx?qry=Hadoop:*会返回所有 hadoop 相关指标。<br>/jmx?get=MXBeanName::AttributeName 查询指定 bean 指定属性的值，例如/jmx?get=Hadoop:service=NameNode,name=NameNodeInfo::ClusterId 会返回 ClusterId。</p>
<pre><code>这个请求的处理类：org.apache.hadoop.jmx.JMXJsonServlet</code></pre><p>而特定的 Daemon 又有特定的 URL 路径特定相应信息。<br>NameNode:http://:50070/<br>/dfshealth.jsp<br>HDFS 信息页面，其中有链接可以查看文件系统<br>/dfsnodelist.jsp?whatNodes=(DEAD|LIVE)<br>显示 DEAD 或 LIVE 状态的 datanode<br>/fsck<br>运行 fsck 命令，不推荐在集群繁忙时使用！<br>DataNode:http://:50075/<br>/blockScannerReport<br>每个 datanode 都会指定间隔验证块信息</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL问题记录</title>
    <url>//2016/05/06/sql-problem.html</url>
    <content><![CDATA[<h1 id="SQL-问题记录"><a href="#SQL-问题记录" class="headerlink" title="SQL 问题记录"></a>SQL 问题记录</h1><h2 id="in-和-or"><a href="#in-和-or" class="headerlink" title="in 和 or"></a>in 和 or</h2><p><strong>测试 sql</strong></p>
<p>in 或 or 在参数只有 4 个时 使用了索引，超过 4 个使用全表扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_goods_feature where category_id in (1,2,3,4,5,6,7,8)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_goods_feature where category_id &#x3D;1 or category_id&#x3D;2 or category_id &#x3D;3 or category_id &#x3D;4</span><br><span class="line">or category_id &#x3D;5 or category_id &#x3D;6 or category_id &#x3D;7 or category_id &#x3D;8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB</title>
    <url>//2016/05/06/MongoDB.html</url>
    <content><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><!--
create time: 2016-05-06 17:59:42
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<p>数据库-》集合-》文档</p>
<p>insert()<br>update()</p>
<p>upsert() 添加或更新<br>findAndModify 默认返回更新前的文档<br>find()<br>findone()</p>
<p>getLastError() 返回影响条数</p>
<p>$set  增加属性<br>$unset 删除属性</p>
<p>$inc 增加（减少）数字</p>
<p>$push 数组添加元素</p>
<p>$ne 数组不存在元素就添加</p>
<p>$addToSet 数组添加元素 避免重复</p>
<p>$addToSet $each 批量向数组添加元素 避免重复</p>
<p>$pop 从数组一端删除元素</p>
<p>$pull 删除匹配条件的元素</p>
<p>数组定位修改器：$ 代替数组下标（需要匹配条件）</p>
<p>性能 $inc &gt; $push</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 3.0 3.2.5集群安装文档</title>
    <url>//2016/05/06/redis3.0%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3.html</url>
    <content><![CDATA[<h1 id="redis3-0-3-2-5-集群安装文档"><a href="#redis3-0-3-2-5-集群安装文档" class="headerlink" title="redis3.0 3.2.5 集群安装文档"></a>redis3.0 3.2.5 集群安装文档</h1><!--
create time: 2016-05-06 18:15:43
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<p>要让集群正常工作至少需要 3 个主节点，在这里我们要创建 6 个 redis 节点，其中三个为主节点，三个为从节点，对应的 redis 节点的 ip 和端口对应关系如下<br>127.0.0.1:7001<br>127.0.0.1:7002<br>127.0.0.1:7003<br>127.0.0.1:8001<br>127.0.0.1:8002<br>127.0.0.1:8003</p>
<h2 id="1-下载-redis"><a href="#1-下载-redis" class="headerlink" title="1. 下载 redis"></a>1. 下载 redis</h2><p>官网下载 3.0.0 版本，之前 2.几的版本不支持集群模式，下载地址：<a href="https://github.com/antirez/redis/archive/3.0.0-rc2.tar.gz">https://github.com/antirez/redis/archive/3.0.0-rc2.tar.gz</a><br>在两台服务器上分别执行以下 2-5 步骤：</p>
<h2 id="2-上传服务器，解压，编译"><a href="#2-上传服务器，解压，编译" class="headerlink" title="2. 上传服务器，解压，编译"></a>2. 上传服务器，解压，编译</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf automake libtool make</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-3.0.0-rc2.tar.gz</span><br><span class="line">mv redis-3.0.0-rc2.tar.gz redis3.0</span><br><span class="line"><span class="built_in">cd</span> /opt/usr/redis/redis3.0</span><br><span class="line">make MALLOC=libc</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h2 id="3-创建集群需要的目录"><a href="#3-创建集群需要的目录" class="headerlink" title="3. 创建集群需要的目录"></a>3. 创建集群需要的目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/usr/redis/cluster</span><br><span class="line"><span class="built_in">cd</span> /opt/usr/redis/cluster</span><br><span class="line">mkdir 7001</span><br><span class="line">mkdir 7002</span><br><span class="line">mkdir 7003</span><br><span class="line">mkdir 8001</span><br><span class="line">mkdir 8002</span><br><span class="line">mkdir 8003</span><br></pre></td></tr></table></figure>

<h2 id="4-修改配置文件-redis-conf"><a href="#4-修改配置文件-redis-conf" class="headerlink" title="4. 修改配置文件 redis.conf"></a>4. 修改配置文件 redis.conf</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /opt/usr/redis/redis3.0/redis.conf  /opt/usr/redis/cluster</span><br><span class="line">vi redis.conf</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件中的下面选项"><a href="#修改配置文件中的下面选项" class="headerlink" title="修改配置文件中的下面选项"></a>修改配置文件中的下面选项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port 7001</span><br><span class="line">daemonize yes</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">appendonly yes</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">dir &#x2F;opt&#x2F;usr&#x2F;redis&#x2F;cluster&#x2F;7001</span><br></pre></td></tr></table></figure>

<p>修改 dir 参数 bind 参数 port 参数</p>
<h3 id="修改完-redis-conf-配置文件中的这些配置项之后把这个配置文件分别拷贝到-7001-7002-7003-8001-8002-8003-目录下面"><a href="#修改完-redis-conf-配置文件中的这些配置项之后把这个配置文件分别拷贝到-7001-7002-7003-8001-8002-8003-目录下面" class="headerlink" title="修改完 redis.conf 配置文件中的这些配置项之后把这个配置文件分别拷贝到 7001/7002/7003/8001/8002/8003 目录下面"></a>修改完 redis.conf 配置文件中的这些配置项之后把这个配置文件分别拷贝到 7001/7002/7003/8001/8002/8003 目录下面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /opt/usr/redis/cluster/redis.conf  /opt/usr/redis/cluster/7001</span><br><span class="line">cp /opt/usr/redis/cluster/redis.conf  /opt/usr/redis/cluster/7002</span><br><span class="line">cp /opt/usr/redis/cluster/redis.conf  /opt/usr/redis/cluster/7003</span><br></pre></td></tr></table></figure>

<h3 id="拷贝完成之后要修改-7001-7002-目录下面-redis-conf-文件中的-port-参数，分别改为对应的文件夹的名称"><a href="#拷贝完成之后要修改-7001-7002-目录下面-redis-conf-文件中的-port-参数，分别改为对应的文件夹的名称" class="headerlink" title="拷贝完成之后要修改 7001/7002 目录下面 redis.conf 文件中的 port 参数，分别改为对应的文件夹的名称"></a>拷贝完成之后要修改 7001/7002 目录下面 redis.conf 文件中的 port 参数，分别改为对应的文件夹的名称</h3><h2 id="5-分别启动这-6-个-redis-实例"><a href="#5-分别启动这-6-个-redis-实例" class="headerlink" title="5. 分别启动这 6 个 redis 实例"></a>5. 分别启动这 6 个 redis 实例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/usr/redis/cluster/7001</span><br><span class="line">redis-server redis.conf</span><br><span class="line"><span class="built_in">cd</span> /opt/usr/redis/cluster/7002</span><br><span class="line">redis-server redis.conf</span><br><span class="line"><span class="built_in">cd</span> /opt/usr/redis/cluster/7003</span><br><span class="line">redis-server redis.conf</span><br><span class="line"><span class="built_in">cd</span> /opt/usr/redis/cluster/8001</span><br><span class="line">redis-server redis.conf</span><br><span class="line"><span class="built_in">cd</span> /opt/usr/redis/cluster/8002</span><br><span class="line">redis-server redis.conf</span><br><span class="line"><span class="built_in">cd</span> /opt/usr/redis/cluster/8003</span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure>

<h3 id="启动之后使用命令查看-redis-的启动情况-ps-ef-grep-redis"><a href="#启动之后使用命令查看-redis-的启动情况-ps-ef-grep-redis" class="headerlink" title="启动之后使用命令查看 redis 的启动情况 ps -ef|grep redis"></a>启动之后使用命令查看 redis 的启动情况 ps -ef|grep redis</h3><p>如下图显示则说明启动成功</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/redis/r1.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/redis/r1.png"></p>
<h2 id="安装-ruby-rubygems"><a href="#安装-ruby-rubygems" class="headerlink" title="安装 ruby rubygems"></a>安装 ruby rubygems</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y ruby rubygems</span><br></pre></td></tr></table></figure>

<p>修改 gem sources</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem sources remove https:&#x2F;&#x2F;rubygems.org&#x2F;</span><br><span class="line">gem sources -a https:&#x2F;&#x2F;ruby.taobao.org&#x2F;</span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure>

<p>gem 安装 redis</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 3.2.5使用3.2.2版本</span><br><span class="line">gem install redis -v 3.2.2</span><br><span class="line">gem list</span><br></pre></td></tr></table></figure>

<h2 id="6-执行-redis-的创建集群命令创建集群（注意以下-IP-写实际-IP，禁止使用-127-0-0-1）"><a href="#6-执行-redis-的创建集群命令创建集群（注意以下-IP-写实际-IP，禁止使用-127-0-0-1）" class="headerlink" title="6. 执行 redis 的创建集群命令创建集群（注意以下 IP 写实际 IP，禁止使用 127.0.0.1）"></a>6. 执行 redis 的创建集群命令创建集群（注意以下 IP 写实际 IP，禁止使用 127.0.0.1）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/usr/redis/redis3.0/src</span><br><span class="line">./redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:8001 127.0.0.1:8002 127.0.0.1:8003</span><br></pre></td></tr></table></figure>

<h3 id="正常执行"><a href="#正常执行" class="headerlink" title="正常执行"></a>正常执行</h3><p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/redis/r2.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/redis/r2.png"></p>
<p>输入 yes，然后配置完成。</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/redis/r3.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/redis/r3.png"><br>至此 redis 集群即搭建成功！</p>
<p><strong><em>使用 127.0.0.1 严重影响 cluster 性能</em></strong></p>
<h2 id="使用-redis-cli-命令进入集群环境"><a href="#使用-redis-cli-命令进入集群环境" class="headerlink" title="使用 redis-cli 命令进入集群环境"></a>使用 redis-cli 命令进入集群环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -c -p 7001</span><br></pre></td></tr></table></figure>

<p>run</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;opt&#x2F;usr&#x2F;redis&#x2F;cluster&#x2F;7001</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd &#x2F;opt&#x2F;usr&#x2F;redis&#x2F;cluster&#x2F;7002</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd &#x2F;opt&#x2F;usr&#x2F;redis&#x2F;cluster&#x2F;7003</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd &#x2F;opt&#x2F;usr&#x2F;redis&#x2F;cluster&#x2F;8001</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd &#x2F;opt&#x2F;usr&#x2F;redis&#x2F;cluster&#x2F;8002</span><br><span class="line">redis-server redis.conf</span><br><span class="line">cd &#x2F;opt&#x2F;usr&#x2F;redis&#x2F;cluster&#x2F;8003</span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure>

<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-trib.rb check 127.0.0.1:7001</span><br></pre></td></tr></table></figure>

<h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><p>错误内容：/usr/bin/env: ruby: No such file or directory<br>所以需要安装 ruby 的环境，这里推荐使用 yum install ruby 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ruby</span><br></pre></td></tr></table></figure>

<p>错误内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-trib.rb:24:in &#96;require&#39;: no such file to load -- rubygems (LoadError)</span><br><span class="line">from .&#x2F;redis-trib.rb:24</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install rubygems</span><br></pre></td></tr></table></figure>

<h3 id="提示不能加载-redis，是因为缺少-redis-和-ruby-的接口，使用-gem-安装"><a href="#提示不能加载-redis，是因为缺少-redis-和-ruby-的接口，使用-gem-安装" class="headerlink" title="提示不能加载 redis，是因为缺少 redis 和 ruby 的接口，使用 gem 安装"></a>提示不能加载 redis，是因为缺少 redis 和 ruby 的接口，使用 gem 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install redis</span><br></pre></td></tr></table></figure>

<p>gem install redis<br>这里可能无法安装,因为无法连接 gem 服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[@zw_22_90 src]# gem install redis --version 3.0.0</span><br><span class="line">ERROR:  Could not find a valid gem &#39;redis&#39; (&#x3D; 3.0.0) in any repository</span><br><span class="line">ERROR:  While executing gem ... (Gem::RemoteFetcher::FetchError)</span><br></pre></td></tr></table></figure>

<p>修改 gem sources 为 taobao.org 加快安装速度</p>
<p><a href="https://blog.csdn.net/beyondlpf/article/details/51275106">https://blog.csdn.net/beyondlpf/article/details/51275106</a></p>
<p>或者手工下载并安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://rubygems.global.ssl.fastly.net/gems/redis-3.2.1.gem</span><br><span class="line">gem install -l ./redis-3.2.1.gem</span><br></pre></td></tr></table></figure>

<h3 id="3-2-5-提示无法链接"><a href="#3-2-5-提示无法链接" class="headerlink" title="3.2.5 提示无法链接"></a>3.2.5 提示无法链接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@redis159 redis-3.2.5]# src&#x2F;redis-trib.rb create --replicas 1 20.0.1.159:7001 20.0.1.159:7002 20.0.1.159:7003 20.0.1.159:7004 20.0.1.159:7005 20.0.1.159:7006</span><br><span class="line">&gt;&gt;&gt; Creating cluster</span><br><span class="line">[ERR] Sorry, can&#39;t connect to node 20.0.1.159:7001</span><br></pre></td></tr></table></figure>

<p>修改配置文件设置 bind 参数即可</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper3.4.6集群安装</title>
    <url>//2016/05/06/zookeeper3.4.6-cluster-install.html</url>
    <content><![CDATA[<h1 id="zookeeper3-4-6-集群安装"><a href="#zookeeper3-4-6-集群安装" class="headerlink" title="zookeeper3.4.6 集群安装"></a>zookeeper3.4.6 集群安装</h1><!--
create time: 2016-05-06 15:36:43
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<p>安装 java 环境</p>
<p>下载地址<br><a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/">https://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.6.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/usr/zookeeper/2184</span><br><span class="line">mkdir -p /opt/usr/zookeeper/2183</span><br><span class="line">mkdir -p /opt/usr/zookeeper/2182</span><br></pre></td></tr></table></figure>

<h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper-3.4.6</span><br><span class="line">mv * /opt/usr/zookeeper/2184</span><br></pre></td></tr></table></figure>

<h2 id="创建-data-目录"><a href="#创建-data-目录" class="headerlink" title="创建 data 目录"></a>创建 data 目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/usr/zookeeper/2184</span><br><span class="line">mkdir data</span><br></pre></td></tr></table></figure>

<h2 id="修改-myid"><a href="#修改-myid" class="headerlink" title="修改 myid"></a>修改 myid</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 4 &gt; data/myid</span><br></pre></td></tr></table></figure>

<h2 id="复制修改配置文件"><a href="#复制修改配置文件" class="headerlink" title="复制修改配置文件"></a>复制修改配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime&#x3D;2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use &#x2F;tmp for storage, &#x2F;tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir&#x3D;&#x2F;opt&#x2F;usr&#x2F;zookeeper&#x2F;2184&#x2F;data</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort&#x3D;2184</span><br><span class="line">server.4&#x3D;127.0.0.1:2884:3884</span><br><span class="line">server.2&#x3D;127.0.0.1:2882:3882</span><br><span class="line">server.3&#x3D;127.0.0.1:2883:3883</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns&#x3D;60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the</span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># https:&#x2F;&#x2F;zookeeper.apache.org&#x2F;doc&#x2F;current&#x2F;zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount&#x3D;3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval&#x3D;1</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/zookeeper/z1.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/zookeeper/z1.png"></p>
<p><strong>server.3=127.0.0.1:2883:3883</strong></p>
<p>3 表示 myid<br>2883 端口负责数据传输<br>3883 端口负责 leader 选举</p>
<h2 id="复制相同的配置到相应文件"><a href="#复制相同的配置到相应文件" class="headerlink" title="复制相同的配置到相应文件"></a>复制相同的配置到相应文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/usr/zookeeper/2184</span><br><span class="line">cp -r * ../2183/</span><br><span class="line">cp -r * ../2182/</span><br></pre></td></tr></table></figure>

<h2 id="修改对应的-myid-及配置文件"><a href="#修改对应的-myid-及配置文件" class="headerlink" title="修改对应的 myid 及配置文件"></a>修改对应的 myid 及配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/usr/zookeeper/2183</span><br><span class="line"><span class="built_in">echo</span> 3 &gt;data/myid</span><br><span class="line"><span class="built_in">cd</span> /opt/usr/zookeeper/2183</span><br><span class="line"><span class="built_in">echo</span> 2 &gt;data/myid</span><br></pre></td></tr></table></figure>

<p><strong>修改 2182、2183 conf 目录下的 zoo.conf</strong></p>
<p><strong>修改 data 及 clientPort</strong></p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/zookeeper/z2.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/zookeeper/z2.png"></p>
<h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/usr/zookeeper/2182/bin/zkServer.sh start</span><br><span class="line">/opt/usr/zookeeper/2183/bin/zkServer.sh start</span><br><span class="line">/opt/usr/zookeeper/2184/bin/zkServer.sh start</span><br></pre></td></tr></table></figure>

<p><strong>默认 zookeeper 日志文件会在当前目录下产生 zookeeper.out</strong></p>
<p><strong>查看 leader follower 状态</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/zkServer.sh status</span><br><span class="line">//或者</span><br><span class="line"><span class="built_in">echo</span> status | nc 127.0.0.1 2181</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/zookeeper/z3.png" alt></p>
<h2 id="使用-zkCli-sh"><a href="#使用-zkCli-sh" class="headerlink" title="使用 zkCli.sh"></a>使用 zkCli.sh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zkCli.sh -server 127.0.0.1:2182</span><br></pre></td></tr></table></figure>

<p>zk help</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">	connect host:port</span><br><span class="line">	get path [watch]</span><br><span class="line">	ls path [watch]</span><br><span class="line">	set path data [version]</span><br><span class="line">	rmr path</span><br><span class="line">	delquota [-n|-b] path</span><br><span class="line">	quit</span><br><span class="line">	printwatches on|off</span><br><span class="line">	create [-s] [-e] path data acl</span><br><span class="line">	stat path [watch]</span><br><span class="line">	close</span><br><span class="line">	ls2 path [watch]</span><br><span class="line">	history</span><br><span class="line">	listquota path</span><br><span class="line">	setAcl path acl</span><br><span class="line">	getAcl path</span><br><span class="line">	sync path</span><br><span class="line">	redo cmdno</span><br><span class="line">	addauth scheme auth</span><br><span class="line">	delete path [version]</span><br><span class="line">	setquota -n|-b val path</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN安装</title>
    <url>//2016/05/06/OpenVPN%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<h1 id="OpenVPN-安装"><a href="#OpenVPN-安装" class="headerlink" title="OpenVPN 安装"></a>OpenVPN 安装</h1><p><strong>安装 openvpn easy-rsa</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https:&#x2F;&#x2F;download.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;i386&#x2F;epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install openvpn easy-rsa -y</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -R &#x2F;usr&#x2F;share&#x2F;easy-rsa&#x2F; &#x2F;etc&#x2F;openvpn</span><br></pre></td></tr></table></figure>

<p><strong>生成 rsa 密钥</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">total 112</span><br><span class="line">-rwxr-xr-x 1 root root 121 Oct 26 03:14 build-ca</span><br><span class="line">-rwxr-xr-x 1 root root 354 Oct 26 03:14 build-dh</span><br><span class="line">-rwxr-xr-x 1 root root 190 Oct 26 03:14 build-inter</span><br><span class="line">-rwxr-xr-x 1 root root 165 Oct 26 03:14 build-key</span><br><span class="line">-rwxr-xr-x 1 root root 159 Oct 26 03:14 build-key-pass</span><br><span class="line">-rwxr-xr-x 1 root root 251 Oct 26 03:14 build-key-pkcs12</span><br><span class="line">-rwxr-xr-x 1 root root 270 Oct 26 03:14 build-key-server</span><br><span class="line">-rwxr-xr-x 1 root root 215 Oct 26 03:14 build-req</span><br><span class="line">-rwxr-xr-x 1 root root 160 Oct 26 03:14 build-req-pass</span><br><span class="line">-rwxr-xr-x 1 root root 430 Oct 26 03:14 clean-all</span><br><span class="line">-rwxr-xr-x 1 root root 1459 Oct 26 03:14 inherit-inter</span><br><span class="line">-rwxr-xr-x 1 root root 297 Oct 26 03:14 list-crl</span><br><span class="line">-rw-r--r-- 1 root root 422 Oct 26 03:14 Makefile</span><br><span class="line">-rwxr-xr-x 1 root root 7768 Oct 26 03:14 openssl-0.9.6.cnf</span><br><span class="line">-rwxr-xr-x 1 root root 8230 Oct 26 03:14 openssl.cnf</span><br><span class="line">-rwxr-xr-x 1 root root 12068 Oct 26 03:14 pkitool</span><br><span class="line">-rw-r--r-- 1 root root 8864 Oct 26 03:14 README</span><br><span class="line">-rwxr-xr-x 1 root root 894 Oct 26 03:14 revoke-full</span><br><span class="line">-rwxr-xr-x 1 root root 180 Oct 26 03:14 sign-req</span><br><span class="line">-rwxr-xr-x 1 root root 1602 Oct 26 03:14 vars</span><br><span class="line">-rwxr-xr-x 1 root root 190 Oct 26 03:14 whichopensslcnf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim vars</span><br><span class="line"># 定义你所在的国家</span><br><span class="line">export KEY_COUNTRY&#x3D;&quot;CN&quot;</span><br><span class="line"># 你所在的省份</span><br><span class="line">export KEY_PROVINCE&#x3D;&quot;BJ&quot;</span><br><span class="line"># 你所在的城市</span><br><span class="line">export KEY_CITY&#x3D;&quot;Beijing&quot;</span><br><span class="line"># 你所在的组织</span><br><span class="line">export KEY_ORG&#x3D;&quot;OpenVPN ORG&quot;</span><br><span class="line"># 你的单位</span><br><span class="line">export KEY_OU&#x3D;&quot;OpenVPN&quot;</span><br><span class="line"># 你的邮件地址</span><br><span class="line">export KEY_EMAIL&#x3D;&quot;duanzhaoqian@outlook.com&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source .&#x2F;vars</span><br><span class="line">.&#x2F;clean-all</span><br><span class="line">.&#x2F;build-ca</span><br><span class="line">.&#x2F;build-key-server server</span><br><span class="line">.&#x2F;build-key client1</span><br><span class="line">.&#x2F;build-dh</span><br></pre></td></tr></table></figure>

<p><img src="https://static.oschina.net/uploads/space/2013/0519/001507_7Et0_437244.gif" alt="https://static.oschina.net/uploads/space/2013/0519/001507_7Et0_437244.gif"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用来创建环境变量，设置所需要的变量的脚本</span><br><span class="line">&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;vars</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建生成CA证书及密钥 文件所需要的文件和目录</span><br><span class="line">&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;clean-all</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成CA证书(交互)</span><br><span class="line">&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;build-ca</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接使用vars的环境变量设置直接生成证书(非交互)</span><br><span class="line">&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;pkitool</span><br></pre></td></tr></table></figure>

<p><em>生成 server 密钥</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成服务器端密钥(交互)</span><br><span class="line">&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;build-key-server server</span><br></pre></td></tr></table></figure>

<p><em>生成 client 密钥</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成客户端密钥(交互)</span><br><span class="line">&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;build-key client1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成Diffie-Hellman文件(交互)</span><br><span class="line">&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;build-dh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>

<p><strong>复制密钥到/etc/openvpn</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;keys</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp ca.crt ca.key dh1024.pem server.crt server.key &#x2F;etc&#x2F;openvpn</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp ca.crt ca.key dh2048.pem server.crt server.key &#x2F;etc&#x2F;openvpn</span><br></pre></td></tr></table></figure>

<p><strong>复制配置文件到/etc/openvpn</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;openvpn-*&#x2F;sample&#x2F;sample-config-files&#x2F;server.conf &#x2F;etc&#x2F;openvpn&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>复制客户端配置文件到~/ 修改 准备打包下载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;openvpn</span><br><span class="line">cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;openvpn-*&#x2F;sample&#x2F;sample-config-files&#x2F;client.conf ~&#x2F;openvpn</span><br><span class="line">cd &#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;2.0&#x2F;keys&#x2F;</span><br><span class="line">cp client* ca.crt ~&#x2F;openvpn&#x2F;</span><br><span class="line">cd</span><br><span class="line">tar -zcvf openvpn.tar.gz openvpn&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim client.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##############################################</span><br><span class="line"># Sample client-side OpenVPN 2.0 config file #</span><br><span class="line"># for connecting to multi-client server.     #</span><br><span class="line">#                                            #</span><br><span class="line"># This configuration can be used by multiple #</span><br><span class="line"># clients, however each client should have   #</span><br><span class="line"># its own cert and key files.                #</span><br><span class="line">#                                            #</span><br><span class="line"># On Windows, you might want to rename this  #</span><br><span class="line"># file so it has a .ovpn extension           #</span><br><span class="line">##############################################</span><br><span class="line"></span><br><span class="line"># Specify that we are a client and that we</span><br><span class="line"># will be pulling certain config file directives</span><br><span class="line"># from the server.</span><br><span class="line">client</span><br><span class="line"></span><br><span class="line"># Use the same setting as you are using on</span><br><span class="line"># the server.</span><br><span class="line"># On most systems, the VPN will not function</span><br><span class="line"># unless you partially or fully disable</span><br><span class="line"># the firewall for the TUN&#x2F;TAP interface.</span><br><span class="line">dev tap</span><br><span class="line">;dev tun</span><br><span class="line"></span><br><span class="line"># Windows needs the TAP-Win32 adapter name</span><br><span class="line"># from the Network Connections panel</span><br><span class="line"># if you have more than one.  On XP SP2,</span><br><span class="line"># you may need to disable the firewall</span><br><span class="line"># for the TAP adapter.</span><br><span class="line">;dev-node MyTap</span><br><span class="line"></span><br><span class="line"># Are we connecting to a TCP or</span><br><span class="line"># UDP server?  Use the same setting as</span><br><span class="line"># on the server.</span><br><span class="line">;proto udp</span><br><span class="line">proto tcp</span><br><span class="line"></span><br><span class="line"># The hostname&#x2F;IP and port of the server.</span><br><span class="line"># You can have multiple remote entries</span><br><span class="line"># to load balance between the servers.</span><br><span class="line">remote 45.33.43.66 11111</span><br><span class="line">;remote my-server-2 1194</span><br><span class="line"></span><br><span class="line"># Choose a random host from the remote</span><br><span class="line"># list for load-balancing.  Otherwise</span><br><span class="line"># try hosts in the order specified.</span><br><span class="line">;remote-random</span><br><span class="line"></span><br><span class="line"># Keep trying indefinitely to resolve the</span><br><span class="line"># host name of the OpenVPN server.  Very useful</span><br><span class="line"># on machines which are not permanently connected</span><br><span class="line"># to the internet such as laptops.</span><br><span class="line">resolv-retry infinite</span><br><span class="line"></span><br><span class="line"># Most clients don&#39;t need to bind to</span><br><span class="line"># a specific local port number.</span><br><span class="line">nobind</span><br><span class="line"></span><br><span class="line"># Downgrade privileges after initialization (non-Windows only)</span><br><span class="line">;user nobody</span><br><span class="line">;group nobody</span><br><span class="line"></span><br><span class="line"># Try to preserve some state across restarts.</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"># If you are connecting through an</span><br><span class="line"># HTTP proxy to reach the actual OpenVPN</span><br><span class="line"># server, put the proxy server&#x2F;IP and</span><br><span class="line"># port number here.  See the man page</span><br><span class="line"># if your proxy server requires</span><br><span class="line"># authentication.</span><br><span class="line">;http-proxy-retry # retry on connection failures</span><br><span class="line">;http-proxy [proxy server] [proxy port #]</span><br><span class="line"></span><br><span class="line"># Wireless networks often produce a lot</span><br><span class="line"># of duplicate packets.  Set this flag</span><br><span class="line"># to silence duplicate packet warnings.</span><br><span class="line">;mute-replay-warnings</span><br><span class="line"></span><br><span class="line"># SSL&#x2F;TLS parms.</span><br><span class="line"># See the server config file for more</span><br><span class="line"># description.  It&#39;s best to use</span><br><span class="line"># a separate .crt&#x2F;.key file pair</span><br><span class="line"># for each client.  A single ca</span><br><span class="line"># file can be used for all clients.</span><br><span class="line">ca ca.crt</span><br><span class="line">cert client3.crt</span><br><span class="line">key client3.key</span><br><span class="line"></span><br><span class="line"># Verify server certificate by checking that the</span><br><span class="line"># certicate has the correct key usage set.</span><br><span class="line"># This is an important precaution to protect against</span><br><span class="line"># a potential attack discussed here:</span><br><span class="line">#  https:&#x2F;&#x2F;openvpn.net&#x2F;howto.html#mitm</span><br><span class="line">#</span><br><span class="line"># To use this feature, you will need to generate</span><br><span class="line"># your server certificates with the keyUsage set to</span><br><span class="line">#   digitalSignature, keyEncipherment</span><br><span class="line"># and the extendedKeyUsage to</span><br><span class="line">#   serverAuth</span><br><span class="line"># EasyRSA can do this for you.</span><br><span class="line">remote-cert-tls server</span><br><span class="line"></span><br><span class="line"># If a tls-auth key is used on the server</span><br><span class="line"># then every client must also have the key.</span><br><span class="line">;tls-auth ta.key 1</span><br><span class="line"></span><br><span class="line"># Select a cryptographic cipher.</span><br><span class="line"># If the cipher option is used on the server</span><br><span class="line"># then you must also specify it here.</span><br><span class="line">;cipher x</span><br><span class="line"></span><br><span class="line"># Enable compression on the VPN link.</span><br><span class="line"># Don&#39;t enable this unless it is also</span><br><span class="line"># enabled in the server config file.</span><br><span class="line">comp-lzo</span><br><span class="line"></span><br><span class="line"># Set log file verbosity.</span><br><span class="line">verb 6</span><br><span class="line"></span><br><span class="line"># Silence repeating messages</span><br><span class="line">;mute 20</span><br></pre></td></tr></table></figure>

<p><strong>openvpn 转发</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 10.8.0.0&#x2F;16 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p><strong>启动 openvpn</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;openvpn start</span><br></pre></td></tr></table></figure>

<p><strong>设置自动启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig openvpn on</span><br></pre></td></tr></table></figure>

<p><strong>安装 dns</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install dnsmasq</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;dnsmasq.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;dnsmasq restart</span><br></pre></td></tr></table></figure>

<p><strong>设置 dns 自动启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig dnsmasq on</span><br></pre></td></tr></table></figure>

<p><strong>sysctrl 配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@li993-66 ~]# vim &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Kernel sysctl configuration file for Red Hat Linux</span><br><span class="line">#</span><br><span class="line"># For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and</span><br><span class="line"># sysctl.conf(5) for more details.</span><br><span class="line"></span><br><span class="line"># Controls IP packet forwarding</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br><span class="line"></span><br><span class="line"># Controls source route verification</span><br><span class="line">net.ipv4.conf.default.rp_filter &#x3D; 1</span><br><span class="line"></span><br><span class="line"># Do not accept source routing</span><br><span class="line">net.ipv4.conf.default.accept_source_route &#x3D; 0</span><br><span class="line"></span><br><span class="line"># Controls the System Request debugging functionality of the kernel</span><br><span class="line">kernel.sysrq &#x3D; 0</span><br><span class="line"></span><br><span class="line"># Controls whether core dumps will append the PID to the core filename.</span><br><span class="line"># Useful for debugging multi-threaded applications.</span><br><span class="line">kernel.core_uses_pid &#x3D; 1</span><br><span class="line"></span><br><span class="line"># Controls the use of TCP syncookies</span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 1</span><br><span class="line"></span><br><span class="line"># Controls the default maxmimum size of a mesage queue</span><br><span class="line">kernel.msgmnb &#x3D; 65536</span><br><span class="line"></span><br><span class="line"># Controls the maximum size of a message, in bytes</span><br><span class="line">kernel.msgmax &#x3D; 65536</span><br><span class="line"></span><br><span class="line"># Controls the maximum shared segment size, in bytes</span><br><span class="line">kernel.shmmax &#x3D; 68719476736</span><br><span class="line"></span><br><span class="line"># Controls the maximum number of shared memory segments, in pages</span><br><span class="line">kernel.shmall &#x3D; 4294967296</span><br><span class="line">~</span><br></pre></td></tr></table></figure>

<p><strong>server.conf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#################################################</span><br><span class="line"># Sample OpenVPN 2.0 config file for            #</span><br><span class="line"># multi-client server.                          #</span><br><span class="line">#                                               #</span><br><span class="line"># This file is for the server side              #</span><br><span class="line"># of a many-clients &lt;-&gt; one-server              #</span><br><span class="line"># OpenVPN configuration.                        #</span><br><span class="line">#                                               #</span><br><span class="line"># OpenVPN also supports                         #</span><br><span class="line"># single-machine &lt;-&gt; single-machine             #</span><br><span class="line"># configurations (See the Examples page         #</span><br><span class="line"># on the web site for more info).               #</span><br><span class="line">#                                               #</span><br><span class="line"># This config should work on Windows            #</span><br><span class="line"># or Linux&#x2F;BSD systems.  Remember on            #</span><br><span class="line"># Windows to quote pathnames and use            #</span><br><span class="line"># double backslashes, e.g.:                     #</span><br><span class="line"># &quot;C:\\Program Files\\OpenVPN\\config\\foo.key&quot; #</span><br><span class="line">#                                               #</span><br><span class="line"># Comments are preceded with &#39;#&#39; or &#39;;&#39;         #</span><br><span class="line">#################################################</span><br><span class="line"></span><br><span class="line"># Which local IP address should OpenVPN</span><br><span class="line"># listen on? (optional)</span><br><span class="line">;local a.b.c.d</span><br><span class="line"></span><br><span class="line"># Which TCP&#x2F;UDP port should OpenVPN listen on?</span><br><span class="line"># If you want to run multiple OpenVPN instances</span><br><span class="line"># on the same machine, use a different port</span><br><span class="line"># number for each one.  You will need to</span><br><span class="line"># open up this port on your firewall.</span><br><span class="line">port 11111</span><br><span class="line"></span><br><span class="line"># TCP or UDP server?</span><br><span class="line">;proto udp</span><br><span class="line">proto tcp</span><br><span class="line"></span><br><span class="line"># &quot;dev tun&quot; will create a routed IP tunnel,</span><br><span class="line"># &quot;dev tap&quot; will create an ethernet tunnel.</span><br><span class="line"># Use &quot;dev tap0&quot; if you are ethernet bridging</span><br><span class="line"># and have precreated a tap0 virtual interface</span><br><span class="line"># and bridged it with your ethernet interface.</span><br><span class="line"># If you want to control access policies</span><br><span class="line"># over the VPN, you must create firewall</span><br><span class="line"># rules for the the TUN&#x2F;TAP interface.</span><br><span class="line"># On non-Windows systems, you can give</span><br><span class="line"># an explicit unit number, such as tun0.</span><br><span class="line"># On Windows, use &quot;dev-node&quot; for this.</span><br><span class="line"># On most systems, the VPN will not function</span><br><span class="line"># unless you partially or fully disable</span><br><span class="line"># the firewall for the TUN&#x2F;TAP interface.</span><br><span class="line">dev tap</span><br><span class="line">;dev tun</span><br><span class="line"></span><br><span class="line"># Windows needs the TAP-Win32 adapter name</span><br><span class="line"># from the Network Connections panel if you</span><br><span class="line"># have more than one.  On XP SP2 or higher,</span><br><span class="line"># you may need to selectively disable the</span><br><span class="line"># Windows firewall for the TAP adapter.</span><br><span class="line"># Non-Windows systems usually don&#39;t need this.</span><br><span class="line">;dev-node MyTap</span><br><span class="line"></span><br><span class="line"># SSL&#x2F;TLS root certificate (ca), certificate</span><br><span class="line"># (cert), and private key (key).  Each client</span><br><span class="line"># and the server must have their own cert and</span><br><span class="line"># key file.  The server and all clients will</span><br><span class="line"># use the same ca file.</span><br><span class="line">#</span><br><span class="line"># See the &quot;easy-rsa&quot; directory for a series</span><br><span class="line"># of scripts for generating RSA certificates</span><br><span class="line"># and private keys.  Remember to use</span><br><span class="line"># a unique Common Name for the server</span><br><span class="line"># and each of the client certificates.</span><br><span class="line">#</span><br><span class="line"># Any X509 key management system can be used.</span><br><span class="line"># OpenVPN can also use a PKCS #12 formatted key file</span><br><span class="line"># (see &quot;pkcs12&quot; directive in man page).</span><br><span class="line">ca ca.crt</span><br><span class="line">cert server.crt</span><br><span class="line">key server.key  # This file should be kept secret</span><br><span class="line"></span><br><span class="line"># Diffie hellman parameters.</span><br><span class="line"># Generate your own with:</span><br><span class="line">#   openssl dhparam -out dh2048.pem 2048</span><br><span class="line">dh dh2048.pem</span><br><span class="line"></span><br><span class="line"># Network topology</span><br><span class="line"># Should be subnet (addressing via IP)</span><br><span class="line"># unless Windows clients v2.0.9 and lower have to</span><br><span class="line"># be supported (then net30, i.e. a &#x2F;30 per client)</span><br><span class="line"># Defaults to net30 (not recommended)</span><br><span class="line">;topology subnet</span><br><span class="line"></span><br><span class="line"># Configure server mode and supply a VPN subnet</span><br><span class="line"># for OpenVPN to draw client addresses from.</span><br><span class="line"># The server will take 10.8.0.1 for itself,</span><br><span class="line"># the rest will be made available to clients.</span><br><span class="line"># Each client will be able to reach the server</span><br><span class="line"># on 10.8.0.1. Comment this line out if you are</span><br><span class="line"># ethernet bridging. See the man page for more info.</span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line"></span><br><span class="line"># Maintain a record of client &lt;-&gt; virtual IP address</span><br><span class="line"># associations in this file.  If OpenVPN goes down or</span><br><span class="line"># is restarted, reconnecting clients can be assigned</span><br><span class="line"># the same virtual IP address from the pool that was</span><br><span class="line"># previously assigned.</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"></span><br><span class="line"># Configure server mode for ethernet bridging.</span><br><span class="line"># You must first use your OS&#39;s bridging capability</span><br><span class="line"># to bridge the TAP interface with the ethernet</span><br><span class="line"># NIC interface.  Then you must manually set the</span><br><span class="line"># IP&#x2F;netmask on the bridge interface, here we</span><br><span class="line"># assume 10.8.0.4&#x2F;255.255.255.0.  Finally we</span><br><span class="line"># must set aside an IP range in this subnet</span><br><span class="line"># (start&#x3D;10.8.0.50 end&#x3D;10.8.0.100) to allocate</span><br><span class="line"># to connecting clients.  Leave this line commented</span><br><span class="line"># out unless you are ethernet bridging.</span><br><span class="line">;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100</span><br><span class="line"></span><br><span class="line"># Configure server mode for ethernet bridging</span><br><span class="line"># using a DHCP-proxy, where clients talk</span><br><span class="line"># to the OpenVPN server-side DHCP server</span><br><span class="line"># to receive their IP address allocation</span><br><span class="line"># and DNS server addresses.  You must first use</span><br><span class="line"># your OS&#39;s bridging capability to bridge the TAP</span><br><span class="line"># interface with the ethernet NIC interface.</span><br><span class="line"># Note: this mode only works on clients (such as</span><br><span class="line"># Windows), where the client-side TAP adapter is</span><br><span class="line"># bound to a DHCP client.</span><br><span class="line">;server-bridge</span><br><span class="line"></span><br><span class="line"># Push routes to the client to allow it</span><br><span class="line"># to reach other private subnets behind</span><br><span class="line"># the server.  Remember that these</span><br><span class="line"># private subnets will also need</span><br><span class="line"># to know to route the OpenVPN client</span><br><span class="line"># address pool (10.8.0.0&#x2F;255.255.255.0)</span><br><span class="line"># back to the OpenVPN server.</span><br><span class="line">;push &quot;route 192.168.10.0 255.255.255.0&quot;</span><br><span class="line">;push &quot;route 192.168.20.0 255.255.255.0&quot;</span><br><span class="line"></span><br><span class="line"># To assign specific IP addresses to specific</span><br><span class="line"># clients or if a connecting client has a private</span><br><span class="line"># subnet behind it that should also have VPN access,</span><br><span class="line"># use the subdirectory &quot;ccd&quot; for client-specific</span><br><span class="line"># configuration files (see man page for more info).</span><br><span class="line"></span><br><span class="line"># EXAMPLE: Suppose the client</span><br><span class="line"># having the certificate common name &quot;Thelonious&quot;</span><br><span class="line"># also has a small subnet behind his connecting</span><br><span class="line"># machine, such as 192.168.40.128&#x2F;255.255.255.248.</span><br><span class="line"># First, uncomment out these lines:</span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route 192.168.40.128 255.255.255.248</span><br><span class="line"># Then create a file ccd&#x2F;Thelonious with this line:</span><br><span class="line">#   iroute 192.168.40.128 255.255.255.248</span><br><span class="line"># This will allow Thelonious&#39; private subnet to</span><br><span class="line"># access the VPN.  This example will only work</span><br><span class="line"># if you are routing, not bridging, i.e. you are</span><br><span class="line"># using &quot;dev tun&quot; and &quot;server&quot; directives.</span><br><span class="line"></span><br><span class="line"># EXAMPLE: Suppose you want to give</span><br><span class="line"># Thelonious a fixed VPN IP address of 10.9.0.1.</span><br><span class="line"># First uncomment out these lines:</span><br><span class="line">;client-config-dir ccd</span><br><span class="line">;route 10.9.0.0 255.255.255.252</span><br><span class="line"># Then add this line to ccd&#x2F;Thelonious:</span><br><span class="line">#   ifconfig-push 10.9.0.1 10.9.0.2</span><br><span class="line"></span><br><span class="line"># Suppose that you want to enable different</span><br><span class="line"># firewall access policies for different groups</span><br><span class="line"># of clients.  There are two methods:</span><br><span class="line"># (1) Run multiple OpenVPN daemons, one for each</span><br><span class="line">#     group, and firewall the TUN&#x2F;TAP interface</span><br><span class="line">#     for each group&#x2F;daemon appropriately.</span><br><span class="line"># (2) (Advanced) Create a script to dynamically</span><br><span class="line">#     modify the firewall in response to access</span><br><span class="line">#     from different clients.  See man</span><br><span class="line">#     page for more info on learn-address script.</span><br><span class="line">;learn-address .&#x2F;script</span><br><span class="line"></span><br><span class="line"># If enabled, this directive will configure</span><br><span class="line"># all clients to redirect their default</span><br><span class="line"># network gateway through the VPN, causing</span><br><span class="line"># all IP traffic such as web browsing and</span><br><span class="line"># and DNS lookups to go through the VPN</span><br><span class="line"># (The OpenVPN server machine may need to NAT</span><br><span class="line"># or bridge the TUN&#x2F;TAP interface to the internet</span><br><span class="line"># in order for this to work properly).</span><br><span class="line">;push &quot;redirect-gateway def1 bypass-dhcp&quot;</span><br><span class="line">push &quot;redirect-gateway def1&quot;</span><br><span class="line"># Certain Windows-specific network settings</span><br><span class="line"># can be pushed to clients, such as DNS</span><br><span class="line"># or WINS server addresses.  CAVEAT:</span><br><span class="line"># https:&#x2F;&#x2F;openvpn.net&#x2F;faq.html#dhcpcaveats</span><br><span class="line"># The addresses below refer to the public</span><br><span class="line"># DNS servers provided by opendns.com.</span><br><span class="line">;push &quot;dhcp-option DNS 208.67.222.222&quot;</span><br><span class="line">;push &quot;dhcp-option DNS 208.67.220.220&quot;</span><br><span class="line">push &quot;dhcp-option DNS 10.8.0.1&quot;</span><br><span class="line">#push &quot;dhcp-option DNS 8.8.8.8&quot;</span><br><span class="line">#push &quot;dhcp-option DNS 8.8.4.4&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment this directive to allow different</span><br><span class="line"># clients to be able to &quot;see&quot; each other.</span><br><span class="line"># By default, clients will only see the server.</span><br><span class="line"># To force clients to only see the server, you</span><br><span class="line"># will also need to appropriately firewall the</span><br><span class="line"># server&#39;s TUN&#x2F;TAP interface.</span><br><span class="line">client-to-client</span><br><span class="line"></span><br><span class="line"># Uncomment this directive if multiple clients</span><br><span class="line"># might connect with the same certificate&#x2F;key</span><br><span class="line"># files or common names.  This is recommended</span><br><span class="line"># only for testing purposes.  For production use,</span><br><span class="line"># each client should have its own certificate&#x2F;key</span><br><span class="line"># pair.</span><br><span class="line">#</span><br><span class="line"># IF YOU HAVE NOT GENERATED INDIVIDUAL</span><br><span class="line"># CERTIFICATE&#x2F;KEY PAIRS FOR EACH CLIENT,</span><br><span class="line"># EACH HAVING ITS OWN UNIQUE &quot;COMMON NAME&quot;,</span><br><span class="line"># UNCOMMENT THIS LINE OUT.</span><br><span class="line">duplicate-cn</span><br><span class="line"></span><br><span class="line"># The keepalive directive causes ping-like</span><br><span class="line"># messages to be sent back and forth over</span><br><span class="line"># the link so that each side knows when</span><br><span class="line"># the other side has gone down.</span><br><span class="line"># Ping every 10 seconds, assume that remote</span><br><span class="line"># peer is down if no ping received during</span><br><span class="line"># a 120 second time period.</span><br><span class="line">keepalive 10 120</span><br><span class="line"></span><br><span class="line"># For extra security beyond that provided</span><br><span class="line"># by SSL&#x2F;TLS, create an &quot;HMAC firewall&quot;</span><br><span class="line"># to help block DoS attacks and UDP port flooding.</span><br><span class="line">#</span><br><span class="line"># Generate with:</span><br><span class="line">#   openvpn --genkey --secret ta.key</span><br><span class="line">#</span><br><span class="line"># The server and each client must have</span><br><span class="line"># a copy of this key.</span><br><span class="line"># The second parameter should be &#39;0&#39;</span><br><span class="line"># on the server and &#39;1&#39; on the clients.</span><br><span class="line">;tls-auth ta.key 0 # This file is secret</span><br><span class="line"></span><br><span class="line"># Select a cryptographic cipher.</span><br><span class="line"># This config item must be copied to</span><br><span class="line"># the client config file as well.</span><br><span class="line">;cipher BF-CBC        # Blowfish (default)</span><br><span class="line">;cipher AES-128-CBC   # AES</span><br><span class="line">;cipher DES-EDE3-CBC  # Triple-DES</span><br><span class="line"></span><br><span class="line"># Enable compression on the VPN link.</span><br><span class="line"># If you enable it here, you must also</span><br><span class="line"># enable it in the client config file.</span><br><span class="line">comp-lzo</span><br><span class="line"></span><br><span class="line"># The maximum number of concurrently connected</span><br><span class="line"># clients we want to allow.</span><br><span class="line">;max-clients 100</span><br><span class="line"></span><br><span class="line"># It&#39;s a good idea to reduce the OpenVPN</span><br><span class="line"># daemon&#39;s privileges after initialization.</span><br><span class="line">#</span><br><span class="line"># You can uncomment this out on</span><br><span class="line"># non-Windows systems.</span><br><span class="line">;user nobody</span><br><span class="line">;group nobody</span><br><span class="line"></span><br><span class="line"># The persist options will try to avoid</span><br><span class="line"># accessing certain resources on restart</span><br><span class="line"># that may no longer be accessible because</span><br><span class="line"># of the privilege downgrade.</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"># Output a short status file showing</span><br><span class="line"># current connections, truncated</span><br><span class="line"># and rewritten every minute.</span><br><span class="line">status openvpn-status.log</span><br><span class="line"></span><br><span class="line"># By default, log messages will go to the syslog (or</span><br><span class="line"># on Windows, if running as a service, they will go to</span><br><span class="line"># the &quot;\Program Files\OpenVPN\log&quot; directory).</span><br><span class="line"># Use log or log-append to override this default.</span><br><span class="line"># &quot;log&quot; will truncate the log file on OpenVPN startup,</span><br><span class="line"># while &quot;log-append&quot; will append to it.  Use one</span><br><span class="line"># or the other (but not both).</span><br><span class="line">log         openvpn.log</span><br><span class="line">;log-append  openvpn.log</span><br><span class="line"></span><br><span class="line"># Set the appropriate level of log</span><br><span class="line"># file verbosity.</span><br><span class="line">#</span><br><span class="line"># 0 is silent, except for fatal errors</span><br><span class="line"># 4 is reasonable for general usage</span><br><span class="line"># 5 and 6 can help to debug connection problems</span><br><span class="line"># 9 is extremely verbose</span><br><span class="line">verb 6</span><br><span class="line"></span><br><span class="line"># Silence repeating messages.  At most 20</span><br><span class="line"># sequential messages of the same message</span><br><span class="line"># category will be output to the log.</span><br><span class="line">;mute 20</span><br></pre></td></tr></table></figure>

<h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><p><a href="https://blog.sina.com.cn/s/blog_50d48c190101gkgs.html">https://blog.sina.com.cn/s/blog_50d48c190101gkgs.html</a></p>
<h2 id="添加密码验证"><a href="#添加密码验证" class="headerlink" title="添加密码验证"></a>添加密码验证</h2><p>服务端添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim server.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##########auth password##########</span><br><span class="line">script-security 3</span><br><span class="line">#client-cert-not-required</span><br><span class="line">auth-user-pass-verify &#x2F;etc&#x2F;openvpn&#x2F;checkpsw.sh via-env</span><br><span class="line">username-as-common-name</span><br></pre></td></tr></table></figure>

<p>客户端配置添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim client.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auth-user-pass</span><br></pre></td></tr></table></figure>

<h2 id="checkpsw-sh"><a href="#checkpsw-sh" class="headerlink" title="checkpsw.sh"></a>checkpsw.sh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">checkpsw.sh</span><br><span class="line">chmod +x checkpsw.sh</span><br><span class="line">vim psw-file</span><br><span class="line">service openvpn restart</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost openvpn]# cat psw-file</span><br><span class="line">test    123456</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">###########################################################</span><br><span class="line"># checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt;</span><br><span class="line">#</span><br><span class="line"># This script will authenticate OpenVPN users against</span><br><span class="line"># a plain text file. The passfile should simply contain</span><br><span class="line"># one row per user with the username first followed by</span><br><span class="line"># one or more space(s) or tab(s) and then the password.</span><br><span class="line"></span><br><span class="line">PASSFILE&#x3D;&quot;&#x2F;etc&#x2F;openvpn&#x2F;psw-file&quot;</span><br><span class="line">LOG_FILE&#x3D;&quot;&#x2F;var&#x2F;log&#x2F;openvpn-password.log&quot;</span><br><span class="line">TIME_STAMP&#x3D;&#96;date &quot;+%Y-%m-%d %T&quot;&#96;</span><br><span class="line"></span><br><span class="line">###########################################################</span><br><span class="line"></span><br><span class="line">if [ ! -r &quot;$&#123;PASSFILE&#125;&quot; ]; then</span><br><span class="line">  echo &quot;$&#123;TIME_STAMP&#125;: Could not open password file \&quot;$&#123;PASSFILE&#125;\&quot; for reading.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">CORRECT_PASSWORD&#x3D;&#96;awk &#39;!&#x2F;^;&#x2F;&amp;&amp;!&#x2F;^#&#x2F;&amp;&amp;$1&#x3D;&#x3D;&quot;&#39;$&#123;username&#125;&#39;&quot;&#123;print $2;exit&#125;&#39; $&#123;PASSFILE&#125;&#96;</span><br><span class="line"></span><br><span class="line">if [ &quot;$&#123;CORRECT_PASSWORD&#125;&quot; &#x3D; &quot;&quot; ]; then</span><br><span class="line">  echo &quot;$&#123;TIME_STAMP&#125;: User does not exist: username&#x3D;\&quot;$&#123;username&#125;\&quot;, password&#x3D;\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ &quot;$&#123;password&#125;&quot; &#x3D; &quot;$&#123;CORRECT_PASSWORD&#125;&quot; ]; then</span><br><span class="line">  echo &quot;$&#123;TIME_STAMP&#125;: Successful authentication: username&#x3D;\&quot;$&#123;username&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">  exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;$&#123;TIME_STAMP&#125;: Incorrect password: username&#x3D;\&quot;$&#123;username&#125;\&quot;, password&#x3D;\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">exit 1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>openVPN</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>solr5.3.1集群安装</title>
    <url>//2016/05/06/solr5.3.1-cluster-install.html</url>
    <content><![CDATA[<h1 id="solr5-3-1-集群安装"><a href="#solr5-3-1-集群安装" class="headerlink" title="solr5.3.1 集群安装"></a>solr5.3.1 集群安装</h1><!--
create time: 2016-05-06 16:57:35
Author: <段朝骞>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<p>资料来源<a href="https://wiki.apache.org/solr/">https://wiki.apache.org/solr/</a><br>下载地址<a href="https://archive.apache.org/dist/lucene/solr/5.3.1/">https://archive.apache.org/dist/lucene/solr/5.3.1/</a><br>安装 jdk</p>
<h2 id="使用-solr-脚本启动集群"><a href="#使用-solr-脚本启动集群" class="headerlink" title="使用 solr 脚本启动集群"></a>使用 solr 脚本启动集群</h2><ol>
<li><p>解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf solr-5.3.1.tgz</span><br><span class="line">mkdir -p &#x2F;opt&#x2F;usr&#x2F;solr</span><br><span class="line">mv solr-5.3.1 &#x2F;opt&#x2F;usr&#x2F;solr&#x2F;</span><br><span class="line">cd &#x2F;opt&#x2F;usr&#x2F;solr&#x2F;solr-5.3.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制 solr.xml 到 9010 9011 9012 9013 目录下</p>
<p>创建目录 9010 9011 9012 9013<br>mkdir 9010 9011 9012 9013</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp server&#x2F;solr&#x2F;solr.xml 9010&#x2F;</span><br><span class="line">cp server&#x2F;solr&#x2F;solr.xml 9011&#x2F;</span><br><span class="line">cp server&#x2F;solr&#x2F;solr.xml 9012&#x2F;</span><br><span class="line">cp server&#x2F;solr&#x2F;solr.xml 9013&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 solr</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;solr -c -p 9010 -s 9010 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br><span class="line">bin&#x2F;solr -c -p 9011 -s 9011 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br><span class="line">bin&#x2F;solr -c -p 9012 -s 9012 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br><span class="line">bin&#x2F;solr -c -p 9013 -s 9013 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启 solr</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;solr restart -c -p 9010 -s 9010 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br><span class="line"></span><br><span class="line">bin&#x2F;solr restart -c -p 9011 -s 9011 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br><span class="line"></span><br><span class="line">bin&#x2F;solr restart -c -p 9012 -s 9012 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br><span class="line"></span><br><span class="line">bin&#x2F;solr restart -c -p 9013 -s 9013 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止 solr</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;solr stop -p 9010</span><br><span class="line">bin&#x2F;solr stop -p 9011</span><br><span class="line">bin&#x2F;solr stop -p 9012</span><br><span class="line">bin&#x2F;solr stop -p 9013</span><br><span class="line">或者</span><br><span class="line">bin&#x2F;solr stop -all 停止所有</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看 solr 运行状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;solr status</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s1.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s1.png"></p>
</li>
</ol>
<h3 id="上传配置文件到-zookeeper"><a href="#上传配置文件到-zookeeper" class="headerlink" title="上传配置文件到 zookeeper"></a>上传配置文件到 zookeeper</h3><p><a href="https://cwiki.apache.org/confluence/display/solr/Using+ZooKeeper+to+Manage+Configuration+Files">https://cwiki.apache.org/confluence/display/solr/Using+ZooKeeper+to+Manage+Configuration+Files</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir production_conf</span><br><span class="line">cp -rf server&#x2F;solr&#x2F;configsets&#x2F;basic_configs&#x2F;conf&#x2F;* production_conf&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>上传整个目录</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server&#x2F;scripts&#x2F;cloud-scripts&#x2F;zkcli.sh -cmd upconfig -zkhost 127.0.0.1:2182 -confname production_conf -confdir production_conf&#x2F;</span><br></pre></td></tr></table></figure>

<p>–配置文件在/configs 目录下</p>
<p><strong>上传单个文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server&#x2F;scripts&#x2F;cloud-scripts&#x2F;zkcli.sh -cmd putfile &#x2F;configs&#x2F;production_conf&#x2F;schema.xml production_conf&#x2F;schema.xml -zkhost 127.0.0.1:2182</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s2.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s2.png"></p>
<h3 id="使用配置文件创建-collection"><a href="#使用配置文件创建-collection" class="headerlink" title="使用配置文件创建 collection"></a>使用配置文件创建 collection</h3><p>相关 api<br><a href="https://cwiki.apache.org/confluence/display/solr/Collections+API">https://cwiki.apache.org/confluence/display/solr/Collections+API</a></p>
<p>创建 collection</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.88.21:9010&#x2F;solr&#x2F;admin&#x2F;collections?action&#x3D;CREATE&amp;name&#x3D;production&amp;numShards&#x3D;2&amp;replicationFactor&#x3D;2&amp;maxShardsPerNode&#x3D;2&amp;collection.configName&#x3D;production_conf</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s3.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s3.png"></p>
<p><strong><em>当前 collection 使用的 config</em></strong></p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s4.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s4.png"></p>
<h3 id="Reload-Colletion-加载配置文件，不需要重启-solr"><a href="#Reload-Colletion-加载配置文件，不需要重启-solr" class="headerlink" title="Reload Colletion(加载配置文件，不需要重启 solr)"></a>Reload Colletion(加载配置文件，不需要重启 solr)</h3><p>/admin/collections?action=RELOAD&amp;name=production</p>
<h4 id="查看-Cluster-Status"><a href="#查看-Cluster-Status" class="headerlink" title="查看 Cluster Status"></a>查看 Cluster Status</h4><p>/admin/collections?action=CLUSTERSTATUS</p>
<h4 id="其它相关操作"><a href="#其它相关操作" class="headerlink" title="其它相关操作"></a>其它相关操作</h4><h5 id="添加删除-shard-replica-等"><a href="#添加删除-shard-replica-等" class="headerlink" title="添加删除 shard replica 等"></a>添加删除 shard replica 等</h5><p><a href="https://cwiki.apache.org/confluence/display/solr/Collections+API#CollectionsAPI-api18">https://cwiki.apache.org/confluence/display/solr/Collections+API#CollectionsAPI-api18</a></p>
<h5 id="配置-IK-分词器"><a href="#配置-IK-分词器" class="headerlink" title="配置 IK 分词器"></a>配置 IK 分词器</h5><p>复制 IK 分词器到 server/solr-webapp/webapp/WEB-INF/lib<br>ik 分词器是自己修改编译的</p>
<p>git 地址<br><a href="https://git.oschina.net/duanzhaoqian/IK-Analyzer-2012FF/tree/master">https://git.oschina.net/duanzhaoqian/IK-Analyzer-2012FF/tree/master</a><br>下载 dist 目录下的 IKAnalyzer-5.3.1.jar</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp ~&#x2F;soft&#x2F;IKAnalyzer-5.3.1.jar server&#x2F;solr-webapp&#x2F;webapp&#x2F;WEB-INF&#x2F;lib</span><br></pre></td></tr></table></figure>

<p>修改 schema.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim production_conf&#x2F;schema.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;fieldType name&#x3D;&quot;text_ik&quot; class&#x3D;&quot;solr.TextField&quot;&gt;</span><br><span class="line">    &lt;analyzer type&#x3D;&quot;query&quot; class&#x3D;&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot; useSmart&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">    &lt;analyzer type&#x3D;&quot;index&quot; class&#x3D;&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot; useSmart&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;fieldType&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s5.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s5.png"><br>上传修改完成的 schema.xml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server/scripts/cloud-scripts/zkcli.sh -cmd putfile /configs/production_conf/schema.xml production_conf/schema.xml -zkhost 127.0.0.1:2182</span><br></pre></td></tr></table></figure>

<h4 id="Reload-Collection"><a href="#Reload-Collection" class="headerlink" title="Reload Collection"></a>Reload Collection</h4><p>/admin/collections?action=RELOAD&amp;name=production</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s6.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s6.png"></p>
<p>找到这三个文件上传到 zookeeper 就好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp example/example-DIH/solr/solr/conf/admin-extra.* production_conf/</span><br></pre></td></tr></table></figure>

<p>上传到 zookeeper</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server/scripts/cloud-scripts/zkcli.sh -cmd upconfig -zkhost 127.0.0.1:2182 -confname production_conf -confdir production_conf/</span><br></pre></td></tr></table></figure>

<h2 id="重启-solr-集群"><a href="#重启-solr-集群" class="headerlink" title="重启 solr 集群"></a>重启 solr 集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/solr restart -c -p 9010 -s 9010 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br><span class="line">bin/solr restart -c -p 9011 -s 9011 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br><span class="line">bin/solr restart -c -p 9012 -s 9012 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br><span class="line">bin/solr restart -c -p 9013 -s 9013 -z 127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</span><br></pre></td></tr></table></figure>

<h2 id="solrCloud-运行在-HDFS"><a href="#solrCloud-运行在-HDFS" class="headerlink" title="solrCloud 运行在 HDFS"></a>solrCloud 运行在 HDFS</h2><p>资料<a href="https://cwiki.apache.org/confluence/display/solr/Running+Solr+on+HDFS">https://cwiki.apache.org/confluence/display/solr/Running+Solr+on+HDFS</a></p>
<ol>
<li><p>添加启动参数（必须）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dsolr.lock.type&#x3D;hdfs</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s7.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s7.png"><br>或者设置配置文件也行</p>
<p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s8.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s8.png"></p>
</li>
<li><p>设置 hadoop 配置文件路径（HA 模式必须配置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;str name&#x3D;&quot;solr.hdfs.confdir&quot;&gt;&#x2F;opt&#x2F;solr&#x2F;etc&#x2F;hadoop&lt;&#x2F;str&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 DirectoryFactory</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    	&lt;directoryFactory name&#x3D;&quot;DirectoryFactory&quot; class&#x3D;&quot;solr.HdfsDirectoryFactory&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;str name&#x3D;&quot;solr.hdfs.home&quot;&gt;hdfs:&#x2F;&#x2F;192.168.1.201:8020&#x2F;solr&lt;&#x2F;str&gt;</span><br><span class="line">&lt;bool name&#x3D;&quot;solr.hdfs.blockcache.enabled&quot;&gt;true&lt;&#x2F;bool&gt;</span><br><span class="line">&lt;int name&#x3D;&quot;solr.hdfs.blockcache.slab.count&quot;&gt;1&lt;&#x2F;int&gt;</span><br><span class="line">&lt;bool name&#x3D;&quot;solr.hdfs.blockcache.direct.memory.allocation&quot;&gt;true&lt;&#x2F;bool&gt;</span><br><span class="line">&lt;int name&#x3D;&quot;solr.hdfs.blockcache.blocksperbank&quot;&gt;16384&lt;&#x2F;int&gt;</span><br><span class="line">&lt;bool name&#x3D;&quot;solr.hdfs.blockcache.read.enabled&quot;&gt;true&lt;&#x2F;bool&gt;</span><br><span class="line">&lt;bool name&#x3D;&quot;solr.hdfs.nrtcachingdirectory.enable&quot;&gt;true&lt;&#x2F;bool&gt;</span><br><span class="line">&lt;int name&#x3D;&quot;solr.hdfs.nrtcachingdirectory.maxmergesizemb&quot;&gt;16&lt;&#x2F;int&gt;</span><br><span class="line">&lt;int name&#x3D;&quot;solr.hdfs.nrtcachingdirectory.maxcachedmb&quot;&gt;192&lt;&#x2F;int&gt;</span><br><span class="line">&lt;str name&#x3D;&quot;solr.hdfs.confdir&quot;&gt;&#x2F;opt&#x2F;solr&#x2F;etc&#x2F;hadoop&lt;&#x2F;str&gt;</span><br><span class="line">&lt;&#x2F;directoryFactory&gt;</span><br></pre></td></tr></table></figure></code></pre><p><img src="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s9.png" alt="https://raw.githubusercontent.com/duanzhaoqian/pic/master/solr/s9.png"></p>
</li>
</ol>
<h2 id="使用-tomcat-启动-solr-集群"><a href="#使用-tomcat-启动-solr-集群" class="headerlink" title="使用 tomcat 启动 solr 集群"></a>使用 tomcat 启动 solr 集群</h2><h2 id="solr-服务安装脚本"><a href="#solr-服务安装脚本" class="headerlink" title="solr 服务安装脚本"></a>solr 服务安装脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">install_solr_service.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line"># this work for additional information regarding copyright ownership.</span><br><span class="line"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="line"># the License.  You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     https:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line">if [[ $EUID -ne 0 ]]; then</span><br><span class="line">  echo -e &quot;\nERROR: This script must be run as root\n&quot; 1&gt;&amp;2</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">print_usage() &#123;</span><br><span class="line">  ERROR_MSG&#x3D;&quot;$1&quot;</span><br><span class="line"></span><br><span class="line">  if [ &quot;$ERROR_MSG&quot; !&#x3D; &quot;&quot; ]; then</span><br><span class="line">    echo -e &quot;\nERROR: $ERROR_MSG\n&quot; 1&gt;&amp;2</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;Usage: install_solr_service.sh path_to_solr_distribution_archive OPTIONS&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;  The first argument to the script must be a path to a Solr distribution archive, such as solr-5.0.0.tgz&quot;</span><br><span class="line">  echo &quot;    (only .tgz or .zip are supported formats for the archive)&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;  Supported OPTIONS include:&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;    -d     Directory for live &#x2F; writable Solr files, such as logs, pid files, and index data; defaults to &#x2F;var&#x2F;solr&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;    -i     Directory to extract the Solr installation archive; defaults to &#x2F;opt&#x2F;&quot;</span><br><span class="line">  echo &quot;             The specified path must exist prior to using this script.&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;    -p     Port Solr should bind to; default is 8983&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;    -s     Service name; defaults to solr&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;    -u     User to own the Solr files and run the Solr process as; defaults to solr&quot;</span><br><span class="line">  echo &quot;             This script will create the specified user account if it does not exist.&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot; NOTE: Must be run as the root user&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">&#125; # end print_usage</span><br><span class="line"></span><br><span class="line">if [ -f &quot;&#x2F;proc&#x2F;version&quot; ]; then</span><br><span class="line">  proc_version&#x3D;&#96;cat &#x2F;proc&#x2F;version&#96;</span><br><span class="line">else</span><br><span class="line">  proc_version&#x3D;&#96;uname -a&#96;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $proc_version &#x3D;&#x3D; *&quot;Debian&quot;* ]]; then</span><br><span class="line">  distro&#x3D;Debian</span><br><span class="line">elif [[ $proc_version &#x3D;&#x3D; *&quot;Red Hat&quot;* ]]; then</span><br><span class="line">  distro&#x3D;RedHat</span><br><span class="line">elif [[ $proc_version &#x3D;&#x3D; *&quot;Ubuntu&quot;* ]]; then</span><br><span class="line">  distro&#x3D;Ubuntu</span><br><span class="line">elif [[ $proc_version &#x3D;&#x3D; *&quot;SUSE&quot;* ]]; then</span><br><span class="line">  distro&#x3D;SUSE</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;\nERROR: Your Linux distribution ($proc_version) not supported by this script!\nYou&#39;ll need to setup Solr as a service manually using the documentation provided in the Solr Reference Guide.\n&quot; 1&gt;&amp;2</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$1&quot; ]; then</span><br><span class="line">  print_usage &quot;Must specify the path to the Solr installation archive, such as solr-5.0.0.tgz&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">SOLR_ARCHIVE&#x3D;$1</span><br><span class="line">if [ ! -f &quot;$SOLR_ARCHIVE&quot; ]; then</span><br><span class="line">  print_usage &quot;Specified Solr installation archive $SOLR_ARCHIVE not found!&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># strip off path info</span><br><span class="line">SOLR_INSTALL_FILE&#x3D;$&#123;SOLR_ARCHIVE##*&#x2F;&#125;</span><br><span class="line">is_tar&#x3D;true</span><br><span class="line">if [ $&#123;SOLR_INSTALL_FILE: -4&#125; &#x3D;&#x3D; &quot;.tgz&quot; ]; then</span><br><span class="line">  SOLR_DIR&#x3D;$&#123;SOLR_INSTALL_FILE%.tgz&#125;</span><br><span class="line">elif [ $&#123;SOLR_INSTALL_FILE: -4&#125; &#x3D;&#x3D; &quot;.zip&quot; ]; then</span><br><span class="line">  SOLR_DIR&#x3D;$&#123;SOLR_INSTALL_FILE%.zip&#125;</span><br><span class="line">  is_tar&#x3D;false</span><br><span class="line">else</span><br><span class="line">  print_usage &quot;Solr installation archive $SOLR_ARCHIVE is invalid, expected a .tgz or .zip file!&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $# -gt 1 ]; then</span><br><span class="line">  shift</span><br><span class="line">  while true; do</span><br><span class="line">    case $1 in</span><br><span class="line">        -i)</span><br><span class="line">            if [[ -z &quot;$2&quot; || &quot;$&#123;2:0:1&#125;&quot; &#x3D;&#x3D; &quot;-&quot; ]]; then</span><br><span class="line">              print_usage &quot;Directory path is required when using the $1 option!&quot;</span><br><span class="line">              exit 1</span><br><span class="line">            fi</span><br><span class="line">            SOLR_EXTRACT_DIR&#x3D;$2</span><br><span class="line">            shift 2</span><br><span class="line">        ;;</span><br><span class="line">        -d)</span><br><span class="line">            if [[ -z &quot;$2&quot; || &quot;$&#123;2:0:1&#125;&quot; &#x3D;&#x3D; &quot;-&quot; ]]; then</span><br><span class="line">              print_usage &quot;Directory path is required when using the $1 option!&quot;</span><br><span class="line">              exit 1</span><br><span class="line">            fi</span><br><span class="line">            SOLR_VAR_DIR&#x3D;&quot;$2&quot;</span><br><span class="line">            shift 2</span><br><span class="line">        ;;</span><br><span class="line">        -u)</span><br><span class="line">            if [[ -z &quot;$2&quot; || &quot;$&#123;2:0:1&#125;&quot; &#x3D;&#x3D; &quot;-&quot; ]]; then</span><br><span class="line">              print_usage &quot;Username is required when using the $1 option!&quot;</span><br><span class="line">              exit 1</span><br><span class="line">            fi</span><br><span class="line">            SOLR_USER&#x3D;&quot;$2&quot;</span><br><span class="line">            shift 2</span><br><span class="line">        ;;</span><br><span class="line">        -s)</span><br><span class="line">            if [[ -z &quot;$2&quot; || &quot;$&#123;2:0:1&#125;&quot; &#x3D;&#x3D; &quot;-&quot; ]]; then</span><br><span class="line">              print_usage &quot;Service name is required when using the $1 option!&quot;</span><br><span class="line">              exit 1</span><br><span class="line">            fi</span><br><span class="line">            SOLR_SERVICE&#x3D;&quot;$2&quot;</span><br><span class="line">            shift 2</span><br><span class="line">        ;;</span><br><span class="line">        -p)</span><br><span class="line">            if [[ -z &quot;$2&quot; || &quot;$&#123;2:0:1&#125;&quot; &#x3D;&#x3D; &quot;-&quot; ]]; then</span><br><span class="line">              print_usage &quot;Port is required when using the $1 option!&quot;</span><br><span class="line">              exit 1</span><br><span class="line">            fi</span><br><span class="line">            SOLR_PORT&#x3D;&quot;$2&quot;</span><br><span class="line">            shift 2</span><br><span class="line">        ;;</span><br><span class="line">        -help|-usage)</span><br><span class="line">            print_usage &quot;&quot;</span><br><span class="line">            exit 0</span><br><span class="line">        ;;</span><br><span class="line">        --)</span><br><span class="line">            shift</span><br><span class="line">            break</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">            if [ &quot;$1&quot; !&#x3D; &quot;&quot; ]; then</span><br><span class="line">              print_usage &quot;Unrecognized or misplaced argument: $1!&quot;</span><br><span class="line">              exit 1</span><br><span class="line">            else</span><br><span class="line">              break # out-of-args, stop looping</span><br><span class="line">            fi</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">  done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SOLR_EXTRACT_DIR&quot; ]; then</span><br><span class="line">  SOLR_EXTRACT_DIR&#x3D;&#x2F;opt</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ ! -d &quot;$SOLR_EXTRACT_DIR&quot; ]; then</span><br><span class="line">  print_usage &quot;Installation directory $SOLR_EXTRACT_DIR not found! Please create it before running this script.&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SOLR_SERVICE&quot; ]; then</span><br><span class="line">  SOLR_SERVICE&#x3D;solr</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SOLR_VAR_DIR&quot; ]; then</span><br><span class="line">  SOLR_VAR_DIR&#x3D;&#x2F;var&#x2F;$SOLR_SERVICE</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SOLR_USER&quot; ]; then</span><br><span class="line">  SOLR_USER&#x3D;solr</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$SOLR_PORT&quot; ]; then</span><br><span class="line">  SOLR_PORT&#x3D;8983</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -f &quot;&#x2F;etc&#x2F;init.d&#x2F;$SOLR_SERVICE&quot; ]; then</span><br><span class="line">  echo -e &quot;\nERROR: &#x2F;etc&#x2F;init.d&#x2F;$SOLR_SERVICE already exists! Perhaps Solr is already setup as a service on this host?\n&quot; 1&gt;&amp;2</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -e &quot;$SOLR_EXTRACT_DIR&#x2F;$SOLR_SERVICE&quot; ]; then</span><br><span class="line">  print_usage &quot;$SOLR_EXTRACT_DIR&#x2F;$SOLR_SERVICE already exists! Please move this directory &#x2F; link or choose a different service name using the -s option.&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">solr_uid&#x3D;&#96;id -u $SOLR_USER&#96;</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">  echo &quot;Creating new user: $SOLR_USER&quot;</span><br><span class="line">  if [ &quot;$distro&quot; &#x3D;&#x3D; &quot;RedHat&quot; ]; then</span><br><span class="line">    adduser $SOLR_USER</span><br><span class="line">  elif [ &quot;$distro&quot; &#x3D;&#x3D; &quot;SUSE&quot; ]; then</span><br><span class="line">    useradd -m $SOLR_USER</span><br><span class="line">  else</span><br><span class="line">    adduser --system --shell &#x2F;bin&#x2F;bash --group --disabled-password --home &#x2F;home&#x2F;$SOLR_USER $SOLR_USER</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">SOLR_INSTALL_DIR&#x3D;$SOLR_EXTRACT_DIR&#x2F;$SOLR_DIR</span><br><span class="line">if [ ! -d &quot;$SOLR_INSTALL_DIR&quot; ]; then</span><br><span class="line"></span><br><span class="line">  echo &quot;Extracting $SOLR_ARCHIVE to $SOLR_EXTRACT_DIR&quot;</span><br><span class="line"></span><br><span class="line">  if $is_tar ; then</span><br><span class="line">    tar zxf $SOLR_ARCHIVE -C $SOLR_EXTRACT_DIR</span><br><span class="line">  else</span><br><span class="line">    unzip -q $SOLR_ARCHIVE -d $SOLR_EXTRACT_DIR</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ ! -d &quot;$SOLR_INSTALL_DIR&quot; ]; then</span><br><span class="line">    echo -e &quot;\nERROR: Expected directory $SOLR_INSTALL_DIR not found after extracting $SOLR_ARCHIVE ... script fails.\n&quot; 1&gt;&amp;2</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  chown -R $SOLR_USER: $SOLR_INSTALL_DIR</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;\nWARNING: $SOLR_INSTALL_DIR already exists! Skipping extract ...\n&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># create a symlink for easier scripting</span><br><span class="line">ln -s $SOLR_INSTALL_DIR $SOLR_EXTRACT_DIR&#x2F;$SOLR_SERVICE</span><br><span class="line">chown -h $SOLR_USER: $SOLR_EXTRACT_DIR&#x2F;$SOLR_SERVICE</span><br><span class="line"></span><br><span class="line">mkdir -p $SOLR_VAR_DIR&#x2F;data</span><br><span class="line">mkdir -p $SOLR_VAR_DIR&#x2F;logs</span><br><span class="line">cp $SOLR_INSTALL_DIR&#x2F;server&#x2F;solr&#x2F;solr.xml $SOLR_VAR_DIR&#x2F;data&#x2F;</span><br><span class="line">cp $SOLR_INSTALL_DIR&#x2F;bin&#x2F;solr.in.sh $SOLR_VAR_DIR&#x2F;</span><br><span class="line">cp $SOLR_INSTALL_DIR&#x2F;server&#x2F;resources&#x2F;log4j.properties $SOLR_VAR_DIR&#x2F;log4j.properties</span><br><span class="line">sed_expr&#x3D;&quot;s#solr.log&#x3D;.*#solr.log&#x3D;\$&#123;solr.solr.home&#125;&#x2F;..&#x2F;logs#&quot;</span><br><span class="line">sed -i -e &quot;$sed_expr&quot; $SOLR_VAR_DIR&#x2F;log4j.properties</span><br><span class="line">chown -R $SOLR_USER: $SOLR_VAR_DIR</span><br><span class="line"></span><br><span class="line">echo &quot;SOLR_PID_DIR&#x3D;$SOLR_VAR_DIR</span><br><span class="line">SOLR_HOME&#x3D;$SOLR_VAR_DIR&#x2F;data</span><br><span class="line">LOG4J_PROPS&#x3D;$SOLR_VAR_DIR&#x2F;log4j.properties</span><br><span class="line">SOLR_LOGS_DIR&#x3D;$SOLR_VAR_DIR&#x2F;logs</span><br><span class="line">SOLR_PORT&#x3D;$SOLR_PORT</span><br><span class="line">&quot; &gt;&gt; $SOLR_VAR_DIR&#x2F;solr.in.sh</span><br><span class="line"></span><br><span class="line">echo &quot;Creating &#x2F;etc&#x2F;init.d&#x2F;$SOLR_SERVICE script ...&quot;</span><br><span class="line">cp $SOLR_INSTALL_DIR&#x2F;bin&#x2F;init.d&#x2F;solr &#x2F;etc&#x2F;init.d&#x2F;$SOLR_SERVICE</span><br><span class="line">chmod 744 &#x2F;etc&#x2F;init.d&#x2F;$SOLR_SERVICE</span><br><span class="line">chown root:root &#x2F;etc&#x2F;init.d&#x2F;$SOLR_SERVICE</span><br><span class="line"></span><br><span class="line"># do some basic variable substitution on the init.d script</span><br><span class="line">sed_expr1&#x3D;&quot;s#SOLR_INSTALL_DIR&#x3D;.*#SOLR_INSTALL_DIR&#x3D;$SOLR_EXTRACT_DIR&#x2F;$SOLR_SERVICE#&quot;</span><br><span class="line">sed_expr2&#x3D;&quot;s#SOLR_ENV&#x3D;.*#SOLR_ENV&#x3D;$SOLR_VAR_DIR&#x2F;solr.in.sh#&quot;</span><br><span class="line">sed_expr3&#x3D;&quot;s#RUNAS&#x3D;.*#RUNAS&#x3D;$SOLR_USER#&quot;</span><br><span class="line">sed_expr4&#x3D;&quot;s#Provides:.*#Provides: $SOLR_SERVICE#&quot;</span><br><span class="line">sed -i -e &quot;$sed_expr1&quot; -e &quot;$sed_expr2&quot; -e &quot;$sed_expr3&quot; -e &quot;$sed_expr4&quot; &#x2F;etc&#x2F;init.d&#x2F;$SOLR_SERVICE</span><br><span class="line"></span><br><span class="line">if [[ &quot;$distro&quot; &#x3D;&#x3D; &quot;RedHat&quot; || &quot;$distro&quot; &#x3D;&#x3D; &quot;SUSE&quot; ]]; then</span><br><span class="line">  chkconfig $SOLR_SERVICE on</span><br><span class="line">else</span><br><span class="line">  update-rc.d $SOLR_SERVICE defaults</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">service $SOLR_SERVICE start</span><br><span class="line">sleep 5</span><br><span class="line">service $SOLR_SERVICE status</span><br><span class="line"></span><br><span class="line">echo &quot;Service $SOLR_SERVICE installed.&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>solr</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>//2016/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html</url>
    <content><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><!--
create time: 2016-07-26 11:49:27
Author: <TODO: 请写上你的名字>

This file is created by Marboo<https://marboo.io> template file $MARBOO_HOME/.media/starts/default.md
本文件由 Marboo<https://marboo.io> 模板文件 $MARBOO_HOME/.media/starts/default.md 创建
-->

<h2 id="分组转发算法（路由器转发）"><a href="#分组转发算法（路由器转发）" class="headerlink" title="分组转发算法（路由器转发）"></a>分组转发算法（路由器转发）</h2><ol>
<li>从数据报的首部提取目的主机的 IP 地址 <em>D</em> ,得出目的网络 <em>N</em> 。</li>
<li>若 <em>N</em> 就是与此路由器直接相连的某个网络地址，则进行<strong>直接交付</strong>，不需要再经过其他的路由器，直接把数据报交付给目的主机（这里包括把目的主机地址 <em>D</em> 转换为具体的硬件地址，把数据报封装为 MAC 帧，再发送此帧）；否则就是间接交付，执行（3）。</li>
<li>若路由表中有目的地址为 <em>D</em> 的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行（4）。</li>
<li>若路由表中有到达网络 <em>N</em> 的路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行（5）。</li>
<li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行（6）。</li>
<li>报告转发分组出错。</li>
</ol>
<h2 id="划分子网的情况下，路由器转发分组的算法"><a href="#划分子网的情况下，路由器转发分组的算法" class="headerlink" title="划分子网的情况下，路由器转发分组的算法"></a>划分子网的情况下，路由器转发分组的算法</h2><ol>
<li>从收到的数据报的首部提取目的 IP 地址 <em>D</em>。</li>
<li>先判断是否为直接交付。对路由器直接相连的网络逐个进行检查：用各网络的子网掩码和 <em>D</em> 逐位相『与』（AND 操作），看结果是否和相应的网络地址匹配。若匹配，则把分组进行直接交付（当然还需要把 <em>D</em> 转换成物理地址，把数据报封装成帧发送出去），转发任务结束。否则就是间接交付，执行（3）。</li>
<li>若路由表中有目的地址为 <em>D</em> 的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行（4）。</li>
<li>对路由表中的每一行（目的网络地址，子网掩码，下一跳地址），用其中的子网掩码和 <em>D</em> 逐位相『与』（AND 操作），其结果为 <em>N</em> 。若 <em>N</em> 与该行的目的网络地址匹配，则把数据报传送给该行指明的下一跳路由器；否则，执行（5）。</li>
<li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行（6）</li>
<li>报告转发分组出错。</li>
</ol>
<h2 id="路由表建立更新"><a href="#路由表建立更新" class="headerlink" title="路由表建立更新"></a>路由表建立更新</h2><h2 id="A-类、B-类、C-类-IP-地址的默认子网掩码"><a href="#A-类、B-类、C-类-IP-地址的默认子网掩码" class="headerlink" title="A 类、B 类、C 类 IP 地址的默认子网掩码"></a>A 类、B 类、C 类 IP 地址的默认子网掩码</h2><table>
<thead>
<tr>
<th>类别</th>
<th>子网掩码</th>
</tr>
</thead>
<tbody><tr>
<td>A 类</td>
<td>255.0.0.0</td>
</tr>
<tr>
<td>B 类</td>
<td>255.255.0.0</td>
</tr>
<tr>
<td>C 类</td>
<td>255.255.255.0</td>
</tr>
</tbody></table>
<h2 id="B-类地址的子网划分选择（使用固定长度子网）"><a href="#B-类地址的子网划分选择（使用固定长度子网）" class="headerlink" title="B 类地址的子网划分选择（使用固定长度子网）"></a>B 类地址的子网划分选择（使用固定长度子网）</h2><table>
<thead>
<tr>
<th>子网号的位数</th>
<th>子网掩码</th>
<th>子网数</th>
<th>每个子网的主机数</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>255.255.192.0</td>
<td>2</td>
<td>16382</td>
</tr>
<tr>
<td>3</td>
<td>255.255.224.0</td>
<td>6</td>
<td>8190</td>
</tr>
<tr>
<td>4</td>
<td>255.255.240.0</td>
<td>14</td>
<td>4094</td>
</tr>
<tr>
<td>5</td>
<td>255.255.248.0</td>
<td>30</td>
<td>2046</td>
</tr>
<tr>
<td>6</td>
<td>255.255.252.0</td>
<td>62</td>
<td>1022</td>
</tr>
<tr>
<td>7</td>
<td>255.255.254.0</td>
<td>126</td>
<td>510</td>
</tr>
<tr>
<td>8</td>
<td>255.255.255.0</td>
<td>254</td>
<td>254</td>
</tr>
<tr>
<td>9</td>
<td>255.255.255.128</td>
<td>510</td>
<td>126</td>
</tr>
<tr>
<td>10</td>
<td>255.255.255.192</td>
<td>1022</td>
<td>62</td>
</tr>
<tr>
<td>11</td>
<td>255.255.255.224</td>
<td>2046</td>
<td>30</td>
</tr>
<tr>
<td>12</td>
<td>255.255.255.240</td>
<td>4094</td>
<td>14</td>
</tr>
<tr>
<td>13</td>
<td>255.255.255.248</td>
<td>8190</td>
<td>6</td>
</tr>
<tr>
<td>14</td>
<td>255.255.255.252</td>
<td>16382</td>
<td>2</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库原理</title>
    <url>//2016/05/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><p><a href="https://blog.jobbole.com/100349/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io">原文链接</a><br>数据量低时，O(1) 和 O(n^2)的区别可以忽略不计。比如，你有个算法要处理 2000 条元素。</p>
<p>O(1) 算法会消耗 1 次运算<br>O(log(n)) 算法会消耗 7 次运算<br>O(n) 算法会消耗 2000 次运算<br>O(n*log(n)) 算法会消耗 14,000 次运算<br>O(n^2) 算法会消耗 4,000,000 次运算<br>O(1) 和 O(n^2) 的区别似乎很大（4 百万）,但你最多损失 2 毫秒，只是一眨眼的功夫。确实，当今处理器每秒可处理上亿次的运算。这就是为什么性能和优化在很多 IT 项目中不是问题。</p>
<p>我说过，面临海量数据的时候，了解这个概念依然很重要。如果这一次算法需要处理 1,000,000 条元素（这对数据库来说也不算大）。</p>
<p>O(1) 算法会消耗 1 次运算<br>O(log(n)) 算法会消耗 14 次运算<br>O(n) 算法会消耗 1,000,000 次运算<br>O(n*log(n)) 算法会消耗 14,000,000 次运算<br>O(n^2) 算法会消耗 1,000,000,000,000 次运算<br>我没有具体算过，但我要说，用 O(n^2) 算法的话你有时间喝杯咖啡（甚至再续一杯！）。如果在数据量后面加个 0，那你就可以去睡大觉了。</p>
<p><strong>继续深入</strong></p>
<p>为了让你能明白</p>
<p>搜索一个好的哈希表会得到 O(1) 复杂度<br>搜索一个均衡的树会得到 O(log(n)) 复杂度<br>搜索一个阵列会得到 O(n) 复杂度<br>最好的排序算法具有 O(n*log(n)) 复杂度<br>糟糕的排序算法具有 O(n^2) 复杂度<br>注：在接下来的部分，我们将会研究这些算法和数据结构。</p>
<p>有多种类型的时间复杂度</p>
<p>一般情况场景<br>最佳情况场景<br>最差情况场景<br>时间复杂度经常处于最差情况场景。</p>
<p>这里我只探讨时间复杂度，但复杂度还包括：</p>
<p>算法的内存消耗<br>算法的磁盘 I/O 消耗<br>当然还有比 n^2 更糟糕的复杂度，比如：</p>
<p>n^4：差劲！我将要提到的一些算法具备这种复杂度。<br>3^n：更差劲！本文中间部分研究的一些算法中有一个具备这种复杂度（而且在很多数据库中还真的使用了）。<br>阶乘 n：你永远得不到结果，即便在少量数据的情况下。<br>n^n：如果你发展到这种复杂度了，那你应该问问自己 IT 是不是你的菜。<br>注：我并没有给出『大 O 表示法』的真正定义，只是利用这个概念。可以看看维基百科上的这篇文章。</p>
<h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><h1 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h1><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>图片压缩存储框架</title>
    <url>//2016/05/01/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86.html</url>
    <content><![CDATA[<h1 id="图片压缩存储"><a href="#图片压缩存储" class="headerlink" title="图片压缩存储"></a>图片压缩存储</h1><h2 id="im4j"><a href="#im4j" class="headerlink" title="im4j"></a>im4j</h2><h2 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>im4j</tag>
        <tag>fastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Hadoop自动化构建分析</title>
    <url>//2016/04/11/docker-hadoop%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<h1 id="Docker-Hadoop-自动化构建分析"><a href="#Docker-Hadoop-自动化构建分析" class="headerlink" title="Docker Hadoop 自动化构建分析"></a>Docker Hadoop 自动化构建分析</h1><p>docker hadoop 自动化</p>
<h2 id="使用软件"><a href="#使用软件" class="headerlink" title="使用软件"></a>使用软件</h2><p>serf dnsmasq</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="serf-注册中心"><a href="#serf-注册中心" class="headerlink" title="serf (注册中心)"></a>serf (注册中心)</h3><p>所有 slave join master 机器，处理 serf members 返回值到 <code>/etc/dnsmasq.d/0hosts</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@master:~# serf members</span><br><span class="line">slave1.kiwenlau.com  172.17.0.3:7946   alive</span><br><span class="line">slave6.kiwenlau.com  172.17.0.8:7946   alive</span><br><span class="line">slave4.kiwenlau.com  172.17.0.6:7946   alive</span><br><span class="line">slave9.kiwenlau.com  172.17.0.11:7946  alive</span><br><span class="line">slave5.kiwenlau.com  172.17.0.7:7946   alive</span><br><span class="line">slave8.kiwenlau.com  172.17.0.10:7946  alive</span><br><span class="line">master.kiwenlau.com  172.17.0.2:7946   alive</span><br><span class="line">slave2.kiwenlau.com  172.17.0.4:7946   alive</span><br><span class="line">slave3.kiwenlau.com  172.17.0.5:7946   alive</span><br><span class="line">slave7.kiwenlau.com  172.17.0.9:7946   alive</span><br></pre></td></tr></table></figure>

<h3 id="dnsmasq-dns-服务器"><a href="#dnsmasq-dns-服务器" class="headerlink" title="dnsmasq (dns 服务器)"></a>dnsmasq (dns 服务器)</h3><ol>
<li>配置/etc/resolv.conf 指向 dns 服务器 127.0.0.1</li>
<li>利用 serf 解析 members 数据添加 address 解析 hostname 和 ip 到 /etc/dnsmasq.d/0hosts 文件</li>
<li>使用 service dnsmqsq restart 重启 dnsmasq 使其生效</li>
</ol>
<h4 id="kiwenlau-hadoop-master-各命令位置及启动顺序"><a href="#kiwenlau-hadoop-master-各命令位置及启动顺序" class="headerlink" title="kiwenlau/hadoop-master 各命令位置及启动顺序"></a>kiwenlau/hadoop-master 各命令位置及启动顺序</h4><ol>
<li><p>使用 docker -w 控制工作目录在/root –dns 127.0.0.1 修改/etc/resolv.conf 文件 nameserver 127.0.0.1</p>
</li>
<li><p>/root/start-ssh-serf.sh 启动 ssh 服务（所有镜像使用同一个 rsa key 实现免密码登录）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 start-serf-agent.sh 并输出日志到 serf_log</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;serf&#x2F;start-serf-agent.sh &gt; serf_log &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 dnsmqsq 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service dnsmasq start</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出$JOIN_IP（docker 启动使用 -e JOIN_IP= 设置环境变量）到 join.json</p>
</li>
<li><p>启动 serf<br>（master 机器无 JOIN_IP 变量，各 slave 机器有 JOIN_IP 变量）</p>
</li>
</ol>
<h2 id="Docker-Hadoop-启动脚本备份"><a href="#Docker-Hadoop-启动脚本备份" class="headerlink" title="Docker Hadoop 启动脚本备份"></a>Docker Hadoop 启动脚本备份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run N slave containers</span></span><br><span class="line">N=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the defaut node number is 3</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> = 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        N=3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete old master container and start new master container</span></span><br><span class="line">sudo docker rm -f master &amp;&gt; /dev/null</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"start master container..."</span></span><br><span class="line">sudo docker run --net=none -p 50070:50070 -p 50010:50010 -p 9000:9000 -d -t --dns 127.0.0.1 -P --name master -h master.kiwenlau.com -w /root kiwenlau/hadoop-master:0.1.0 /bin/bash &amp;&gt; /dev/null</span><br><span class="line">MASTER_ID=$(docker inspect -f &#123;&#123;.Id&#125;&#125; master)</span><br><span class="line">MASTER_IP=192.168.88.180</span><br><span class="line">pipework br0 <span class="variable">$MASTER_ID</span> <span class="variable">$MASTER_IP</span>/24</span><br><span class="line">sudo docker <span class="built_in">exec</span> master /root/start-ssh-serf.sh</span><br><span class="line"><span class="comment"># get the IP address of master container</span></span><br><span class="line"><span class="comment"># FIRST_IP=$(docker inspect --format="&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;" master)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete old slave containers and start new slave containers</span></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -lt <span class="variable">$N</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        sudo docker rm -f slave<span class="variable">$i</span> &amp;&gt; /dev/null</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"start slave<span class="variable">$i</span> container..."</span></span><br><span class="line">        sudo docker run --net=none -d -t --dns 127.0.0.1 -P --name slave<span class="variable">$i</span> -h slave<span class="variable">$i</span>.kiwenlau.com -e JOIN_IP=<span class="variable">$MASTER_IP</span> kiwenlau/hadoop-slave:0.1.0 /bin/bash &amp;&gt; /dev/null</span><br><span class="line">        TEMP_NAME=slave<span class="variable">$i</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$TEMP_NAME</span></span><br><span class="line">        SLAVE_TMP_ID=$(docker inspect -f &#123;&#123;.Id&#125;&#125; <span class="variable">$TEMP_NAME</span>)</span><br><span class="line">        TEMP_IP=192.168.88.18<span class="variable">$i</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$TEMP_IP</span></span><br><span class="line">        pipework br0 <span class="variable">$SLAVE_TMP_ID</span> <span class="variable">$TEMP_IP</span>/24</span><br><span class="line">        sudo docker <span class="built_in">exec</span> <span class="variable">$TEMP_NAME</span> /root/start-ssh-serf.sh</span><br><span class="line">        ((i++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a new Bash session in the master container</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it master bash</span><br><span class="line"></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>database</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive配置</title>
    <url>//2016/04/11/hive%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<h1 id="Hive-配置"><a href="#Hive-配置" class="headerlink" title="Hive 配置"></a>Hive 配置</h1><p><strong>log aop 正则</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(.*?)\[(.*?)\].*?\[(.*?)\]\[(.*?)\] - (.*)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(.*?)[(.*?)].*?[(.*?)][(.*?)] - 方法名:(.*?),消耗时间:(.*?),当前用户:</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(.*?),传入参数:(.*?),返回数据:(.*)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(.*?)\\[(.*?)\\].*?\\[(.*?)\\]\\[(.*?)\\] - 方法名:(.*?),消耗时间:</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(.*?),当前用户:(.*?),传入参数:(.*?),返回数据:(.*)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE EXTERNAL TABLE IF NOT EXISTS loginfo(time STRING,level STRING,class STRING,tid STRING,method STRING,elapsed_time STRING,current_user STRING,in_parameter STRING,output_data STRING)</span><br><span class="line">ROW FORMAT SERDE &#39;org.apache.hadoop.hive.contrib.serde2.RegexSerDe&#39;</span><br><span class="line">WITH SERDEPROPERTIES (&quot;input.regex&quot; &#x3D; &quot;(.*?)\\[(.*?)\\].*?\\[(.*?)\\]\\[(.*?)\\] - 方法名:(.*?),消耗时间:(.*?),当前用户:(.*?),传入参数:(.*?),返回数据:(.*)&quot;,</span><br><span class="line">&quot;output.format.string&quot; &#x3D; &quot;%1$s %2$s %3$s %4$s %5$s %6$s %7$s %8$s %9$s&quot;</span><br><span class="line">)</span><br><span class="line">STORED AS TEXTFILE</span><br><span class="line">LOCATION &#39;&#x2F;flume&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE EXTERNAL TABLE IF NOT EXISTS loginfo(data STRING)</span><br><span class="line">ROW FORMAT SERDE &#39;org.apache.hadoop.hive.contrib.serde2.RegexSerDe&#39;</span><br><span class="line">WITH SERDEPROPERTIES (&quot;input.regex&quot; &#x3D; &quot;(.*)&quot;,</span><br><span class="line">&quot;output.format.string&quot; &#x3D; &quot;%1$s&quot;</span><br><span class="line">)</span><br><span class="line">STORED AS TEXTFILE</span><br><span class="line">LOCATION &#39;&#x2F;flume&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;root&#x2F;soft&#x2F;apache-hive-1.2.1-bin&#x2F;lib&#x2F;hive-contrib-1.2.1.jar</span><br></pre></td></tr></table></figure>

<p><strong>设置 jar 包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export HIVE_AUX_JARS_PATH&#x3D;&#x2F;root&#x2F;soft&#x2F;apache-hive-1.2.1-bin&#x2F;lib&#x2F;hive-contrib-1.2.1.jar</span><br></pre></td></tr></table></figure>

<p><strong>初始化 dbtype</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;schematool -initSchema -dbType derby</span><br></pre></td></tr></table></figure>

<p><strong>derby 模式执行顺序</strong></p>
<ol>
<li><p>解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-hive-1.2.1-bin.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd apache-hive-1.2.1-bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;schematool -initSchema -dbType derby</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制修改脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd conf&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp hive-env.sh.template hive-env.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim hive-env.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置 HADOOP_HOME 和 HIVE_HOME</p>
<p>export HADOOP_HOME=…</p>
<p>export HIVE_HOME=…</p>
</li>
<li><p>添加 jar 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export HIVE_AUX_JARS_PATH&#x3D;$HIVE_HOME&#x2F;lib&#x2F;hive-contrib-1.2.1.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 hive</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;hive</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装配置</title>
    <url>//2016/04/11/docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<h1 id="Docker-安装配置"><a href="#Docker-安装配置" class="headerlink" title="Docker 安装配置"></a>Docker 安装配置</h1><h2 id="Centos-6-x-安装"><a href="#Centos-6-x-安装" class="headerlink" title="Centos 6.x 安装"></a>Centos 6.x 安装</h2><p><a href="https://dl.fedoraproject.org/pub/epel/6Server/x86_64/docker-io-1.7.1-2.el6.x86_64.rpm">https://dl.fedoraproject.org/pub/epel/6Server/x86_64/docker-io-1.7.1-2.el6.x86_64.rpm</a></p>
<ol>
<li><p>安装 rpm</p>
<p>关闭 seLinux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i &#39;&#x2F;^SELINUX&#x3D;&#x2F;c\SELINUX&#x3D;disabled&#39; &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure>

<p>使用 sohu 源安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh https:&#x2F;&#x2F;mirrors.sohu.com&#x2F;fedora-epel&#x2F;6&#x2F;x86_64&#x2F;epel-release-6-8.noarch.rpm</span><br><span class="line">sed -i &#39;s&#x2F;^mirrorlist&#x3D;https&#x2F;mirrorlist&#x3D;http&#x2F;&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo</span><br></pre></td></tr></table></figure>

<p>或者使用 fedora-epel 安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6Server&#x2F;x86_64&#x2F;epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 docker-io</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y docker-io</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 docker 默认 IP 段</p>
<p>docker 启动时默认使用 172.17.x.x 作为容器的 ip 地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service docker stop</span><br><span class="line">ip link set docker0 down</span><br><span class="line">brctl delbr docker0</span><br></pre></td></tr></table></figure>

<p>修改/etc/sysconfig/docker 文件 添加-bip 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;sysconfig&#x2F;docker</span><br><span class="line">#</span><br><span class="line"># Other arguments to pass to the docker daemon process</span><br><span class="line"># These will be parsed by the sysv initscript and appended</span><br><span class="line"># to the arguments list passed to docker -d</span><br><span class="line"></span><br><span class="line">other_args&#x3D;-bip&#x3D;172.16.10.1&#x2F;24</span><br><span class="line">DOCKER_CERT_PATH&#x3D;&#x2F;etc&#x2F;docker</span><br><span class="line"></span><br><span class="line"># Resolves: rhbz#1176302 (docker issue #407)</span><br><span class="line">DOCKER_NOWARN_KERNEL_VERSION&#x3D;1</span><br><span class="line"></span><br><span class="line"># Location used for temporary files, such as those created by</span><br><span class="line"># # docker load and build operations. Default is &#x2F;var&#x2F;lib&#x2F;docker&#x2F;tmp</span><br><span class="line"># # Can be overriden by setting the following environment variable.</span><br><span class="line"># # DOCKER_TMPDIR&#x3D;&#x2F;var&#x2F;tmp</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Docker-网络配置"><a href="#Docker-网络配置" class="headerlink" title="Docker 网络配置"></a>Docker 网络配置</h2><p>Centos 默认配置文件位置 /etc/sysconfig/docker</p>
<p>docker 默认添加 docker0 网桥<br>修改 docker0 IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig docker0 172.12.10.1 netmask 255.255.255.0 up</span><br><span class="line"></span><br><span class="line">ip link set dev docker0 down 停用docker0</span><br><span class="line">ip link set dev docker0 up 启用docker0</span><br><span class="line"></span><br><span class="line">brctl delbr docker0 删除docker0(service docker restart 后自动创建)</span><br></pre></td></tr></table></figure>

<p><strong>添加 linux 网桥</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-br0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEVICE&#x3D;&quot;br0&quot;</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line">TYPE&#x3D;&quot;Bridge&quot;</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">IPADDR&#x3D;192.168.88.30</span><br><span class="line">NETMASK&#x3D;255.255.0.0</span><br><span class="line">GATEWAY&#x3D;192.168.88.1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEVICE&#x3D;eth0</span><br><span class="line">TYPE&#x3D;Ethernet</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line">NM_CONTROLLED&#x3D;no</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">BRIDGE&#x3D;&quot;br0&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p><strong>修改 Docker 默认配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;docker</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;sysconfig&#x2F;docker</span><br><span class="line">#</span><br><span class="line"># Other arguments to pass to the docker daemon process</span><br><span class="line"># These will be parsed by the sysv initscript and appended</span><br><span class="line"># to the arguments list passed to docker -d</span><br><span class="line"></span><br><span class="line">other_args&#x3D;-b&#x3D;br0</span><br><span class="line">#other_args&#x3D;</span><br><span class="line">DOCKER_CERT_PATH&#x3D;&#x2F;etc&#x2F;docker</span><br><span class="line"></span><br><span class="line"># Resolves: rhbz#1176302 (docker issue #407)</span><br><span class="line">DOCKER_NOWARN_KERNEL_VERSION&#x3D;1</span><br><span class="line"></span><br><span class="line"># Location used for temporary files, such as those created by</span><br><span class="line"># # docker load and build operations. Default is &#x2F;var&#x2F;lib&#x2F;docker&#x2F;tmp</span><br><span class="line"># # Can be overriden by setting the following environment variable.</span><br><span class="line"># # DOCKER_TMPDIR&#x3D;&#x2F;var&#x2F;tmp</span><br></pre></td></tr></table></figure>

<p><strong>service docker restart 重启使用设置生效（使用 br0 网桥）</strong></p>
<p>使用 brctl 命令<br><em>查看网桥</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brctl show</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost hadoop-cluster-docker]# brctl show</span><br><span class="line">bridge name	bridge id		STP enabled	interfaces</span><br><span class="line">br0		8000.82edf9468ced	no		eth0</span><br><span class="line">							veth1pl12684</span><br><span class="line">							veth1pl12880</span><br><span class="line">							veth1pl13068</span><br></pre></td></tr></table></figure>

<p><em>添加网桥</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brctl addbr</span><br></pre></td></tr></table></figure>

<p><em>删除网桥</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brctl delbr</span><br></pre></td></tr></table></figure>

<p>brctl addif <bridge> <device> add interface to bridge<br>brctl delif <bridge> <device> delete interface from bridge</device></bridge></device></bridge></p>
<p><em>设置网桥生效</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip link set dev br0 up</span><br></pre></td></tr></table></figure>

<p><em>设置网桥失效</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip link set dev docker0 down</span><br></pre></td></tr></table></figure>

<p><strong>ip addr 查看信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p>brctl 创建临时网桥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brctl addbr br1</span><br></pre></td></tr></table></figure>

<p>设置网桥地址并生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig br1 192.168.56.111 netmask 255.255.255.0 up</span><br></pre></td></tr></table></figure>

<p>将网卡设备 eth0 加入网桥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brctl addif br1 eth0</span><br></pre></td></tr></table></figure>

<p><strong>pipework 设置 docker 静态 ip</strong></p>
<p><em>docker 启动指定网络自定</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --net&#x3D;none</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;jpetazzo&#x2F;pipework&#x2F;archive&#x2F;master.zip</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip master.zip</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd pipework-master&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp pipework &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>

<p><em>pipework 网桥 容器 id IP/24@GATEWAY</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pipework br0 abc 192.168.56.200&#x2F;24@192.168.56.1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>通过supervisord管理celery守护进程</title>
    <url>//2016/02/04/supervisord-celery.html</url>
    <content><![CDATA[<h4 id="Why-Supervisord"><a href="#Why-Supervisord" class="headerlink" title="Why Supervisord"></a>Why Supervisord</h4><p>supervisord 是一个 python 写的守护进程管理工具，功能非常实用。</p>
<p>supervisord 的介绍可以看这篇文章。 在生成环境，celery worker 进程通常会以守护进程的方式运行，而 celery 命令行工具本身是不支持以 daemon 方式运行的，虽然可以 nohup celery worker &amp;的方式让 worker 进程在后台运行，但是当有多个 celery worker 进程时，这种方式管理起来就会变得很麻烦，想要 stop,restart 还得一个个去 kill pid。 supervisord 是 celery 官方推荐的 daemon 管理工具之一，可以对多个进程统一进行监控，管理。</p>
<h4 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h4><p>配置其实很简单，主要就是设置 supervisord.conf 和 celerd.conf 两个文件。celery 官方还提供了这两个文件的示例<br>下面是我这两个文件的设置，提供给正在弄这个的同学们参考。</p>
<p>supervisord.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file&#x3D;&#x2F;tmp&#x2F;supervisor.sock   ; path to your socket file</span><br><span class="line">;chmod&#x3D;0777</span><br><span class="line">;chown&#x3D;webscan:webscan</span><br><span class="line"></span><br><span class="line">[inet_http_server]</span><br><span class="line">port&#x3D;1222</span><br><span class="line">username&#x3D;sinasec</span><br><span class="line">password&#x3D;xxxxxxx</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile&#x3D;&#x2F;var&#x2F;log&#x2F;supervisord&#x2F;supervisord.log ; supervisord log file</span><br><span class="line">logfile_maxbytes&#x3D;50MB       ; maximum size of logfile before rotation</span><br><span class="line">logfile_backups&#x3D;10          ; number of backed up logfiles</span><br><span class="line">loglevel&#x3D;info               ; info, debug, warn, trace</span><br><span class="line">pidfile&#x3D;&#x2F;var&#x2F;run&#x2F;supervisord.pid ; pidfile location</span><br><span class="line">nodaemon&#x3D;false              ; run supervisord as a daemon</span><br><span class="line">minfds&#x3D;1024                 ; number of startup file descriptors</span><br><span class="line">minprocs&#x3D;200                ; number of process descriptors</span><br><span class="line">user&#x3D;root                  ; default user</span><br><span class="line">childlogdir&#x3D;&#x2F;var&#x2F;log&#x2F;supervisord&#x2F;            ; where child log files will live</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory &#x3D; supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl&#x3D;unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock ; use unix:&#x2F;&#x2F; schem for a unix sockets.</span><br><span class="line"></span><br><span class="line">; celery的监控工具flower自身也不支持以daemon方式运行，刚好也可以通过supervisord管理起来。</span><br><span class="line">[program:flower]</span><br><span class="line">command&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;flower --adress&#x3D;0.0.0.0 --port&#x3D;1221</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line">user&#x3D;webscan</span><br><span class="line">directory&#x3D;&#x2F;var&#x2F;webscan&#x2F;scanner&#x2F;</span><br><span class="line">stdout_logfile_maxbytes &#x3D; 50MB</span><br><span class="line">stdoiut_logfile_backups &#x3D; 20</span><br><span class="line">stdout_logfile &#x3D; &#x2F;var&#x2F;log&#x2F;flower.log</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line"></span><br><span class="line"># Uncomment this line for celeryd for Python</span><br><span class="line">files&#x3D;celeryd.conf</span><br><span class="line"></span><br><span class="line"># Uncomment this line for celeryd for Django.</span><br><span class="line">;files&#x3D;django&#x2F;celeryd.conf</span><br></pre></td></tr></table></figure>

<p>基本上就是官方那个配置文件，拿过来加上了 flower 的设置。</p>
<p>celerd.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:celery]</span><br><span class="line">command&#x3D;celery worker --hostname&#x3D;celery-%(process_num)d.webscan.com --loglevel&#x3D;INFO</span><br><span class="line"></span><br><span class="line">process_name &#x3D; %(program_name)s-%(process_num)d</span><br><span class="line"></span><br><span class="line">environment&#x3D;PYTHONPATH&#x3D;&#x2F;var&#x2F;webscan&#x2F;scanner&#x2F;</span><br><span class="line"></span><br><span class="line">directory&#x3D;&#x2F;var&#x2F;webscan&#x2F;scanner</span><br><span class="line">user&#x3D;webscan</span><br><span class="line">numprocs&#x3D;4</span><br><span class="line">stdout_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;celeryd.log</span><br><span class="line">stderr_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;celeryd.log</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line">startsecs&#x3D;10</span><br></pre></td></tr></table></figure>

<p>这个设置里比较不同的是 numprocs 我设置成了 4，既 celery worker 进程会同时起 4 个，分别命名 celery-0 ,celery-1。之所以要在一台机器上起 4 个 worker 进程，是因为我们的 celery pool 用的是 gevent，而为了充分利用多核，因此一台机器上需要起 4 个 worker。</p>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p>上面的设置都完成后先启动 supervisord</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisord -c &#x2F;etc&#x2F;supervisord.conf</span><br></pre></td></tr></table></figure>

<p>然后就可以通过 supervisorctl 对这些进程进行管理了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisorctl restart flower</span><br><span class="line">supervisorctl stop celery:celery-0</span><br></pre></td></tr></table></figure>

<p>浏览器访问<code>http://10.1.1.1:1222/</code> 还可以通过 web 对这些进程进行管理<br><img src="/images/supervisord_celery/celery-web.jpg" alt="celery"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>celery</tag>
        <tag>supervisord</tag>
      </tags>
  </entry>
  <entry>
    <title>关于git的ssh-key:解决本地多个ssh-key的问题</title>
    <url>//2016/01/03/git-ssh-key.html</url>
    <content><![CDATA[<p>在设置 github 的时候，官方的说明文档要求备份当前的 id_rsa，然后生成一份新的私钥用于 github 的登陆。如果真这样做，那么新的私钥是无法再继续登陆之前的机器的。这种方法有点暴力…<br>还好 ssh 可以让我们通过不同的私钥来登陆不同的域。</p>
<p>首先，在新增私钥的时候，通过指定不同的文件名来生成不同的私钥文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~&#x2F;.ssh&#x2F;id_rsa.work -C &quot;Key for Work&quot;</span><br><span class="line">ssh-keygen -t rsa -f ~&#x2F;.ssh&#x2F;id_rsa.github -C &quot;Key for GitHub&quot;</span><br></pre></td></tr></table></figure>

<p>新增 ssh 的配置文件，并修改权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch ~&#x2F;.ssh&#x2F;config</span><br><span class="line">chmod 600 ~&#x2F;.ssh&#x2F;config</span><br></pre></td></tr></table></figure>

<p>修改 config 文件的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host *.workdomain.com</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa.work</span><br><span class="line">    User lee</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa.github</span><br><span class="line">    User git</span><br></pre></td></tr></table></figure>

<p>这样在登陆的时候，ssh 会根据登陆不同的域来读取相应的私钥文件</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>key</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL查看表大小</title>
    <url>//2015/11/01/mysql-table-size.html</url>
    <content><![CDATA[<p>方法一：</p>
<p>在 MySQL 的 data 目录下查看，前提是 my.cnf 中配置了 innodb_file_per_table</p>
<p>方法二：</p>
<p>在 MySQL 查询中执行以下操作：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name,<span class="keyword">concat</span>(<span class="keyword">round</span>(data_length/<span class="number">1000</span>/<span class="number">1000</span>/<span class="number">1000</span>,<span class="number">2</span>),<span class="string">'GB'</span>) <span class="keyword">as</span> data_length_GB</span><br><span class="line"><span class="keyword">from</span> information_schema.tables <span class="keyword">ORDER</span> <span class="keyword">BY</span> data_length_GB;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>table</tag>
        <tag>大小</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop初识（从安装到查询)</title>
    <url>//2015/10/16/hadoop-ambari.html</url>
    <content><![CDATA[<p>花了一个星期，把 hadoop 整套算是搞通了，做这套 hadoop 是给 bi 做数据分析使用的，之前他们是用 MySQL cluster 来做数据查询，MySQL cluster 的好处是数据全部加载到内存中，查询会非常快，不足的地方是数据容量受限，内存多大，数据最多能放多少，所以我们新建设了一套 hadoop 集群。</p>
<p>搭建 hadoop 集群，我们使用的<a href="https://ambari.apache.org/">ambari</a>组建，这套组建能够让你自由的组织和扩容 hadoop 集群，官网地址为：<a href="https://ambari.apache.org/">https://ambari.apache.org/</a> ，我安装了最新版本 2.2.0。</p>
<p>安装过程网上很多，这里给出我的安装清单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Admin Name : admin</span><br><span class="line">Cluster Name : BI_hadoop</span><br><span class="line">Total Hosts : 5 (5 new)</span><br><span class="line">Repositories:</span><br><span class="line"> debian7 (HDP-2.3):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;debian7&#x2F;2.x&#x2F;updates&#x2F;2.3.4.0</span><br><span class="line"> debian7 (HDP-UTILS-1.1.0.20):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP-UTILS-1.1.0.20&#x2F;repos&#x2F;debian6</span><br><span class="line"> redhat6 (HDP-2.3):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;centos6&#x2F;2.x&#x2F;updates&#x2F;2.3.4.0</span><br><span class="line"> redhat6 (HDP-UTILS-1.1.0.20):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP-UTILS-1.1.0.20&#x2F;repos&#x2F;centos6</span><br><span class="line"> redhat7 (HDP-2.3):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;centos7&#x2F;2.x&#x2F;updates&#x2F;2.3.4.0</span><br><span class="line"> redhat7 (HDP-UTILS-1.1.0.20):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP-UTILS-1.1.0.20&#x2F;repos&#x2F;centos7</span><br><span class="line"> suse11 (HDP-2.3):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;suse11sp3&#x2F;2.x&#x2F;updates&#x2F;2.3.4.0</span><br><span class="line"> suse11 (HDP-UTILS-1.1.0.20):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP-UTILS-1.1.0.20&#x2F;repos&#x2F;suse11sp3</span><br><span class="line"> ubuntu12 (HDP-2.3):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;ubuntu12&#x2F;2.x&#x2F;updates&#x2F;2.3.4.0</span><br><span class="line"> ubuntu12 (HDP-UTILS-1.1.0.20):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP-UTILS-1.1.0.20&#x2F;repos&#x2F;ubuntu12</span><br><span class="line"> ubuntu14 (HDP-2.3):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP&#x2F;ubuntu14&#x2F;2.x&#x2F;updates&#x2F;2.3.4.0</span><br><span class="line"> ubuntu14 (HDP-UTILS-1.1.0.20):</span><br><span class="line">  https:&#x2F;&#x2F;public-repo-1.hortonworks.com&#x2F;HDP-UTILS-1.1.0.20&#x2F;repos&#x2F;ubuntu12</span><br><span class="line"></span><br><span class="line">Services:</span><br><span class="line">HDFS</span><br><span class="line">  DataNode : 3 hosts</span><br><span class="line">  NameNode :hadoop1</span><br><span class="line">  NFSGateway : 0</span><br><span class="line">  host SNameNode :hadoop1</span><br><span class="line">YARN + MapReduce2</span><br><span class="line">  App Timeline Server :hadoop1</span><br><span class="line">  NodeManager : 3 hosts</span><br><span class="line">  ResourceManager :hadoop1</span><br><span class="line">Tez</span><br><span class="line"> Clients : 3 hosts</span><br><span class="line">Hive</span><br><span class="line">  Metastore : hadoop1</span><br><span class="line">  HiveServer2 : ambari</span><br><span class="line">  WebHCat Server : ambari</span><br><span class="line">  Database : MySQL (New MySQL Database)</span><br><span class="line">Pig</span><br><span class="line">  Clients : 3 hosts</span><br><span class="line">Sqoop</span><br><span class="line">  Clients : 3 hosts</span><br><span class="line">ZooKeeper</span><br><span class="line">  Server : ambari</span><br><span class="line">Ambari Metrics</span><br><span class="line">  Metrics Collector : ambari</span><br><span class="line">Spark</span><br><span class="line">  History Server : ambari</span><br><span class="line">  Thrift Server : 0 host</span><br></pre></td></tr></table></figure>

<p>ambari 主页面如下：</p>
<p><img src="/images/hadoop_ambari/ambari.png" alt="amabri"></p>
<p>hadoop 的各项配置可以按照 ambari 给的参考配置设定，在 web 端即可实现 hive 接口查询数据：</p>
<p><img src="/images/hadoop_ambari/hive-web.png" alt="amabri"></p>
<p>数据录入我们是通过 MySQL 的 select into outfile 到 txt 文件，然后在 hive 中 load 到 hadoop 中，中间遇到一些坑，是 MySQL 一些字段的换行符，这个问题查看一下我的上一篇文章，在 hive 创建数据库表中，text 字段可以用 string 替代，*int(*)换成*int 即可。</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>ambari</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL去除字段中的换行和回车符</title>
    <url>//2015/10/15/mysql-n-r.html</url>
    <content><![CDATA[<p>在录入 MySQL 数据到 hive 中踩了一个大坑，由于中间保存的文本是 TXT 格式，导入完成后，行数总是对不上。</p>
<p>解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tablename <span class="keyword">SET</span> <span class="keyword">field</span> = <span class="keyword">REPLACE</span>(<span class="keyword">REPLACE</span>(<span class="keyword">field</span>, <span class="string">'\r'</span>, <span class="string">''</span>), <span class="string">'\n'</span>, <span class="string">''</span>);</span><br><span class="line"><span class="keyword">UPDATE</span> tablename <span class="keyword">SET</span> <span class="keyword">field</span> = <span class="keyword">REPLACE</span>(<span class="keyword">REPLACE</span>(<span class="keyword">field</span>, <span class="built_in">CHAR</span>(<span class="number">10</span>), <span class="string">''</span>), <span class="built_in">CHAR</span>(<span class="number">13</span>), <span class="string">''</span>);</span><br></pre></td></tr></table></figure>

<p>char(10): 换行符<br>char(13): 回车符</p>
<p>MySQL 的 trim 函数没办法去掉回车和换行，只能去掉多余的空格，可以用 MySQL 的 replace 函数，解决掉这个问题，具体解决办法如下：</p>
<p>假设想要审核数据库中内容为</p>
<p>“我爱你</p>
<p>”</p>
<p>的短信息(注意内容后有换行)通过(status 改变成 1)之前的 SQL 语句是不起作用的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="string">`tran`</span></span><br><span class="line"><span class="keyword">SET</span> <span class="string">`status`</span> = <span class="string">'1'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`msg`</span> = <span class="string">'我爱你'</span>;</span><br></pre></td></tr></table></figure>

<p>修改之后的语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="string">`tran`</span></span><br><span class="line"><span class="keyword">SET</span> <span class="string">`status`</span> = <span class="string">'1'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">trim</span>( <span class="keyword">replace</span>( <span class="string">`msg`</span>, <span class="string">'\r\n'</span>, <span class="string">' '</span> ) ) = <span class="string">'我爱你'</span>;</span><br></pre></td></tr></table></figure>

<p>把数据中的回车换行等替换成空格之后再 trim 掉，就达到目的了，虽然不是特别完美，但是由于没办法在用户录入的时候控制，所以只能出此下策，好在 MySQL 内置函数的效率还是很有保证的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="string">`tran`</span></span><br><span class="line"><span class="keyword">SET</span> <span class="string">`status`</span> = <span class="string">'1'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">trim</span>( <span class="keyword">trim</span>(</span><br><span class="line"><span class="keyword">BOTH</span> <span class="string">'\r\n'</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">content</span> ) ) = <span class="string">'我爱你'</span>;</span><br></pre></td></tr></table></figure>

<p>用了两个 trim，这样的好处是不会替换内容中间的换行和回车，只会处理头尾的空格换行回车，相当于 php 中 trim 函数的作用了。</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>换行符</tag>
        <tag>回车符</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync简单使用</title>
    <url>//2015/09/30/rsync.html</url>
    <content><![CDATA[<p>无用户名密码共享文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uid &#x3D; root</span><br><span class="line">gid &#x3D; root</span><br><span class="line">use chroot &#x3D; no</span><br><span class="line">max connections &#x3D; 100</span><br><span class="line">pid file &#x3D; &#x2F;var&#x2F;run&#x2F;rsyncd.pid</span><br><span class="line">lock file &#x3D; &#x2F;var&#x2F;run&#x2F;rsyncd.cock</span><br><span class="line">log file &#x3D; &#x2F;var&#x2F;log&#x2F;rsync.log</span><br><span class="line">list &#x3D; no</span><br><span class="line">strict modes &#x3D; no</span><br><span class="line"></span><br><span class="line">[rdata]</span><br><span class="line">path &#x3D; &#x2F;home&#x2F;rsync_fwg</span><br><span class="line">read only &#x3D; yes</span><br><span class="line">hosts allow &#x3D; 192.168.112.243,192.168.104.112,192.168.112.136</span><br></pre></td></tr></table></figure>

<p>使用密码文件进行用户认证共享：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Minimal configuration file for rsync daemon</span><br><span class="line"># See rsync(1) and rsyncd.conf(5) man pages for help</span><br><span class="line"></span><br><span class="line"># This line is required by the &#x2F;etc&#x2F;init.d&#x2F;rsyncd script</span><br><span class="line"># GLOBAL OPTIONS</span><br><span class="line">uid &#x3D; root</span><br><span class="line">gid &#x3D; root</span><br><span class="line">use chroot &#x3D; yes</span><br><span class="line">read only &#x3D; no</span><br><span class="line">max connections &#x3D; 50</span><br><span class="line"></span><br><span class="line">pid file &#x3D; &#x2F;var&#x2F;run&#x2F;rsyncd.pid</span><br><span class="line"></span><br><span class="line">secrets file &#x3D; &#x2F;etc&#x2F;rsyncd.secrets</span><br><span class="line">#lock file &#x3D; &#x2F;var&#x2F;run&#x2F;rsync.lock</span><br><span class="line"></span><br><span class="line">#This will give you a separate log file</span><br><span class="line">log file &#x3D; &#x2F;var&#x2F;log&#x2F;rsync.log</span><br><span class="line"></span><br><span class="line">timeout &#x3D; 600</span><br><span class="line"></span><br><span class="line"># MODULE OPTIONS</span><br><span class="line">[game]</span><br><span class="line">path &#x3D; &#x2F;home&#x2F;dir&#x2F;gameantispam&#x2F;pluguser</span><br><span class="line">#ignore errors</span><br><span class="line">auth users &#x3D; game</span><br><span class="line">#comment &#x3D; gameantispam</span><br></pre></td></tr></table></figure>

<p>/etc/rsyncd.secrets 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">game:game</span><br></pre></td></tr></table></figure>

<p>启动 rsync：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsync --daemon --config&#x3D;&#x2F;etc&#x2F;rsyncd.conf --port&#x3D;8723</span><br></pre></td></tr></table></figure>

<p>远程同步：</p>
<ul>
<li>无用户同步：```<br>rsync -avR –delete –port=8723 192.168.112.243::rdata/ ./</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 用户认证同步： &#96;&#96;&#96;</span><br><span class="line">rsync -avR --delete --port&#x3D;8723 dir@123.58.188.133::antiplug&#x2F; .&#x2F;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>rsync</tag>
        <tag>共享</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat配置优化参数</title>
    <url>//2015/09/12/tomcat-optimize.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;home&#x2F;opt&#x2F;tools&#x2F;apr&#x2F;lib</span><br><span class="line">JAVA_OPTS&#x3D;&quot;-server -XX:PermSize&#x3D;128M -XX:MaxPermSize&#x3D;256m -Xms1g -Xmx1g -Xmn500m -XX:SurvivorRatio&#x3D;65536 -XX:MaxTenuringThreshold&#x3D;0 -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction&#x3D;0 -Duser.timezone&#x3D;Asia&#x2F;Shanghai&quot;</span><br></pre></td></tr></table></figure>

<h4 id="Tomcat-启动行参数的优化"><a href="#Tomcat-启动行参数的优化" class="headerlink" title="Tomcat 启动行参数的优化"></a>Tomcat 启动行参数的优化</h4><p>Tomcat 的启动参数位于 tomcat 的安装目录\bin 目录下，如果你是 Linux 操作系统就是 catalina.sh 文件，如果你是 Windows 操作系统那么你需要改动的就是 catalina.bat 文件。打开该文件，一般该文件头部是一堆的由##包裹着的注释文字，找到注释文字的最后一段如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># $Id: catalina.sh 522797 2007-03-27 07:10:29Z fhanik $</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># OS specific support.  $var _must_ be set to either true or false.</span><br></pre></td></tr></table></figure>

<p>敲入一个回车，加入如下的参数</p>
<ul>
<li>Linux 系统中 tomcat 的启动参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_OPTS&#x3D;&quot;-server -Xms1400M -Xmx1400M -Xss512k -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:PermSize&#x3D;128M -XX:MaxPermSize&#x3D;256M -XX:+DisableExplicitGC -XX:MaxTenuringThreshold&#x3D;31 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC  -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes&#x3D;128m  -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -Djava.awt.headless&#x3D;true &quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>Windows 系统中 tomcat 的启动参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set JAVA_OPTS&#x3D;-server -Xms1400M -Xmx1400M -Xss512k -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:PermSize&#x3D;128M -XX:MaxPermSize&#x3D;256M -XX:+DisableExplicitGC -XX:MaxTenuringThreshold&#x3D;31 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC  -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes&#x3D;128m  -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -Djava.awt.headless&#x3D;true</span><br></pre></td></tr></table></figure>

<p>上面参数好多啊，可能有人写到现在都没见一个 tomcat 的启动命令里加了这么多参数，当然，这些参数只是我机器上的，不一定适合你，尤其是参数后的 value（值）是需要根据你自己的实际情况来设置的。</p>
<p>参数解释：</p>
<ul>
<li>-server</li>
</ul>
<p>我不管你什么理由，只要你的 tomcat 是运行在生产环境中的，这个参数必须给我加上</p>
<p>因为 tomcat 默认是以一种叫 java –client 的模式来运行的，server 即意味着你的 tomcat 是以真实的 production 的模式在运行的，这也就意味着你的 tomcat 以 server 模式运行时将拥有：更大、更高的并发处理能力，更快更强捷的 JVM 垃圾回收机制，可以获得更多的负载与吞吐量。。。更。。。还有更。。。</p>
<p>Y 给我记住啊，要不然这个-server 都不加，那是要打屁股了。</p>
<ul>
<li>-Xms–Xmx</li>
</ul>
<p>即 JVM 内存设置了，把 Xms 与 Xmx 两个值设成一样是最优的做法，有人说 Xms 为最小值，Xmx 为最大值不是挺好的，这样设置还比较人性化，科学化。人性？科学？你个头啊。</p>
<p>大家想一下这样的场景：</p>
<p>一个系统随着并发数越来越高，它的内存使用情况逐步上升，上升到最高点不能上升了，开始回落，你们不要认为这个回落就是好事情，由其是大起大落，在内存回落时它付出的代价是 CPU 高速开始运转进行垃圾回收，此时严重的甚至会造成你的系统出现“卡壳”就是你在好好的操作，突然网页像死在那边一样几秒甚至十几秒时间，因为 JVM 正在进行垃圾回收。</p>
<p>因此一开始我们就把这两个设成一样，使得 Tomcat 在启动时就为最大化参数充分利用系统的效率，这个道理和 jdbcconnection pool 里的 minpool size 与 maxpool size 的需要设成一个数量是一样的原理。</p>
<p>如何知道我的 JVM 能够使用最大值啊？拍脑袋？不行！</p>
<p>在设这个最大内存即 Xmx 值时请先打开一个命令行，键入如下的命令：</p>
<p><img src="/images/tomcat-optimize/1.jpg" alt="tomcat"></p>
<p>看，能够正常显示 JDK 的版本信息，说明，这个值你能够用。不是说 32 位系统下最高能够使用 2GB 内存吗？即：2048m，我们不防来试试</p>
<p><img src="/images/tomcat-optimize/2.jpg" alt="tomcat"></p>
<p>可以吗？不可以！不要说 2048m 呢，我们小一点，试试 1700m 如何</p>
<p><img src="/images/tomcat-optimize/3.jpg" alt="tomcat"></p>
<p>嘿嘿，连 1700m 都不可以，更不要说 2048m 了呢，2048m 只是一个理论数值，这样说吧我这边有几台机器，有的机器-Xmx1800 都没问题，有的机器最高只能到-Xmx1500m。</p>
<p>因此在设这个-Xms 与-Xmx 值时一定一定记得先这样测试一下，要不然直接加在 tomcat 启动命令行中你的 tomcat 就再也起不来了，要飞是飞不了，直接成了一只瘟猫了。</p>
<ul>
<li>–Xmn</li>
</ul>
<p>设置年轻代大小为 512m。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为 64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun 官方推荐配置为整个堆的 3/8。</p>
<ul>
<li>-Xss</li>
</ul>
<p>是指设定每个线程的堆栈大小。这个就要依据你的程序，看一个线程 大约需要占用多少内存，可能会有多少线程同时运行等。一般不易设置超过 1M，要不然容易出现 out ofmemory。</p>
<ul>
<li>-XX:+AggressiveOpts</li>
</ul>
<p>作用如其名（aggressive），启用这个参数，则每当 JDK 版本升级时，你的 JVM 都会使用最新加入的优化技术（如果有的话）</p>
<ul>
<li>-XX:+UseBiasedLocking</li>
</ul>
<p>启用一个优化了的线程锁，我们知道在我们的 appserver，每个 http 请求就是一个线程，有的请求短有的请求长，就会有请求排队的现象，甚至还会出现线程阻塞，这个优化了的线程锁使得你的 appserver 内对线程处理自动进行最优调配。</p>
<ul>
<li>-XX:PermSize=128M-XX:MaxPermSize=256M</li>
</ul>
<p>JVM 使用-XX:PermSize 设置非堆内存初始值，默认是物理内存的 1/64；</p>
<p>在数据量的很大的文件导出时，一定要把这两个值设置上，否则会出现内存溢出的错误。</p>
<p>由 XX:MaxPermSize 设置最大非堆内存的大小，默认是物理内存的 1/4。</p>
<p>那么，如果是物理内存 4GB，那么 64 分之一就是 64MB，这就是 PermSize 默认值，也就是永生代内存初始大小；</p>
<p>四分之一是 1024MB，这就是 MaxPermSize 默认大小。</p>
<ul>
<li>-XX:+DisableExplicitGC</li>
</ul>
<p>在程序代码中不允许有显示的调用”System.gc()”。看到过有两个极品工程中每次在 DAO 操作结束时手动调用 System.gc()一下，觉得这样做好像能够解决它们的 out ofmemory 问题一样，付出的代价就是系统响应时间严重降低，就和我在关于 Xms,Xmx 里的解释的原理一样，这样去调用 GC 导致系统的 JVM 大起大落，性能不到什么地方去哟！</p>
<ul>
<li>-XX:+UseParNewGC</li>
</ul>
<p>对年轻代采用多线程并行回收，这样收得快。</p>
<ul>
<li>-XX:+UseConcMarkSweepGC</li>
</ul>
<p>即 CMS gc，这一特性只有 jdk1.5 即后续版本才具有的功能，它使用的是 gc 估算触发和 heap 占用触发。</p>
<p>我们知道频频繁的 GC 会造面 JVM 的大起大落从而影响到系统的效率，因此使用了 CMS GC 后可以在 GC 次数增多的情况下，每次 GC 的响应时间却很短，比如说使用了 CMS GC 后经过 jprofiler 的观察，GC 被触发次数非常多，而每次 GC 耗时仅为几毫秒。</p>
<ul>
<li>-XX:MaxTenuringThreshold</li>
</ul>
<p>设置垃圾最大年龄。如果设置为 0 的话，则年轻代对象不经过 Survivor 区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在 Survivor 区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概率。</p>
<p>这个值的设置是根据本地的 jprofiler 监控后得到的一个理想的值，不能一概而论原搬照抄。</p>
<ul>
<li>-XX:+CMSParallelRemarkEnabled</li>
</ul>
<p>在使用 UseParNewGC 的情况下, 尽量减少 mark 的时间</p>
<ul>
<li>-XX:+UseCMSCompactAtFullCollection</li>
</ul>
<p>在使用 concurrent gc 的情况下, 防止 memoryfragmention, 对 live object 进行整理, 使 memory 碎片减少。</p>
<ul>
<li>-XX:LargePageSizeInBytes</li>
</ul>
<p>指定 Java heap 的分页页面大小</p>
<ul>
<li>-XX:+UseFastAccessorMethods</li>
</ul>
<p>get,set 方法转成本地代码</p>
<ul>
<li>-XX:+UseCMSInitiatingOccupancyOnly</li>
</ul>
<p>指示只有在 oldgeneration 在使用了初始化的比例后 concurrent collector 启动收集</p>
<ul>
<li>-XX:CMSInitiatingOccupancyFraction=70</li>
</ul>
<p>CMSInitiatingOccupancyFraction，这个参数设置有很大技巧，基本上满足(Xmx-Xmn)*(100- CMSInitiatingOccupancyFraction)/100&gt;=Xmn 就不会出现 promotion failed。在我的应用中 Xmx 是 6000，Xmn 是 512，那么 Xmx-Xmn 是 5488 兆，也就是年老代有 5488 兆，CMSInitiatingOccupancyFraction=90 说明年老代到 90%满的时候开始执行对年老代的并发垃圾回收（CMS），这时还 剩 10%的空间是 5488*10%=548 兆，所以即使 Xmn（也就是年轻代共 512 兆）里所有对象都搬到年老代里，548 兆的空间也足够了，所以只要满 足上面的公式，就不会出现垃圾回收时的 promotion failed；</p>
<p>因此这个参数的设置必须与 Xmn 关联在一起。</p>
<ul>
<li>-Djava.awt.headless=true</li>
</ul>
<p>这个参数一般我们都是放在最后使用的，这全参数的作用是这样的，有时我们会在我们的 J2EE 工程中使用一些图表工具如：jfreechart，用于在 web 网页输出 GIF/JPG 等流，在 winodws 环境下，一般我们的 app server 在输出图形时不会碰到什么问题，但是在 linux/unix 环境下经常会碰到一个 exception 导致你在 winodws 开发环境下图片显示的好好可是在 linux/unix 下却显示不出来，因此加上这个参数以免避这样的情况出现。</p>
<p>上述这样的配置，基本上可以达到：</p>
<ul>
<li><p>系统响应时间增快</p>
</li>
<li><p>JVM 回收速度增快同时又不影响系统的响应率</p>
</li>
<li><p>JVM 内存最大化利用</p>
</li>
<li><p>线程阻塞情况最小化</p>
</li>
</ul>
<h4 id="Tomcat-容器内的优化"><a href="#Tomcat-容器内的优化" class="headerlink" title="Tomcat 容器内的优化"></a>Tomcat 容器内的优化</h4><p>前面我们对 Tomcat 启动时的命令进行了优化，增加了系统的 JVM 可使用数、垃圾回收效率与线程阻塞情况、增加了系统响应效率等还有一个很重要的指标，我们没有去做优化，就是吞吐量。</p>
<p>还记得我们在第三天的学习中说的，这个系统本身可以处理 1000，你没有优化和配置导致它默认只能处理 25。因此下面我们来看 Tomcat 容器内的优化。</p>
<p>打开 tomcat 安装目录\conf\server.xml 文件，定位到这一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br></pre></td></tr></table></figure>

<p>这一行就是我们的 tomcat 容器性能参数设置的地方，它一般都会有一个默认值，这些默认值是远远不够我们的使用的，我们来看经过更改后的这一段的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">          URIEncoding&#x3D;&quot;UTF-8&quot;  minSpareThreads&#x3D;&quot;25&quot; maxSpareThreads&#x3D;&quot;75&quot;</span><br><span class="line">          enableLookups&#x3D;&quot;false&quot; disableUploadTimeout&#x3D;&quot;true&quot; connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">          acceptCount&#x3D;&quot;300&quot;  maxThreads&#x3D;&quot;300&quot; maxProcessors&#x3D;&quot;1000&quot; minProcessors&#x3D;&quot;5&quot;</span><br><span class="line">          useURIValidationHack&#x3D;&quot;false&quot;</span><br><span class="line">                                               compression&#x3D;&quot;on&quot; compressionMinSize&#x3D;&quot;2048&quot;</span><br><span class="line">                                               compressableMimeType&#x3D;&quot;text&#x2F;html,text&#x2F;xml,text&#x2F;javascript,text&#x2F;css,text&#x2F;plain&quot;</span><br><span class="line">               redirectPort&#x3D;&quot;8443&quot;</span><br><span class="line">&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>好大一陀唉。。。。。。</p>
<p>没关系，一个个来解释</p>
<ul>
<li>URIEncoding=”UTF-8”</li>
</ul>
<p>使得 tomcat 可以解析含有中文名的文件的 url，真方便，不像 apache 里还有搞个 mod_encoding，还要手工编译</p>
<ul>
<li>maxSpareThreads</li>
</ul>
<p>maxSpareThreads 的意思就是如果空闲状态的线程数多于设置的数目，则将这些线程中止，减少这个池中的线程总数。</p>
<ul>
<li>minSpareThreads</li>
</ul>
<p>最小备用线程数，tomcat 启动时的初始化的线程数。</p>
<ul>
<li>enableLookups</li>
</ul>
<p>这个功效和 Apache 中的 HostnameLookups 一样，设为关闭。</p>
<ul>
<li>connectionTimeout</li>
</ul>
<p>connectionTimeout 为网络连接超时时间毫秒数。</p>
<ul>
<li>maxThreads</li>
</ul>
<p>maxThreads Tomcat 使用线程来处理接收的每个请求。这个值表示 Tomcat 可创建的最大的线程数，即最大并发数。</p>
<p>*acceptCount</p>
<p>acceptCount 是当线程数达到 maxThreads 后，后续请求会被放入一个等待队列，这个 acceptCount 是这个队列的大小，如果这个队列也满了，就直接 refuse connection</p>
<ul>
<li>maxProcessors 与 minProcessors</li>
</ul>
<p>在 Java 中线程是程序运行时的路径，是在一个程序中与其它控制线程无关的、能够独立运行的代码段。它们共享相同的地址空间。多线程帮助程序员写出 CPU 最 大利用率的高效程序，使空闲时间保持最低，从而接受更多的请求。</p>
<p>通常 Windows 是 1000 个左右，Linux 是 2000 个左右。</p>
<ul>
<li>useURIValidationHack</li>
</ul>
<p>我们来看一下 tomcat 中的一段源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">security</span><br><span class="line">        if (connector.getUseURIValidationHack()) &#123;</span><br><span class="line">            String uri &#x3D; validate(request.getRequestURI());</span><br><span class="line">            if (uri &#x3D;&#x3D; null) &#123;</span><br><span class="line">                res.setStatus(400);</span><br><span class="line">                res.setMessage(&quot;Invalid URI&quot;);</span><br><span class="line">                throw new IOException(&quot;Invalid URI&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                req.requestURI().setString(uri);</span><br><span class="line">                &#x2F;&#x2F; Redoing the URI decoding</span><br><span class="line">                req.decodedURI().duplicate(req.requestURI());</span><br><span class="line">                req.getURLDecoder().convert(req.decodedURI(), true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到如果把 useURIValidationHack 设成”false”，可以减少它对一些 url 的不必要的检查从而减省开销。</p>
<ul>
<li>enableLookups=”false”</li>
</ul>
<p>为了消除 DNS 查询对性能的影响我们可以关闭 DNS 查询，方式是修改 server.xml 文件中的 enableLookups 参数值。</p>
<ul>
<li>disableUploadTimeout</li>
</ul>
<p>类似于 Apache 中的 keeyalive 一样</p>
<ul>
<li>给 Tomcat 配置 gzip 压缩(HTTP 压缩)功能</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compression&#x3D;&quot;on&quot; compressionMinSize&#x3D;&quot;2048&quot;</span><br><span class="line">compressableMimeType&#x3D;&quot;text&#x2F;html,text&#x2F;xml,text&#x2F;javascript,text&#x2F;css,text&#x2F;plain&quot;</span><br></pre></td></tr></table></figure>

<p>HTTP 压缩可以大大提高浏览网站的速度，它的原理是，在客户端请求网页后，从服务器端将网页文件压缩，再下载到客户端，由客户端的浏览器负责解压缩并浏览。相对于普通的浏览过程 HTML,CSS,Javascript , Text ，它可以节省 40%左右的流量。更为重要的是，它可以对动态生成的，包括 CGI、PHP , JSP , ASP , Servlet,SHTML 等输出的网页也能进行压缩，压缩效率惊人。</p>
<ol>
<li><p>compression=”on” 打开压缩功能</p>
</li>
<li><p>compressionMinSize=”2048” 启用压缩的输出内容大小，这里面默认为 2KB</p>
</li>
<li><p>noCompressionUserAgents=”gozilla, traviata” 对于以下的浏览器，不启用压缩</p>
</li>
<li><p>compressableMimeType=”text/html,text/xml”　压缩类型</p>
</li>
</ol>
<p>最后不要忘了把 8443 端口的地方也加上同样的配置，因为如果我们走 https 协议的话，我们将会用到 8443 端口这个段的配置，对吧？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--enable tomcat ssl--&gt;</span><br><span class="line">    &lt;Connector port&#x3D;&quot;8443&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">               URIEncoding&#x3D;&quot;UTF-8&quot;  minSpareThreads&#x3D;&quot;25&quot; maxSpareThreads&#x3D;&quot;75&quot;</span><br><span class="line">          enableLookups&#x3D;&quot;false&quot; disableUploadTimeout&#x3D;&quot;true&quot; connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">          acceptCount&#x3D;&quot;300&quot;  maxThreads&#x3D;&quot;300&quot; maxProcessors&#x3D;&quot;1000&quot; minProcessors&#x3D;&quot;5&quot;</span><br><span class="line">          useURIValidationHack&#x3D;&quot;false&quot;</span><br><span class="line">                    compression&#x3D;&quot;on&quot; compressionMinSize&#x3D;&quot;2048&quot;</span><br><span class="line">                    compressableMimeType&#x3D;&quot;text&#x2F;html,text&#x2F;xml,text&#x2F;javascript,text&#x2F;css,text&#x2F;plain&quot;</span><br><span class="line">                SSLEnabled&#x3D;&quot;true&quot;</span><br><span class="line">           scheme&#x3D;&quot;https&quot; secure&#x3D;&quot;true&quot;</span><br><span class="line">           clientAuth&#x3D;&quot;false&quot; sslProtocol&#x3D;&quot;TLS&quot;</span><br><span class="line">           keystoreFile&#x3D;&quot;d:&#x2F;tomcat2&#x2F;conf&#x2F;shnlap93.jks&quot; keystorePass&#x3D;&quot;aaaaaa&quot;</span><br><span class="line">      &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>好了，所有的 Tomcat 优化的地方都加上了。结合第三天中的 Apache 的性能优化，我们这个架构可以“飞奔”起来了，当然这边把有提及任何关于数据库优化的步骤，但仅凭这两步，我们的系统已经有了很大的提升。</p>
<p>举个真实的例子：上一个项目，经过 4 轮 performance testing，第一轮进行了问题的定位，第二轮就是进行了 apache+tomcat/weblogic 的优化，第三轮是做集群优化，第四轮是 sql 与 codes 的优化。</p>
<p>在到达第二轮时，我们的性能已经提升了多少倍呢？我们来看一个 loaderrunner 的截图吧：</p>
<p><img src="/images/tomcat-optimize/4.jpg" alt="tomcat"></p>
<p>左边第一列是第一轮没有经过任何调优的压力测试报告。</p>
<p>右边这一列是经过了 apache 优化，tomcat 优化后得到的压力测试报告。</p>
<p>大家看看，这就提高了多少倍？这还只是在没有改动代码的情况下得到的改善，现在明白了好好的调优一个 apache 和 tomcat 其实是多么的重要了？如果加上后面的代码、SQL 的调优、数据库的调优。。。。。。所以我在上一个工程中有单笔交易性能（无论是吞吐量、响应时间）提高了 80 倍这样的极端例子的存在。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat + memcached + nginx 实现session共享</title>
    <url>//2015/09/11/tomcat-nginx-memcached-session.html</url>
    <content><![CDATA[<p>这里重点强调如何实现 linux 服务器上 服务器 session 共享，软件安装不再赘述。</p>
<p>首先我们需要对 cookie 和 session 的工作机制非常了解，如果不了解其中的原理，就算配置成功，也毫无意义。换了工作换了环境，重新配置起来仍然需要重头来过，事倍功半。</p>
<p>cookie 是怎样工作的？</p>
<p>例如，我们创建了一个名字为 login 的 Cookie 来包含访问者的信息，创建 Cookie 时，服务器端的 Header 如下面所示，这里假设访问者的注册名是“Michael Jordan”，同时还对所创建的 Cookie 的属性如 path、domain、expires 等进行了指定。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-Cookie:login&#x3D;Michael Jordan;path&#x3D;&#x2F;;domain&#x3D;msn.com;</span><br><span class="line">expires&#x3D;Monday,01-Mar-99 00:00:01 GMT</span><br></pre></td></tr></table></figure>

<p>上面这个 Header 会自动在浏览器端计算机的 Cookie 文件中添加一条记录。浏览器将变量名为“login”的 Cookie 赋值为“Michael Jordon”。注意，在实际传递过程中这个 Cookie 的值是经过了 URLEncode 方法的 URL 编码操作的。</p>
<p>这个含有 Cookie 值的 HTTP Header 被保存到浏览器的 Cookie 文件后，Header 就通知浏览器将 Cookie 通过请求以忽略路径的方式返回到服务器，完成浏览器的认证操作。</p>
<p>此外，我们使用了 Cookie 的一些属性来限定该 Cookie 的使用。例如 Domain 属性能够在浏览器端对 Cookie 发送进行限定，具体到上面的例子，该 Cookie 只能传到指定的服务器上，而决不会跑到其他的如 <a href="http://www.hp.com">www.hp.com</a> 的 Web 站点上去。Expires 属性则指定了该 Cookie 保存的时间期限，例如上面的 Cookie 在浏览器上只保存到 1999 年 3 月 1 日 1 秒。</p>
<p>当然，如果浏览器上 Cookie 太多，超过了系统所允许的范围，浏览器将自动对它进行删除。至于属性 Path，用来指定 Cookie 将被发送到服务器的哪一个目录路径下。</p>
<p>说明：浏览器创建了一个 Cookie 后，对于每一个针对该网站的请求，都会在 Header 中带着这个 Cookie；不过，对于其他网站的请求 Cookie 是绝对不会跟着发送的。而且浏览器会这样一直发送，直到 Cookie 过期为止。</p>
<h5 id="session-又是如何工作的？"><a href="#session-又是如何工作的？" class="headerlink" title="session 又是如何工作的？"></a>session 又是如何工作的？</h5><p>由于 http 是无状态的协议，你访问了页面 A，然后在访问 B，http 无法确定这 2 个访问来自一个人，因此要用 cookie 或 session 来跟踪用户，根据授权和用户身份来显示不同的页面。比如用户 A 登陆了，那么能看到自己的个人信息，而 B 没登陆，无法看到个人信息。还有 A 可能在购物，把商品放入购物车，此时 B 也有这个过程，你无法确定 A，B 的身份和购物信息，所以需要一个 session ID 来维持这个过程。</p>
<p>cookie 是服务器发给客户端，并且保持在客户端的一个文件，里面包含了用户的访问信息（账户密码等），可以手动删除或设置有效期，在下次访问的时候，会返给服务器。注意：cookie 可以被禁用，所以要想其他办法，这就是 session。比如：你去商场购物，商场会给你办一张会员卡，下次你来出示该卡，会有打折优惠。该卡可以自己保存（cookie），或是商场代为保管，由于会员太多，个人需要保存卡号信息（session ID)。</p>
<h5 id="为什么要持久化-SESSION？"><a href="#为什么要持久化-SESSION？" class="headerlink" title="为什么要持久化 SESSION？"></a>为什么要持久化 SESSION？</h5><p>在客户端每个用户的 Session 对象存在 Servlet 容器中，如果 Tomcat 服务器重起/当机的话该 session 就会丢失，而客户端的操作应为 session 的丢失而造成数据丢失，而且当前用户访问量巨大，每个用户的 Session 里存放大量的数据的话，那么就很占用服务器大量的内存，从而是服务器的性能受到影响。</p>
<h5 id="番外篇"><a href="#番外篇" class="headerlink" title="番外篇"></a>番外篇</h5><p>session 是非常重要的数据，非常宝贵。但是 session 同样也是缺憾满身，在大规模集群服务器中，最好使用其他替代方案。比如淘宝网。</p>
<h5 id="对-nginx-的了解？"><a href="#对-nginx-的了解？" class="headerlink" title="对 nginx 的了解？"></a>对 nginx 的了解？</h5><p>nginx 是一款非常优秀的服务器软件，其优秀程度这里不过多赘述。</p>
<h4 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h4><p>session 实现共享的方法分为多种</p>
<p>对于 WEB 应用集群的技术实现而言，最大的难点就是如何能在集群中的多个节点之间保持数据的一致性，会话（Session）信息是这些数据中最重要的一块。要实现这一点，大体上有两种方式，一种是把所有 Session 数据放到一台服务器上或者数据库中，集群中的所有节点通过访问这台 Session 服务器来获取数据；另一种就是在集群中的所有节点间进行 Session 数据的同步拷贝，任何一个节点均保存了所有的 Session 数据。</p>
<h6 id="一、使用-tomcat-自身集群特性完成-session-共享"><a href="#一、使用-tomcat-自身集群特性完成-session-共享" class="headerlink" title="一、使用 tomcat 自身集群特性完成 session 共享"></a>一、使用 tomcat 自身集群特性完成 session 共享</h6><p>这种方式是使用 tomcat 自身广播的特点来进行 session 同步拷贝，优点是简单，缺点是一旦 tomcat 集群数量过多，很容易引发广播风暴。</p>
<p>详细配置 请参照 博客 <a href="https://zyycaesar.iteye.com/blog/296606">https://zyycaesar.iteye.com/blog/296606</a></p>
<p>粗略配置如下 tomcat/server.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Cluster className&#x3D;&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;</span><br><span class="line">        channelSendOptions&#x3D;&quot;8&quot;&gt;</span><br><span class="line">  &lt;Manager className&#x3D;&quot;org.apache.catalina.ha.session.DeltaManager&quot;</span><br><span class="line">    expireSessionsOnShutdown&#x3D;&quot;false&quot;</span><br><span class="line">    notifyListenersOnReplication&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">  &lt;Channel className&#x3D;&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&gt;</span><br><span class="line">     &lt;Membership className&#x3D;&quot;org.apache.catalina.tribes.membership.McastService&quot;</span><br><span class="line">      address&#x3D;&quot;224.0.0.0&quot;</span><br><span class="line">      port&#x3D;&quot;45564&quot;</span><br><span class="line">      frequency&#x3D;&quot;500&quot;</span><br><span class="line">      dropTime&#x3D;&quot;3000&quot;&#x2F;&gt;</span><br><span class="line">     &lt;Receiver className&#x3D;&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;</span><br><span class="line">       address&#x3D;&quot;192.168.0.223&quot;</span><br><span class="line">       port&#x3D;&quot;4001&quot;</span><br><span class="line">       autoBind&#x3D;&quot;100&quot;</span><br><span class="line">       selectorTimeout&#x3D;&quot;5000&quot;</span><br><span class="line">       maxThreads&#x3D;&quot;6&quot;&#x2F;&gt;</span><br><span class="line">     &lt;Sender className&#x3D;&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&gt;</span><br><span class="line">  &lt;Transport className&#x3D;&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;&#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;Sender&gt;</span><br><span class="line">     &lt;Interceptor className&#x3D;&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;&#x2F;&gt;</span><br><span class="line">     &lt;Interceptor className&#x3D;&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Channel&gt;</span><br><span class="line">  &lt;Valve className&#x3D;&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot;</span><br><span class="line">  filter&#x3D;&quot;.*\.gif;.*\.js;.*\.jpg;.*\.png;.*\.htm;.*\.html;.*\.css;.*\.txt;&quot;&#x2F;&gt;</span><br><span class="line">  &lt;Valve className&#x3D;&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;&#x2F;&gt;</span><br><span class="line">  &lt;ClusterListener className&#x3D;&quot;org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener&quot;&#x2F;&gt;</span><br><span class="line">  &lt;ClusterListener className&#x3D;&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;Cluster&gt;</span><br></pre></td></tr></table></figure>

<h6 id="二、使用数据库持久化-session"><a href="#二、使用数据库持久化-session" class="headerlink" title="二、使用数据库持久化 session"></a>二、使用数据库持久化 session</h6><p>这里又分为物理数据库和内存数据库物理数据库备份 session，由于其性能的原因，这里不作介绍。</p>
<p>内存数据库 可以暂分为 redis 和 memcached</p>
<p>这里我们只介绍 memcached，多个 tomcat 各种序列化策略配置如下：</p>
<ul>
<li>java 默认序列化 tomcat 配置</li>
</ul>
<p>conf/context.xml 添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Manager className&#x3D;&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">     memcachedNodes&#x3D;&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;</span><br><span class="line">  lockingMode&#x3D;&quot;auto&quot;</span><br><span class="line">  sticky&#x3D;&quot;false&quot;</span><br><span class="line">  requestUriIgnorePattern&#x3D; &quot;.*\.(png|gif|jpg|css|js)$&quot;</span><br><span class="line">  sessionBackupAsync&#x3D; &quot;false&quot;</span><br><span class="line">  sessionBackupTimeout&#x3D; &quot;100&quot;</span><br><span class="line">  transcoderFactoryClass&#x3D;&quot;de.javakaffee.web.msm.JavaSerializationTranscoderFactory&quot;</span><br><span class="line">    &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>lib 增加 jar 包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spymemcached-2.10.3.jar</span><br><span class="line">memcached-session-manager-1.7.0.jar</span><br><span class="line">memcached-session-manager-tc7-1.7.0.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>javolution 序列化 tomcat 配置</li>
</ul>
<p>conf/context.xml 添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Manager className&#x3D;&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">     memcachedNodes&#x3D;&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;</span><br><span class="line">  lockingMode&#x3D;&quot;auto&quot;</span><br><span class="line">  sticky&#x3D;&quot;false&quot;</span><br><span class="line">  requestUriIgnorePattern&#x3D; &quot;.*\.(png|gif|jpg|css|js)$&quot;</span><br><span class="line">  sessionBackupAsync&#x3D; &quot;false&quot;</span><br><span class="line">  sessionBackupTimeout&#x3D; &quot;100&quot;</span><br><span class="line">  copyCollectionsForSerialization&#x3D;&quot;true&quot;</span><br><span class="line">  transcoderFactoryClass&#x3D;&quot;de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory&quot;</span><br><span class="line">    &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>lib 增加 jar 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msm-javolution-serializer-cglib-1.3.0.jar</span><br><span class="line">msm-javolution-serializer-jodatime-1.3.0.jar</span><br><span class="line">spymemcached-2.10.3.jar</span><br><span class="line">javolution-5.4.3.1.jar</span><br><span class="line">msm-javolution-serializer-1.7.0.jar</span><br><span class="line">memcached-session-manager-1.7.0.jar</span><br><span class="line">memcached-session-manager-tc7-1.7.0.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>xstream 序列化 tomcat 配置</li>
</ul>
<p>conf/context.xml 添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Manager className&#x3D;&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">     memcachedNodes&#x3D;&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;</span><br><span class="line">  lockingMode&#x3D;&quot;auto&quot;</span><br><span class="line">  sticky&#x3D;&quot;false&quot;</span><br><span class="line">  requestUriIgnorePattern&#x3D; &quot;.*\.(png|gif|jpg|css|js)$&quot;</span><br><span class="line">  sessionBackupAsync&#x3D; &quot;false&quot;</span><br><span class="line">  sessionBackupTimeout&#x3D; &quot;100&quot;</span><br><span class="line">  transcoderFactoryClass&#x3D;&quot;de.javakaffee.web.msm.serializer.xstream.XStreamTranscoderFactory&quot;</span><br><span class="line">    &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>lib 增加 jar 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlpull-1.1.3.1.jar</span><br><span class="line">xpp3_min-1.1.4c.jar</span><br><span class="line">xstream-1.4.6.jar</span><br><span class="line">msm-xstream-serializer-1.7.0.jar</span><br><span class="line">spymemcached-2.10.3.jar</span><br><span class="line">memcached-session-manager-1.7.0.jar</span><br><span class="line">memcached-session-manager-tc7-1.7.0.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>flexjson 序列化 tomcat 配置</li>
</ul>
<p>conf/context.xml 添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Manager className&#x3D;&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">     memcachedNodes&#x3D;&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;</span><br><span class="line">  lockingMode&#x3D;&quot;auto&quot;</span><br><span class="line">  sticky&#x3D;&quot;false&quot;</span><br><span class="line">  requestUriIgnorePattern&#x3D; &quot;.*\.(png|gif|jpg|css|js)$&quot;</span><br><span class="line">  sessionBackupAsync&#x3D; &quot;false&quot;</span><br><span class="line">  sessionBackupTimeout&#x3D; &quot;100&quot;</span><br><span class="line">  transcoderFactoryClass&#x3D;&quot;de.javakaffee.web.msm.serializer.json.JSONTranscoderFactory&quot;</span><br><span class="line">    &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>lib 增加 jar 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flexjson-3.1.jar</span><br><span class="line">msm-flexjson-serializer-1.7.0.jar</span><br><span class="line">spymemcached-2.10.3.jar</span><br><span class="line">memcached-session-manager-1.7.0.jar</span><br><span class="line">memcached-session-manager-tc7-1.7.0.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>kryo 序列化 tomcat 配置</li>
</ul>
<p>conf/context.xml 添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Manager className&#x3D;&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">     memcachedNodes&#x3D;&quot;n1:192.168.100.208:11211 n2:192.168.100.208:11311&quot;</span><br><span class="line">  lockingMode&#x3D;&quot;auto&quot;</span><br><span class="line">  sticky&#x3D;&quot;false&quot;</span><br><span class="line">  requestUriIgnorePattern&#x3D; &quot;.*\.(png|gif|jpg|css|js)$&quot;</span><br><span class="line">  sessionBackupAsync&#x3D; &quot;false&quot;</span><br><span class="line">  sessionBackupTimeout&#x3D; &quot;100&quot;</span><br><span class="line">  copyCollectionsForSerialization&#x3D;&quot;true&quot;</span><br><span class="line">  transcoderFactoryClass&#x3D;&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;</span><br><span class="line">    &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>lib 增加 jar 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kryo-1.04.jar</span><br><span class="line">minlog-1.2.jar</span><br><span class="line">asm-3.2.jar</span><br><span class="line">reflectasm-1.01.jar</span><br><span class="line">kryo-serializers-0.11.jar</span><br><span class="line">msm-kryo-serializer-1.7.0.jar</span><br><span class="line">spymemcached-2.10.3.jar</span><br><span class="line">memcached-session-manager-1.7.0.jar</span><br><span class="line">memcached-session-manager-tc7-1.7.0.jar</span><br></pre></td></tr></table></figure>

<p>官网介绍说 使用 kryo 序列化 tomcat 的效率最高 所以这里只介绍 kryo 序列化。具体效率对比，还需要进一步验证。</p>
<p>修改 tomcat/context.xml 文件 新增如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Manager className&#x3D;&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">    memcachedNodes&#x3D;&quot;n1:192.168.0.216:11211&quot;</span><br><span class="line">    sticky&#x3D;&quot;false&quot;</span><br><span class="line">    storageKeyPrefix&#x3D;&quot;context&quot;</span><br><span class="line">    sessionBackupAsync&#x3D;&quot;false&quot;</span><br><span class="line">    lockingMode&#x3D;&quot;uriPattern:&#x2F;path1|&#x2F;path2&quot;</span><br><span class="line">    requestUriIgnorePattern&#x3D;&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">    transcoderFactoryClass&#x3D;&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;</span><br><span class="line">    &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>Manager 各参数说明：</p>
<p>className 必选项，可配置为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">de.javakaffee.web.msm.MemcachedBackupSessionManager和de.javakaffee.web.msm.DummyMemcachedBackupSessionManager。</span><br></pre></td></tr></table></figure>

<p>其中 DummyMemcachedBackupSessionManager 可用于测试环境，不需要真实存在 memcached。</p>
<p>memcachedNodes 必选项，memcached 的节点信息，格式如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">memcachedNodes&#x3D;&quot;n1:app01:11211,n2:app02:11211&quot;。</span><br></pre></td></tr></table></figure>

<p>failoverNodes</p>
<p>可选项，不能使用在 non-sticky sessions 模式。故障转移配置节点，多个使用空格或逗号分开，配置某个节点为备份节点，当其他节点都不可用时才会存储到备份节点，官方建议配置为和 tomcat 同服务器的节点。</p>
<p>理由如下:</p>
<p>假如有两台服务器 m1,m2，其中 m1 部署 tomcat 和 memcached 节点 n1，m2 部署 memcached 节点 n2。</p>
<p>如果配置 tomcat 的 failoverNodes 值为 n2 或者不配置，则当服务器 m1 挂掉后 n1 和 tomcat 中保存的 session 会丢失，而 n2 中未保存或者只保存了部分 session，这就造成部分用户状态丢失。</p>
<p>如果配置 tomcat 的 failoverNodes 值为 n1，则当 m1 挂掉后因为 n2 中保存了所有的 session，所以重启 tomcat 的时候用户状态不会丢失。</p>
<p>为什么 n2 中保存了所有的 session? 因为 failoverNodes 配置的值是 n1，只有当 n2 节点不可用时才会把 session 存储到 n1，所以这个时候 n1 中是没有保存任何 session 的。</p>
<p>username 可选项，SASL 的用户名，如果节点保护 membase 的 bucket uri。</p>
<p>password 可选项，和 username 搭配使用。</p>
<p>memcachedProtocol 可选项，默认 text，memcached 使用的协议，可选值：text，binary。</p>
<p>sticky 可选项，默认 true，制定是否使用粘性 session 模式。</p>
<p>说道 sticky 需要简单介绍</p>
<h6 id="Sticky-模式："><a href="#Sticky-模式：" class="headerlink" title="Sticky 模式："></a>Sticky 模式：</h6><p>tomcat session 为 主 session， memcached 为备 session。Request 请求到来时， 从 memcached 加载备 session 到 tomcat (仅当 tomcat jvmroute 发生变化时，否则直接取 tomcat session)；Request 请求结束时，将 tomcat session 更新至 memcached，以达到主备同步之目的。</p>
<p>Non-Sticky 模式：tomcat session 为 中转 session， memcached1 为主 sessionmemcached 2 为备 session。Request 请求到来时，从 memcached 2 加载备 session 到 tomcat，（当 容器 中还是没有 session 则从 memcached1 加载主 session 到 tomcat， 这种情况是只有一个 memcached 节点，或者有 memcached1 出错时），Request 请求结束时，将 tomcat session 更新至主 memcached1 和备 memcached2，并且清除 tomcat session 。以达到主备同步之目的。</p>
<p>多台 tomcat 集群时 需要选择 Non-Sticky 模式，即 sticky=”false”</p>
<p>需要使用到得 jar 列表如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">couchbase-client-1.2.2.jar</span><br><span class="line">kryo-1.03.jar</span><br><span class="line">kryo-serializers-0.10.jar</span><br><span class="line">memcached-2.5.jar</span><br><span class="line">memcached-session-manager-1.6.5.jar</span><br><span class="line">memcached-session-manager-tc7-1.6.5.jar</span><br><span class="line">minlog-1.2.jar</span><br><span class="line">msm-kryo-serializer-1.6.5.jar</span><br><span class="line">reflectasm-0.9.jar</span><br><span class="line">spymemcached-2.10.2.jar</span><br></pre></td></tr></table></figure>

<p>如果你查看过源码，你就会发现，如果当你调试不成功，session 不共享，一般都是 memcached-session-manager-1.6.5.jar、memcached-session-manager-tc7-1.6.5.jar、msm-kryo-serializer-1.6.5.jar 这三个 jar 包出问题。所以版本也很重要。</p>
<p>服务器之间的时间戳一致也非常重要，因为时间不一致将直接导致 session 过期。</p>
<p>memcached 的启动所有者最好设置为 nobody</p>
<p>本博文是经过实际电商项目验证，实际登录验证，验证过程中不断关停一些 tomcat，所以本博文可作为真实参考。</p>
<p>验证项目为大红袜全球购。</p>
<p>lockingMode 可选值，默认 none，只对 non-sticky 有效。</p>
<p>requestUriIgnorePattern 可选值，制定忽略那些请求的 session 操作，一般制定静态资源如 css,js 一类的。</p>
<p>sessionBackupAsync 可选值，默认 true，是否异步的方式存储到 memcached。</p>
<p>backupThreadCount 可选项，默认是 cpu 核心数，异步存储 session 的线程数。</p>
<p>sessionBackupTimeout 可选项，默认 100 毫秒，异步存储 session 的超时时间。</p>
<p>operationTimeout 可选项，默认 1000 毫秒，memcached 的操作超时时间。</p>
<p>storageKeyPrefix 可选值，默认值 webappVersion，存储到 memcached 的前缀，主要是为了区分多个 webapp 共享 session 的情况。可选值：静态字符串、host、context、webappVersion，多个使用逗号分割。</p>
<p>sessionAttributeFilter 可选值，通过正则表达式确定那些 session 中的属性应该被存储到 memcached。例子如：sessionAttributeFilter=”^(userName|sessionHistory)$“。</p>
<p>transcoderFactoryClass 可选值，默认值 de.javakaffee.web.msm.JavaSerializationTranscoderFactory，制定序列化和反序列化数据到 memcached 的工厂类。</p>
<h5 id="使用-filter-方法存储"><a href="#使用-filter-方法存储" class="headerlink" title="使用 filter 方法存储"></a>使用 filter 方法存储</h5><p>这种方法比较推荐，因为它的服务器使用范围比较多，不仅限于 tomcat ，而且实现的原理比较简单容易控制。</p>
<p>可以使用 memcached-session-filter</p>
<p>官方网址：<a href="https://code.google.com/p/memcached-session-filter/">https://code.google.com/p/memcached-session-filter/</a></p>
<p>官方介绍：解决集群环境下 java web 容器 session 共享,使用 filter 拦截器和 memcached 实现。在 tomcat 6 和 websphere 8 测试通过，现网并发 2000，日 PV 量 1100 万。</p>
<p>暂不支持 session event 包括 create destory 和 attribute change 东西很不错，体积很小，不过这个东东要和 spring 一起使用，而且要求存储到 memcached 的对象要实现 java 的序列化接口大家也知道，java 本身的序列化性能也很一般。</p>
<p>将其简单扩展，就可以不再依赖 spring ，并且利用 javolution 实现序列化，缓存的对象不再有限制。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>memcached</tag>
        <tag>tomcat</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装mysql-源码安装</title>
    <url>//2015/09/01/linux-mysql.html</url>
    <content><![CDATA[<p>1.假设已经有 mysql-5.5.10.tar.gz 以及 cmake-2.8.4.tar.gz 两个源文件</p>
<p>(1)先安装 cmake（mysql5.5 以后是通过 cmake 来编译的）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 local]#tar -zxv -f cmake-2.8.4.tar.gz</span><br><span class="line">[root@ rhel5 local]#cd cmake-2.8.4</span><br><span class="line">[root@ rhel5 cmake-2.8.4]#.&#x2F;configure</span><br><span class="line">[root@ rhel5 cmake-2.8.4]#make</span><br><span class="line">[root@ rhel5 cmake-2.8.4]#make install</span><br></pre></td></tr></table></figure>

<p>(2)创建 mysql 的安装目录及数据库存放目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]#mkdir -p &#x2F;usr&#x2F;local&#x2F;mysql                 &#x2F;&#x2F;安装mysql</span><br><span class="line">[root@ rhel5~]#mkdir -p &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data            &#x2F;&#x2F;存放数据库</span><br></pre></td></tr></table></figure>

<p>(3)创建 mysql 用户及用户组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]groupadd mysql</span><br><span class="line">[root@ rhel5~]useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure>

<p>(4)安装 mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 local]#tar -zxv -f mysql-5.5.10.tar.gz</span><br><span class="line">[root@ rhel5 local]#cd mysql-5.5.10</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 mysql-5.5.10]#cmake .</span><br><span class="line">-DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">-DMYSQL_DATADIR&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line">-DDEFAULT_CHARSET&#x3D;utf8</span><br><span class="line">-DDEFAULT_COLLATION&#x3D;utf8_general_ci</span><br><span class="line">-DEXTRA_CHARSETS&#x3D;all</span><br><span class="line">-DENABLED_LOCAL_INFILE&#x3D;1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 mysql-5.5.10]#make</span><br><span class="line">[root@ rhel5 mysql-5.5.10]#make install</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p>-DCMAKE_INSTALL_PREFIX=/usr/local/mysql //安装目录</p>
</li>
<li><p>-DINSTALL_DATADIR=/usr/local/mysql/data //数据库存放目录</p>
</li>
<li><p>-DDEFAULT_CHARSET=utf8 　　　　//使用 utf8 字符</p>
</li>
<li><p>-DDEFAULT_COLLATION=utf8_general_ci //校验字符</p>
</li>
<li><p>-DEXTRA_CHARSETS=all 　　　　//安装所有扩展字符集</p>
</li>
<li><p>-DENABLED_LOCAL_INFILE=1 　　 //允许从本地导入数据</p>
</li>
</ul>
<p>注意事项：</p>
<p>重新编译时，需要清除旧的对象文件和缓存信息。</p>
<p>make clean</p>
<p>rm -f CMakeCache.txt</p>
<p>rm -rf /etc/my.cnf</p>
<p>2.配置</p>
<p>(1)设置目录权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]# cd &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">[root@ rhel5 mysql]# chown -R root:mysql .　&#x2F;&#x2F;把当前目录中所有文件的所有者所有者设为root，所属组为mysql</span><br><span class="line">[root@ rhel5 mysql]# chown -R mysql:mysql data</span><br></pre></td></tr></table></figure>

<p>(2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 mysql]# cp support-files&#x2F;my-medium.cnf &#x2F;etc&#x2F;my.cnf　&#x2F;&#x2F;将mysql的启动服务添加到系统服务中</span><br></pre></td></tr></table></figure>

<p>(3)创建系统数据库的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 mysql]# cd &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">[root@ rhel5 mysql]# scripts&#x2F;mysql_install_db --user&#x3D;mysql</span><br></pre></td></tr></table></figure>

<p>(4)设置环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]# vi &#x2F;root&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

<p>在 PATH=$PATH:$HOME/bin 添加参数为：</p>
<p><code>PATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]#source &#x2F;root&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

<p>(5)手动启动 mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]# cd &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">[root@ rhel5 mysql]# .&#x2F;bin&#x2F;mysqld_safe --user&#x3D;mysql &amp; 　 &#x2F;&#x2F;启动MySQL，但不能停止</span><br></pre></td></tr></table></figure>

<p>启动日志写在此文件下：<code>/usr/local/mysql/data/localhost.err</code></p>
<p>关闭 MySQL 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 mysql]# mysqladmin -u root -p shutdown　　&#x2F;&#x2F;这里MySQL的root用户还没有配置密码，所以为空值。需要输入密码时，直接点回车键即可。</span><br></pre></td></tr></table></figure>

<p>(6)另一种简单的启动 mysql 的方法(mysql 已经被添加到系统服务中)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]# service mysql.server start</span><br><span class="line">[root@ rhel5~]# service mysql.server stop</span><br><span class="line">[root@ rhel5~]# service mysql.server restart</span><br></pre></td></tr></table></figure>

<p>如果上述命令出现：mysql.server 未识别的服务</p>
<p>则可能 mysql 还没添加到系统服务中，下面用另一种方法添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5 mysql]# cp support-files&#x2F;mysql.server  &#x2F;etc&#x2F;init.d&#x2F;mysql　&#x2F;&#x2F;将mysql的启动服务添加到系统服务中</span><br></pre></td></tr></table></figure>

<p>注意：主要是将 mysql.server 拷贝到/etc/init.d 中，命名为 mysql。在有的系统中，mysql.server 在/usr/local/mysql/share/mysql/mysql.server 中，而本系统中，mysql.server 在/usr/local/mysql/support-files/mysql.server 中。</p>
<p>然后再用#service mysql start 来启动 mysql 即可。</p>
<p>(7)修改 MySQL 的 root 用户的密码以及打开远程连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]# mysql -u root mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;desc user;</span><br><span class="line">mysqlGRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY "root";　　//为root添加远程连接的能力。</span><br><span class="line">mysql&gt;update user set Password = password('xxxxxx') where User='root';</span><br><span class="line">mysql&gt;select Host,User,Password  from user where User='root';</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;exit</span><br></pre></td></tr></table></figure>

<p>重新登录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>若还不能进行远程连接，则关闭防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ rhel5~]# &#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables stop</span><br></pre></td></tr></table></figure>

<p>注：如果不能远程连接，出现错误 mysql error number 1130，则加入下面语句试试：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '******' WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>memcached源码安装、错误处理及启动参数</title>
    <url>//2015/08/18/linux-memcached.html</url>
    <content><![CDATA[<p>memcached 服务安装：</p>
<p>源码包：memcached-1.4.21.tar.gz</p>
<p>依赖包：libevent-2.0.20-stable.tar.gz</p>
<p>libevent 是 memcached 的基本库</p>
<p>安装首先编译安装 libevent，要求为安装三部曲</p>
<p>安装 memcached 在 configure 时，若需要安装多个 memcached，增加路径参数即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;mem1&#x2F;</span><br></pre></td></tr></table></figure>

<p>启动方式：</p>
<p>在 bin 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;memcached -d -c 4096 -m 512 -u root -p 11212</span><br></pre></td></tr></table></figure>

<ul>
<li><p>-d 表示以后台守护进程方式启动</p>
</li>
<li><p>-c 表示最大连接数</p>
</li>
<li><p>-m 表示使用内存大小，单位为 M</p>
</li>
<li><p>-u 表示以 root 用户启动</p>
</li>
<li><p>-p 表示监听端口号</p>
</li>
</ul>
<p>安装 memcache 时，需要建立文件索引或者说文件连接（link），类似 windows 下的快捷方式</p>
<p>启动服务时出现 <strong>error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory</strong></p>
<p>解决办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whereis libevent-2.0.so.5</span><br></pre></td></tr></table></figure>

<p>libevent-2.0.so.5: /usr/local/lib/libevent-2.0.so.5</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldd &#x2F;usr&#x2F;local&#x2F;bin&#x2F;memcached （ldd指令不熟悉的去查看下）</span><br></pre></td></tr></table></figure>

<p>libevent-2.0.so.5 =&gt; not found （没有找到该文件）</p>
<p>libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00002b83fce0e000)</p>
<p>libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b83fd029000)</p>
<p>librt.so.1 =&gt; /lib64/librt.so.1 (0x00002b83fd381000)</p>
<p>/lib64/ld-linux-x86-64.so.2 (0x00002b83fc9b0000)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LD_DEBUG&#x3D;libs .&#x2F;memcached -v</span><br></pre></td></tr></table></figure>

<p>LD_DEBUG=libs /usr/local/mem1/bin/memcached -v<br>找到默认路径 /usr/lib/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;lib&#x2F;libevent-2.0.so.5 &#x2F;usr&#x2F;lib64&#x2F;libevent-2.0.so.5</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ldd &#x2F;usr&#x2F;local&#x2F;bin&#x2F;memcached</span><br></pre></td></tr></table></figure>

<p>libevent-2.0.so.5 =&gt; /usr/lib64/libevent-2.0.so.5 (0x00002b83fcbcd000)</p>
<p>libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00002b83fce0e000)</p>
<p>libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b83fd029000)</p>
<p>librt.so.1 =&gt; /lib64/librt.so.1 (0x00002b83fd381000)</p>
<p>/lib64/ld-linux-x86-64.so.2 (0x00002b83fc9b0000)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>memcached</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU使用率的计算方法</title>
    <url>//2015/07/22/cpu.html</url>
    <content><![CDATA[<p>在 Linux 系统中，可以用/proc/stat 文件来计算 cpu 的利用率。这个文件包含了所有 CPU 活动的信息，该文件中的所有值都是从系统启动开始累计到当前时刻。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;stat</span><br></pre></td></tr></table></figure>

<p>cpu 65376847 362756 2405159 10834971593 3765180 93399 2395097 0</p>
<p>cpu0 7680302 5263 111909 1355640955 47680 0 185343 0</p>
<p>cpu1 6527638 2261 327795 1356540189 249151 1 24242 0</p>
<p>cpu2 6239465 47114 200809 1354709532 2153662 3610 317002 0</p>
<p>cpu3 7009912 36126 257576 1356116663 162851 1068 87068 0</p>
<p>cpu4 6028713 1692 197911 1356919175 300788 6821 216076 0</p>
<p>cpu5 7110575 1479 124474 1356297947 92620 4248 39901 0</p>
<p>cpu6 7206763 241427 247384 1355030525 691206 11642 242214 0</p>
<p>cpu7 17573475 27390 937298 1343716603 67218 66006 1283248 0</p>
<p>intr 2466653411 753885765 3 0 4 4 0 0 0 1 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 52 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 148466005 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1553671397 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10630155 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 21 0 0 0 0 0</p>
<p>ctxt 2905526438</p>
<p>btime 1260187150</p>
<p>processes 4266007</p>
<p>procs_running 5</p>
<p>procs_blocked 0</p>
<p>输出解释</p>
<p>CPU 以及 CPU0、CPU1、CPU2、CPU3、CPU4、CPU5、CPU6、每行的每个参数意思（以第一行为例）为：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="right">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">user (65376847)</td>
<td align="right">从系统启动开始累计到当前时刻，用户态的 CPU 时间（单位：jiffies） ，不包含 nice 值为负进程。1jiffies=0.01 秒</td>
</tr>
<tr>
<td align="left">nice (362756)</td>
<td align="right">从系统启动开始累计到当前时刻，nice 值为负的进程所占用的 CPU 时间（单位：jiffies）</td>
</tr>
<tr>
<td align="left">system (2405159)</td>
<td align="right">从系统启动开始累计到当前时刻，核心时间（单位：jiffies）</td>
</tr>
<tr>
<td align="left">idle (10834971593)</td>
<td align="right">从系统启动开始累计到当前时刻，除硬盘 IO 等待时间以外其它等待时间（单位：jiffies）</td>
</tr>
<tr>
<td align="left">iowait (3765180)</td>
<td align="right">从系统启动开始累计到当前时刻，硬盘 IO 等待时间（单位：jiffies）</td>
</tr>
<tr>
<td align="left">irq (93399)</td>
<td align="right">从系统启动开始累计到当前时刻，硬中断时间（单位：jiffies）</td>
</tr>
<tr>
<td align="left">softirq (2395097)</td>
<td align="right">从系统启动开始累计到当前时刻，软中断时间（单位：jiffies）</td>
</tr>
</tbody></table>
<p>CPU 时间=user+system+nice+idle+iowait+irq+softirq</p>
<ul>
<li><p>“intr”这行给出中断的信息，第一个为自系统启动以来，发生的所有的中断的次数；然后每个数对应一个特定的中断自系统启动以来所发生的次数。</p>
</li>
<li><p>“ctxt”给出了自系统启动以来 CPU 发生的上下文交换的次数。</p>
</li>
<li><p>“btime”给出了从系统启动到现在为止的时间，单位为秒。</p>
</li>
<li><p>“processes (total_forks) 自系统启动以来所创建的任务的个数目。</p>
</li>
<li><p>“procs_running”：当前运行队列的任务的数目。</p>
</li>
<li><p>“procs_blocked”：当前被阻塞的任务的数目。</p>
</li>
</ul>
<p>那么 CPU 利用率可以使用以下两个方法。先取两个采样点，然后计算其差值：</p>
<p>cpu usage=(idle2-idle1)/(cpu2-cpu1)*100</p>
<p>cpu usage=[(user_2 +sys_2+nice_2) – (user_1 + sys_1+nice_1)]/(total_2 – total_1)*100</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS三种工作模式脚本及比较</title>
    <url>//2015/05/09/lvs.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install ipvsadm</span><br><span class="line">modprobe -l|grep ipvs     ##检查ipvs的模块</span><br></pre></td></tr></table></figure>

<p>-g 表示使用 DR 方式，-m 表示 NAT 方式，-i 表示 tunneling 方式。</p>
<h4 id="一、DR-模式"><a href="#一、DR-模式" class="headerlink" title="一、DR 模式"></a>一、DR 模式</h4><p><img src="/images/lvs/dr.jpg" alt="dr"></p>
<p>堡垒机脚本：</p>
<p>lvs.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/bin/sh</span></span><br><span class="line"> VIP=192.168.0.210</span><br><span class="line"> RIP1=192.168.0.175</span><br><span class="line"> RIP2=192.168.0.145</span><br><span class="line"> . /etc/rc.d/init.d/functions</span><br><span class="line">         case "$1" in</span><br><span class="line">         start)</span><br><span class="line">         echo "start LVS of DirectorServer"</span><br><span class="line">         #Set the Virtual IP Address</span><br><span class="line">         /sbin/ifconfig eth0:1 $VIP broadcast $VIP netmask 255.255.255.255 up</span><br><span class="line">         /sbin/route add -host $VIP dev eth0:1</span><br><span class="line">         #Clear IPVS Table</span><br><span class="line">         /sbin/ipvsadm -C</span><br><span class="line">         #Set Lvs</span><br><span class="line">         /sbin/ipvsadm -A -t $VIP:80 -s rr</span><br><span class="line">         /sbin/ipvsadm -a -t $VIP:80 -r $RIP1:80 -g</span><br><span class="line">         /sbin/ipvsadm -a -t $VIP:80 -r $RIP2:80 -g</span><br><span class="line">         #Run Lvs</span><br><span class="line">         /sbin/ipvsadm</span><br><span class="line">         ;;</span><br><span class="line">         stop)</span><br><span class="line">         echo "close LVS Directorserver"</span><br><span class="line">         /sbin/ipvsadm -C</span><br><span class="line">         /sbin/ifconfig eth0:1 down</span><br><span class="line">         ;;</span><br><span class="line">         *)</span><br><span class="line">         echo "Usage： $0 &#123;start|stop&#125;"</span><br><span class="line">         exit 1</span><br><span class="line">         esac</span><br></pre></td></tr></table></figure>

<p>真实机脚本:</p>
<p>real-server.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"> VIP=192.168.0.210</span><br><span class="line"> BROADCAST=192.168.0.255  #vip's broadcast</span><br><span class="line"> . /etc/rc.d/init.d/functions</span><br><span class="line"> case "$1" in</span><br><span class="line">     start)</span><br><span class="line">      echo "reparing for Real Server"</span><br><span class="line">        echo "1" &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">        echo "2" &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">        echo "1" &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">        echo "2" &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">        ifconfig lo:0 $VIP netmask 255.255.255.255 broadcast $BROADCAST up</span><br><span class="line">         /sbin/route add -host $VIP dev lo:0</span><br><span class="line">         ;;</span><br><span class="line">     stop)</span><br><span class="line">         ifconfig lo:0 down</span><br><span class="line">        echo "0" &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">        echo "0" &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">        echo "0" &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">        echo "0" &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">         ;;</span><br><span class="line">     *)</span><br><span class="line">         echo "Usage: lvs &#123;start|stop&#125;"</span><br><span class="line">         exit 1</span><br><span class="line"> esac</span><br></pre></td></tr></table></figure>

<h4 id="二、TUN-模式"><a href="#二、TUN-模式" class="headerlink" title="二、TUN 模式"></a>二、TUN 模式</h4><p><img src="/images/lvs/tun.jpg" alt="tun"></p>
<p>堡垒机脚本：</p>
<p>lvs.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> description: start LVS of Directorserver</span></span><br><span class="line"> VIP=192.168.25.41（注意，lvs server那台机器2个ip，一个是vip,一个是本身ip例如192.168.25.42）</span><br><span class="line"> RIP1=192.168.25.44</span><br><span class="line"> RIP2=192.168.25.45</span><br><span class="line"><span class="meta"> #</span><span class="bash">RIPn=192.168.0.n</span></span><br><span class="line"> GW=192.168.25.254</span><br><span class="line"> . /etc/rc.d/init.d/functions</span><br><span class="line"> case "$1" in</span><br><span class="line"> start)</span><br><span class="line"> echo " start LVS of DirectorServer"</span><br><span class="line"><span class="meta"> #</span><span class="bash"> <span class="built_in">set</span> the Virtual IP Address</span></span><br><span class="line"> /sbin/ifconfig tunl0 $VIP broadcast $VIP netmask 255.255.255.0 up</span><br><span class="line"> /sbin/route add -host $VIP dev tunl0</span><br><span class="line"><span class="meta"> #</span><span class="bash">Clear IPVS table</span></span><br><span class="line"> /sbin/ipvsadm -C</span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="built_in">set</span> LVS</span></span><br><span class="line"> /sbin/ipvsadm -A -t $VIP:80 -s rr</span><br><span class="line"> /sbin/ipvsadm -a -t $VIP:80 -r $RIP1:80 -i</span><br><span class="line"> /sbin/ipvsadm -a -t $VIP:80 -r $RIP2:80 -i</span><br><span class="line"><span class="meta"> #</span><span class="bash">/sbin/ipvsadm -a -t <span class="variable">$VIP</span>:80 -r <span class="variable">$RIP3</span>:80 -i</span></span><br><span class="line"><span class="meta"> #</span><span class="bash">Run LVS</span></span><br><span class="line"> /sbin/ipvsadm</span><br><span class="line"><span class="meta"> #</span><span class="bash">end</span></span><br><span class="line"> ;;</span><br><span class="line"> stop)</span><br><span class="line"> echo "close LVS Directorserver"</span><br><span class="line"> ifconfig tunl0 down</span><br><span class="line"> /sbin/ipvsadm -C</span><br><span class="line"> ;;</span><br><span class="line"> *)</span><br><span class="line"> echo "Usage: $0 &#123;start|stop&#125;"</span><br><span class="line"> exit 1</span><br><span class="line"> esac</span><br></pre></td></tr></table></figure>

<p>真实机脚本:</p>
<p>real-server.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> ghb <span class="keyword">in</span> 20060812</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> description: Config realserver tunl port and apply arp patch</span></span><br><span class="line"> VIP=192.168.25.43</span><br><span class="line"> . /etc/rc.d/init.d/functions</span><br><span class="line"> case "$1" in</span><br><span class="line"> start)</span><br><span class="line"> echo "Tunl port starting"</span><br><span class="line"> ifconfig tunl0 $VIP netmask 255.255.255.0 broadcast $VIP up</span><br><span class="line"> /sbin/route add -host $VIP dev tunl0</span><br><span class="line"> echo "1" &gt;/proc/sys/net/ipv4/conf/tunl0/arp_ignore</span><br><span class="line"> echo "2" &gt;/proc/sys/net/ipv4/conf/tunl0/arp_announce</span><br><span class="line"> echo "1" &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"> echo "2" &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"> sysctl -p</span><br><span class="line"> ;;</span><br><span class="line"> stop)</span><br><span class="line"> echo "Tunl port closing"</span><br><span class="line"> ifconfig tunl0 down</span><br><span class="line"> echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"> echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"> ;;</span><br><span class="line"> *)</span><br><span class="line"> echo "Usage: $0 &#123;start|stop&#125;"</span><br><span class="line"> exit 1</span><br><span class="line"> esac</span><br></pre></td></tr></table></figure>

<h4 id="三、NAT-模式"><a href="#三、NAT-模式" class="headerlink" title="三、NAT 模式"></a>三、NAT 模式</h4><p><img src="/images/lvs/nat.jpg" alt="nat"></p>
<p>堡垒机脚本：</p>
<p>lvs.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> description: start LVS of Nat</span></span><br><span class="line"> VLAN-IP=202.99.59.110</span><br><span class="line"> RIP1=10.1.1.2</span><br><span class="line"> RIP2=10.1.1.3</span><br><span class="line"><span class="meta"> #</span><span class="bash">RIPn=10.1.1.n</span></span><br><span class="line"> GW=10.1.1.1</span><br><span class="line"> . /etc/rc.d/init.d/functions</span><br><span class="line"> case "$1" in</span><br><span class="line"> start)</span><br><span class="line"> echo " start LVS of NAtServer"</span><br><span class="line"> echo "1" &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class="line"> echo "0" &gt;/proc/sys/net/ipv4/conf/all/send_redirects</span><br><span class="line"> echo "0" &gt;/proc/sys/net/ipv4/conf/default/send_redirects</span><br><span class="line"> echo "0" &gt;/proc/sys/net/ipv4/conf/eth0/send_redirects</span><br><span class="line"> echo "0" &gt;/proc/sys/net/ipv4/conf/eth1/send_redirects(内网卡上的)</span><br><span class="line"><span class="meta"> #</span><span class="bash">Clear IPVS table</span></span><br><span class="line"> /sbin/ipvsadm -C</span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="built_in">set</span> LVS</span></span><br><span class="line"> /sbin/ipvsadm -a -t 202.99.59.110:80 -r 10.1.1.2:80 -m -w 1</span><br><span class="line"> /sbin/ipvsadm -a -t 202.99.59.110:80 -r 10.1.1.3:80 -m -w 1</span><br><span class="line"><span class="meta"> #</span><span class="bash">Run LVS</span></span><br><span class="line"> /sbin/ipvsadm</span><br><span class="line"><span class="meta"> #</span><span class="bash">end</span></span><br><span class="line"> ;;</span><br><span class="line"> stop)</span><br><span class="line"> echo "close LVS Nat server"</span><br><span class="line"> echo "0" &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class="line"> echo "1" &gt;/proc/sys/net/ipv4/conf/all/send_redirects</span><br><span class="line"> echo "1" &gt;/proc/sys/net/ipv4/conf/default/send_redirects</span><br><span class="line"> echo "1" &gt;/proc/sys/net/ipv4/conf/eth0/send_redirects</span><br><span class="line"> echo "1" &gt;/proc/sys/net/ipv4/conf/eth1/send_redirects(内网卡上的)</span><br><span class="line"> /sbin/ipvsadm -C</span><br><span class="line"> ;;</span><br><span class="line"> *)</span><br><span class="line"> echo "Usage: $0 &#123;start|stop&#125;"</span><br><span class="line"> exit 1</span><br><span class="line"> esac</span><br></pre></td></tr></table></figure>

<p>VS-Nat 模式的后端机器不需要配置。</p>
<h5 id="LVS-三种工作模式的优缺点比较"><a href="#LVS-三种工作模式的优缺点比较" class="headerlink" title="LVS 三种工作模式的优缺点比较"></a>LVS 三种工作模式的优缺点比较</h5><h6 id="一、Virtual-server-via-NAT（VS-NAT）"><a href="#一、Virtual-server-via-NAT（VS-NAT）" class="headerlink" title="一、Virtual server via NAT（VS-NAT）"></a>一、Virtual server via NAT（VS-NAT）</h6><p><strong>优点：</strong>集群中的物理服务器可以使用任何支持 TCP/IP 操作系统，物理服务器可以分配 Internet 的保留私有地址，只有负载均衡器需要一个合法的 IP 地址。</p>
<p><strong>缺点：</strong>扩展性有限。当服务器节点（普通 PC 服务器）数据增长到 20 个或更多时,负载均衡器将成为整个系统的瓶颈，因为所有的请求包和应答包都需要经过负载均衡器再生。假使 TCP 包的平均长度是 536 字节的话，平均包再生延迟时间大约为 60us（在 Pentium 处理器上计算的，采用更快的处理器将使得这个延迟时间变短），负载均衡器的最大容许能力为 8.93M/s，假定每台物理服务器的平台容许能力为 400K/s 来计算，负责均衡器能为 22 台物理服务器计算。</p>
<p><strong>解决办法：</strong>即使是是负载均衡器成为整个系统的瓶颈，如果是这样也有两种方法来解决它。一种是混合处理，另一种是采用 Virtual Server via IP tunneling 或 Virtual Server via direct routing。如果采用混合处理的方法，将需要许多同属单一的 RR DNS 域。你采用 Virtual Server via IP tunneling 或 Virtual Server via direct routing 以获得更好的可扩展性。也可以嵌套使用负载均衡器，在最前端的是 VS-Tunneling 或 VS-Drouting 的负载均衡器，然后后面采用 VS-NAT 的负载均衡器。</p>
<h6 id="二、Virtual-server-via-IP-tunneling（VS-TUN）"><a href="#二、Virtual-server-via-IP-tunneling（VS-TUN）" class="headerlink" title="二、Virtual server via IP tunneling（VS-TUN）"></a>二、Virtual server via IP tunneling（VS-TUN）</h6><p>我们发现，许多 Internet 服务（例如 WEB 服务器）的请求包很短小，而应答包通常很大。</p>
<p><strong>优点：</strong>负载均衡器只负责将请求包分发给物理服务器，而物理服务器将应答包直接发给用户。所以，负载均衡器能处理很巨大的请求量，这种方式，一台负载均衡能为超过 100 台的物理服务器服务，负载均衡器不再是系统的瓶颈。使用 VS-TUN 方式，如果你的负载均衡器拥有 100M 的全双工网卡的话，就能使得整个 Virtual Server 能达到 1G 的吞吐量。</p>
<p><strong>不足：</strong>但是，这种方式需要所有的服务器支持”IP Tunneling”(IP Encapsulation)协议，我仅在 Linux 系统上实现了这个，如果你能让其它操作系统支持，还在探索之中。</p>
<h6 id="三、Virtual-Server-via-Direct-Routing（VS-DR）"><a href="#三、Virtual-Server-via-Direct-Routing（VS-DR）" class="headerlink" title="三、Virtual Server via Direct Routing（VS-DR）"></a>三、Virtual Server via Direct Routing（VS-DR）</h6><p><strong>优点：</strong>和 VS－TUN 一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端。与 VS-TUN 相比，VS-DR 这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器，其中包括：Linux 2.0.36、2.2.9、2.2.10、2.2.12；Solaris 2.5.1、2.6、2.7；FreeBSD 3.1、3.2、3.3；NT4.0 无需打补丁；IRIX 6.5；HPUX11 等。</p>
<p><strong>不足：</strong>要求负载均衡器的网卡必须与物理网卡在一个物理段上。</p>
<p>附比较表格图:</p>
<p><img src="/images/lvs/bijiao.jpg" alt="bijiao"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>LVS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主备模式配置</title>
    <url>//2015/04/03/mysql-master-slave.html</url>
    <content><![CDATA[<p>背景：</p>
<p>主数据库 IP：192.168.100.2</p>
<p>从数据库 IP：192.168.100.3</p>
<h4 id="一、修改主数据库的的配置文件："><a href="#一、修改主数据库的的配置文件：" class="headerlink" title="一、修改主数据库的的配置文件："></a>一、修改主数据库的的配置文件：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">server-id&#x3D;1</span><br><span class="line">log-bin&#x3D;mysqlmaster-bin.log</span><br><span class="line">sync_binlog&#x3D;1</span><br><span class="line">#注意：下面这个参数需要修改为服务器内存的70%左右</span><br><span class="line">innodb_buffer_pool_size &#x3D; 512M</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;1</span><br><span class="line">sql_mode&#x3D;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_AUTO_VALUE_ON_ZERO</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">log_bin_trust_function_creators&#x3D;1</span><br></pre></td></tr></table></figure>

<p>修改之后要重启 mysql</p>
<h4 id="二、修改从数据库的的配置文件（server-id-配置为大于-1-的数字即可）："><a href="#二、修改从数据库的的配置文件（server-id-配置为大于-1-的数字即可）：" class="headerlink" title="二、修改从数据库的的配置文件（server-id 配置为大于 1 的数字即可）："></a>二、修改从数据库的的配置文件（server-id 配置为大于 1 的数字即可）：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">server-id&#x3D;2</span><br><span class="line">log-bin&#x3D;mysqlslave-bin.log</span><br><span class="line">sync_binlog&#x3D;1</span><br><span class="line">#注意：下面这个参数需要修改为服务器内存的70%左右</span><br><span class="line">innodb_buffer_pool_size &#x3D; 512M</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;1</span><br><span class="line">sql_mode&#x3D;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_AUTO_VALUE_ON_ZERO</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">log_bin_trust_function_creators&#x3D;1</span><br></pre></td></tr></table></figure>

<p>修改之后要重启 mysql</p>
<h4 id="三、SSH-登录到主数据库："><a href="#三、SSH-登录到主数据库：" class="headerlink" title="三、SSH 登录到主数据库："></a>三、SSH 登录到主数据库：</h4><p>（1）在主数据库上创建用于主从复制的账户（192.168.100.3 换成你的从数据库 IP）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* TO &#39;repl&#39;@&#39;192.168.100.3&#39; IDENTIFIED BY &#39;repl&#39;;</span><br></pre></td></tr></table></figure>

<p>（2）主数据库锁表（禁止再插入数据以获取主数据库的的二进制日志坐标）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure>

<p>（3）然后克隆一个 SSH 会话窗口，在这个窗口打开 MySQL 命令行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW MASTER STATUS;</span><br><span class="line">+——————---------------——+—------——-+——------——–+——————+——————-+</span><br><span class="line">| File                  | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+—————---------------———+——------—-+——------——–+——————+——————-+</span><br><span class="line">| mysqlmaster-bin.000001 |   332   |           |      |       |</span><br><span class="line">+—————---------------———+—------——-+—------———–+——————+——————-+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，二进制日志文件是 mysqlmaster-bin.000001，位置是 332，记录下这两个值，稍后要用到。</p>
<p>（4）在主数据库上使用 mysqldump 命令创建一个数据快照：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#mysqldump</span><br><span class="line">-uroot -p -h127.0.0.1 -P3306 –all-databases –triggers –routines –events &gt;all.sql</span><br></pre></td></tr></table></figure>

<p>接下来会提示你输入 mysql 数据库的 root 密码，输入完成后，如果当前数据库不大，很快就能导出完成。</p>
<p>（5）解锁第（2）步主数据的锁表操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>

<h4 id="四、SSH-登录到从数据库："><a href="#四、SSH-登录到从数据库：" class="headerlink" title="四、SSH 登录到从数据库："></a>四、SSH 登录到从数据库：</h4><p>（1）通过 FTP、SFTP 或其他方式，将上一步备份的主数据库快照 all.sql 上传到从数据库某个路径，例如我放在了/home/yimiju/目录下；</p>
<p>（2）从导入主的快照：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#cd &#x2F;home&#x2F;yimiju</span><br><span class="line">#mysql -uroot -p -h127.0.0.1 -P3306 &lt; all.sql</span><br></pre></td></tr></table></figure>

<p>接下来会提示你输入 mysql 数据库的 root 密码，输入完成后，如果当前数据库不大，很快就能导入完成。</p>
<p>（3）给从数据库设置复制的主数据库信息（注意修改 MASTER_LOG_FILE 和 MASTER_LOG_POS 的值）：</p>
<p><code>#mysql -uroot -p</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;192.168.100.2&#39;,MASTER_USER&#x3D;&#39;repl&#39;,MASTER_PASSWORD&#x3D;&#39;repl&#39;,MASTER_LOG_FILE&#x3D;&#39;mysqlmaster-bin.000001&#39;,MASTER_LOG_POS&#x3D;332;</span><br></pre></td></tr></table></figure>

<p>然后启动从数据库的复制线程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;START slave;</span><br></pre></td></tr></table></figure>

<p>接着查询数据库的 slave 状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW slave STATUS \G;</span><br></pre></td></tr></table></figure>

<p>如果下面两个参数都是 Yes，则说明主从配置成功！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>

<p>（4）接下来你可以在主数据库上创建数据库、表、插入数据，然后看从数据库是否同步了这些操作。</p>
<p>大功告成。</p>
<h1 id="安装-percona-xtrabackup-主从同步数据"><a href="#安装-percona-xtrabackup-主从同步数据" class="headerlink" title="安装 percona-xtrabackup 主从同步数据"></a>安装 percona-xtrabackup 主从同步数据</h1><h2 id="安装-percona-xtrabackup"><a href="#安装-percona-xtrabackup" class="headerlink" title="安装 percona-xtrabackup"></a>安装 percona-xtrabackup</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -Uhv https:&#x2F;&#x2F;www.percona.com&#x2F;redir&#x2F;downloads&#x2F;percona-release&#x2F;redhat&#x2F;latest&#x2F;percona-release-0.1-4.noarch.rpm</span><br><span class="line">rpm -ivh https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;6&#x2F;x86_64&#x2F;libev-4.03-3.el6.x86_64.rpm</span><br><span class="line">yum -y install percona-xtrabackup</span><br></pre></td></tr></table></figure>

<h2 id="master-操作"><a href="#master-操作" class="headerlink" title="master 操作"></a>master 操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">innobackupex --user root --password ync365.com .&#x2F; 备份</span><br><span class="line">tar -cvf 118.tar .&#x2F;2017-03-17_14-14-56&#x2F; 打包</span><br><span class="line">scp 118.tar root@20.0.1.115:~&#x2F;118&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="slave-操作"><a href="#slave-操作" class="headerlink" title="slave 操作"></a>slave 操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysqld stop</span><br><span class="line">rm -rf &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;*</span><br><span class="line">cp -r ~&#x2F;118&#x2F;2017-03-17_14-14-56&#x2F; &#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">chown -R mysql:mysql &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;*</span><br><span class="line">cat &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;xtrabackup_info</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<p>cat /var/lib/mysql/xtrabackup_info</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uuid &#x3D; 5e4129de-0ad9-11e7-8d03-b083fee38281</span><br><span class="line">name &#x3D;</span><br><span class="line">tool_name &#x3D; innobackupex</span><br><span class="line">tool_command &#x3D; --user root --password&#x3D;... ync365.com &#x2F;root&#x2F;</span><br><span class="line">tool_version &#x3D; 2.3.7</span><br><span class="line">ibbackup_version &#x3D; 2.3.7</span><br><span class="line">server_version &#x3D; 5.6.31-log</span><br><span class="line">start_time &#x3D; 2017-03-17 14:14:56</span><br><span class="line">end_time &#x3D; 2017-03-17 14:17:16</span><br><span class="line">lock_time &#x3D; 0</span><br><span class="line">binlog_pos &#x3D; filename &#39;mysql-bin.000010&#39;, position &#39;131585830&#39;</span><br><span class="line">innodb_from_lsn &#x3D; 0</span><br><span class="line">innodb_to_lsn &#x3D; 20989977102</span><br><span class="line">partial &#x3D; N</span><br><span class="line">incremental &#x3D; N</span><br><span class="line">format &#x3D; file</span><br><span class="line">compact &#x3D; N</span><br><span class="line">compressed &#x3D; N</span><br><span class="line">encrypted &#x3D; N</span><br></pre></td></tr></table></figure>

<p>mysql -u root -p 连接操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;change master to master_host&#x3D;&#39;20.0.1.118&#39;;</span><br><span class="line">mysql&gt;change master to master_port&#x3D;3306;</span><br><span class="line">mysql&gt;change master to master_user&#x3D;&#39;mysync&#39;;</span><br><span class="line">mysql&gt;change master to master_log_file&#x3D;&#39;mysql-bin.000010&#39;;</span><br><span class="line">mysql&gt;change master to master_log_pos&#x3D;131585830;</span><br></pre></td></tr></table></figure>

<p>设置只读</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;set global read_only&#x3D;1;</span><br><span class="line">mysql&gt;show global variables like &#39;read_only&#39;;</span><br></pre></td></tr></table></figure>

<p>1032 错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND;</span><br><span class="line">在my.cnf里面，设置slave-skip-errors&#x3D;1032  然后从新启动mysql数据库</span><br></pre></td></tr></table></figure>

<p>centos 6.7 yum 安装 mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql-community-release-el6-5.noarch.rpm</span><br><span class="line">yum install mysql-server -y</span><br></pre></td></tr></table></figure>

<h1 id="MySQL-5-6-35-主从配置文件"><a href="#MySQL-5-6-35-主从配置文件" class="headerlink" title="MySQL 5.6.35 主从配置文件"></a>MySQL 5.6.35 主从配置文件</h1><p>E5-2603 v2 8 核 32G 内存</p>
<p>master</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># For advice on how to change settings please see</span><br><span class="line"># https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.6&#x2F;en&#x2F;server-configuration-defaults.html</span><br><span class="line">[mysqld]</span><br><span class="line">datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line">server_id&#x3D;10001</span><br><span class="line">skip-external-locking</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">default_storage_engine&#x3D;InnoDB</span><br><span class="line">character_set_server&#x3D;utf8</span><br><span class="line">max_connections&#x3D;9000</span><br><span class="line">log_bin_trust_function_creators&#x3D;TRUE</span><br><span class="line">binlog_format &#x3D; MIXED</span><br><span class="line">transaction-isolation &#x3D; READ-COMMITTED</span><br><span class="line">join_buffer_size&#x3D;64M</span><br><span class="line">read_buffer_size &#x3D; 10M</span><br><span class="line">read_rnd_buffer_size &#x3D; 16M</span><br><span class="line">sort_buffer_size &#x3D; 32M</span><br><span class="line">bulk_insert_buffer_size &#x3D; 64M</span><br><span class="line">innodb_buffer_pool_size&#x3D;11G</span><br><span class="line">innodb_log_buffer_size &#x3D; 8M</span><br><span class="line">innodb_log_file_size &#x3D; 256M</span><br><span class="line">innodb_log_files_in_group &#x3D; 3</span><br><span class="line">innodb_max_dirty_pages_pct &#x3D; 90</span><br><span class="line">innodb_file_per_table</span><br><span class="line">innodb_flush_method &#x3D; O_DIRECT</span><br><span class="line">innodb_use_native_aio &#x3D; 1</span><br><span class="line">innodb_write_io_threads &#x3D; 8</span><br><span class="line">innodb_read_io_threads &#x3D; 8</span><br><span class="line">innodb_thread_concurrency &#x3D; 16</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 2</span><br><span class="line">innodb_log_buffer_size &#x3D; 8M</span><br><span class="line">thread_stack &#x3D; 192K</span><br><span class="line">thread_cache_size &#x3D; 8</span><br><span class="line">innodb_additional_mem_pool_size &#x3D; 40M</span><br><span class="line">slow_query_log</span><br><span class="line">long_query_time &#x3D; 1</span><br><span class="line">general_log&#x3D;ON</span><br><span class="line">general_log_file&#x3D;&#x2F;tmp&#x2F;mysql.log</span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES,STRICT_TRANS_TABLES</span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br></pre></td></tr></table></figure>

<p>slave</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># For advice on how to change settings please see</span><br><span class="line"># https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.6&#x2F;en&#x2F;server-configuration-defaults.html</span><br><span class="line">[mysqld]</span><br><span class="line">datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line">server_id&#x3D;105</span><br><span class="line">skip-external-locking</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">default_storage_engine&#x3D;InnoDB</span><br><span class="line">character_set_server&#x3D;utf8</span><br><span class="line">max_connections&#x3D;9000</span><br><span class="line">log_bin_trust_function_creators&#x3D;TRUE</span><br><span class="line">binlog_format &#x3D; MIXED</span><br><span class="line">transaction-isolation &#x3D; READ-COMMITTED</span><br><span class="line">join_buffer_size&#x3D;64M</span><br><span class="line">read_buffer_size &#x3D; 10M</span><br><span class="line">read_rnd_buffer_size &#x3D; 16M</span><br><span class="line">sort_buffer_size &#x3D; 32M</span><br><span class="line">bulk_insert_buffer_size &#x3D; 64M</span><br><span class="line">innodb_buffer_pool_size&#x3D;11G</span><br><span class="line">innodb_log_buffer_size &#x3D; 8M</span><br><span class="line">innodb_log_file_size &#x3D; 256M</span><br><span class="line">innodb_log_files_in_group &#x3D; 3</span><br><span class="line">innodb_max_dirty_pages_pct &#x3D; 90</span><br><span class="line">innodb_file_per_table</span><br><span class="line">innodb_flush_method &#x3D; O_DIRECT</span><br><span class="line">innodb_use_native_aio &#x3D; 1</span><br><span class="line">innodb_write_io_threads &#x3D; 8</span><br><span class="line">innodb_read_io_threads &#x3D; 8</span><br><span class="line">innodb_thread_concurrency &#x3D; 16</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 2</span><br><span class="line">innodb_log_buffer_size &#x3D; 8M</span><br><span class="line">thread_stack &#x3D; 192K</span><br><span class="line">thread_cache_size &#x3D; 8</span><br><span class="line">innodb_additional_mem_pool_size &#x3D; 40M</span><br><span class="line">slow_query_log</span><br><span class="line">long_query_time &#x3D; 1</span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES,STRICT_TRANS_TABLES</span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>主从</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx源码安装及安全</title>
    <url>//2015/03/03/nginx.html</url>
    <content><![CDATA[<p>nginx 安装版本为 nginx-1.6.2.tar.gz，这个版本为目前最新的稳定版。</p>
<p>安装之前需要安装 pcre 插件包，插件包版本为：pcre-8.36.tar.gz<br>还有 zlib 库和 ssl，通过 yum 安装即可，<code>yum -y install zlib* openssl openssl-devel</code>。</p>
<p>源码安装遵循安装三部曲：<code>./configure ; make ; make install</code></p>
<p>安装之前需要安装 Develepment Tools 环境，<code>yum -y groupinstall “Development Tools”</code>。</p>
<p>其中 nginx 根据不同的用途安装如下插件包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --with-http_stub_status_module --with-http_image_filter_module --with-http_ssl_module --with-pcre&#x3D;&#x2F;pcre&#x2F;path --add-module&#x3D;&#x2F;purge&#x2F;path</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一个是 stub 监控模块</p>
</li>
<li><p>第二个是图片处理模块，负责图片缩放</p>
</li>
<li><p>第三个是 https 模块</p>
</li>
<li><p>第四个是 pcre 模块</p>
</li>
<li><p>第五个是 cache purge 模块，需要下载，地址在:<a href="https://labs.frickle.com/files/">https://labs.frickle.com/files/</a></p>
</li>
</ul>
<p>隐藏 nginx 版本号：</p>
<p>一、就 nginx 方面的调整，这里可以直接修改 nginx 的配置文件来隐藏：<br>添加 server_tokens off；</p>
<p>二、如果想要把 nginx 也隐藏掉，需要编辑 nginx 源码中的 src/core/nginx.h 头文件 nginx 修改为 Microsoft-IIS 版本号改为 7，修改后的截图如下</p>
<p><img src="/images/nginx/safe.jpg" alt="safe"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Top命令VIRT,RES,SHR,DATA的含义</title>
    <url>//2015/02/02/Top_command-VIRT-RES-SHR-DATA.html</url>
    <content><![CDATA[<h4 id="VIRT：virtual-memory-usage"><a href="#VIRT：virtual-memory-usage" class="headerlink" title="VIRT：virtual memory usage"></a>VIRT：virtual memory usage</h4><ol>
<li>进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等</li>
<li>假如进程申请 100m 的内存，但实际只使用了 10m，那么它会增长 100m，而不是实际的使用量</li>
</ol>
<h4 id="RES：resident-memory-usage-常驻内存"><a href="#RES：resident-memory-usage-常驻内存" class="headerlink" title="RES：resident memory usage 常驻内存"></a>RES：resident memory usage 常驻内存</h4><ol>
<li>进程当前使用的内存大小，但不包括 swap out</li>
<li>包含其他进程的共享</li>
<li>如果申请 100m 的内存，实际使用 10m，它只增长 10m，与 VIRT 相反</li>
<li>关于库占用内存的情况，它只统计加载的库文件所占内存大小</li>
</ol>
<h4 id="SHR：shared-memory"><a href="#SHR：shared-memory" class="headerlink" title="SHR：shared memory"></a>SHR：shared memory</h4><ol>
<li>除了自身进程的共享内存，也包括其他进程的共享内存</li>
<li>虽然进程只使用了几个共享库的函数，但它包含了整个共享库的大小</li>
<li>计算某个进程所占的物理内存大小公式：RES – SHR</li>
<li>swap out 后，它将会降下来</li>
</ol>
<h4 id="DATA"><a href="#DATA" class="headerlink" title="DATA"></a>DATA</h4><ol>
<li>数据占用的内存。如果 top 没有显示，按 f 键可以显示出来。</li>
<li>真正的该程序要求的数据空间，是真正在运行中要使用的。</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>top</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh非root用户key认证登陆及忽略known_hosts</title>
    <url>//2015/02/02/ssh-key.html</url>
    <content><![CDATA[<p>有些时候，我们不能使用 root 用户在正式环境服务器操作，此时可以使用普通用户，root 用户的 key 认证登陆设置非常简单，普通用户的 key 认证登陆尝试好几次总算找到了原因，最终还是文件和文件夹权限的问题，下面简单说一下具体的 key 认证配置方法：（假设这里有两台服务器 A、B，A 服务器的 jack 用户要实现 key 认证登陆 B 服务器）</p>
<p>在两台服务器上建立 jack 用户，在 A 服务器的 jack 用户下生成 jack 的公私钥，然后将 jack 的公钥放入 B 服务器下 jack 家目录的<code>.ssh/authorized_keys</code>里。</p>
<p>下面就是权限配置：被登录主机权限如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. chmod 755 &#x2F;home&#x2F;jack&#x2F;</span><br><span class="line"></span><br><span class="line">2. chmod 700 &#x2F;home&#x2F;jack&#x2F;.ssh&#x2F;</span><br><span class="line"></span><br><span class="line">3. chmod 600 &#x2F;home&#x2F;jack&#x2F;.ssh&#x2F;*</span><br></pre></td></tr></table></figure>

<p>原主机最好也做同样配置，这样就大功告成了。</p>
<p>在平时工作中，有时候需要 SSH 登陆到别的 Linux 主机上去，但有时候 SSH 登陆会被禁止，并弹出如下类似提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that the RSA host key has just been changed.The fingerprint for the RSA key sent by the remote host is36:68:a6:e6:43:34:6b:82:d7:f4:df:1f:c2:e7:37:cc.</span><br><span class="line">Please contact your system administrator.Add correct host key in &#x2F;u&#x2F;xlian008&#x2F;.ssh&#x2F;known_hosts to get rid of this message.Offending key in &#x2F;u&#x2F;xlian008&#x2F;.ssh&#x2F;known_hosts:2RSA host key for 135.1.35.130 has changed and you have requested strict checking.Host key verification failed.</span><br></pre></td></tr></table></figure>

<p>比较奇怪，于是研究了一下。</p>
<p>ssh 会把你每个你访问过计算机的公钥(public key)都记录在<code>~/.ssh/known_hosts</code>。当下次访问相同计算机时，OpenSSH 会核对公钥。如果公钥不同，OpenSSH 会发出警告， 避免你受到 DNS Hijack 之类的攻击。上面列出的情况，就是这种情况。</p>
<p>原因：一台主机上有多个 Linux 系统，会经常切换，那么这些系统使用同一 ip，登录过一次后就会把 ssh 信息记录在本地的<code>~/.ssh/known_hsots</code>文件中，切换该系统后再用 ssh 访问这台主机就会出现冲突警告，需要手动删除修改 known_hsots 里面的内容。</p>
<p>有以下两个解决方案：</p>
<ol>
<li><p>手动删除修改 known_hsots 里面的内容；</p>
</li>
<li><p>修改配置文件<code>~/.ssh/config</code>，加上这两行，重启服务器。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StrictHostKeyChecking no</span><br><span class="line">UserKnownHostsFile &#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>key</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>//2015/01/08/first-blog.html</url>
    <content><![CDATA[<p>喜欢写 Blog 的人，会经历三个阶段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。</span><br><span class="line">第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</span><br><span class="line">第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</span><br></pre></td></tr></table></figure>

<p>转自<a href="https://www.ruanyifeng.com/">阮一峰</a>的博文。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
